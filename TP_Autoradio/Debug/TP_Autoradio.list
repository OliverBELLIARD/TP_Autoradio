
TP_Autoradio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a40  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  08008bd0  08008bd0  00009bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fe0  08008fe0  0000a074  2**0
                  CONTENTS
  4 .ARM          00000008  08008fe0  08008fe0  00009fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008fe8  08008fe8  0000a074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fe8  08008fe8  00009fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008fec  08008fec  00009fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08008ff0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000057e0  20000074  08009064  0000a074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005854  08009064  0000a854  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019f3f  00000000  00000000  0000a0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042b9  00000000  00000000  00023fe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001678  00000000  00000000  000282a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000113d  00000000  00000000  00029918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a55b  00000000  00000000  0002aa55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bb12  00000000  00000000  00054fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7e94  00000000  00000000  00070ac2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00168956  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006544  00000000  00000000  0016899c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  0016eee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008bb8 	.word	0x08008bb8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08008bb8 	.word	0x08008bb8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	60f8      	str	r0, [r7, #12]
 8000568:	60b9      	str	r1, [r7, #8]
 800056a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	4a07      	ldr	r2, [pc, #28]	@ (800058c <vApplicationGetIdleTaskMemory+0x2c>)
 8000570:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000572:	68bb      	ldr	r3, [r7, #8]
 8000574:	4a06      	ldr	r2, [pc, #24]	@ (8000590 <vApplicationGetIdleTaskMemory+0x30>)
 8000576:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	2280      	movs	r2, #128	@ 0x80
 800057c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800057e:	bf00      	nop
 8000580:	3714      	adds	r7, #20
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000094 	.word	0x20000094
 8000590:	200000e8 	.word	0x200000e8

08000594 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000594:	b5b0      	push	{r4, r5, r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800059a:	4b0a      	ldr	r3, [pc, #40]	@ (80005c4 <MX_FREERTOS_Init+0x30>)
 800059c:	1d3c      	adds	r4, r7, #4
 800059e:	461d      	mov	r5, r3
 80005a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2100      	movs	r1, #0
 80005b0:	4618      	mov	r0, r3
 80005b2:	f005 f94e 	bl	8005852 <osThreadCreate>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a03      	ldr	r2, [pc, #12]	@ (80005c8 <MX_FREERTOS_Init+0x34>)
 80005ba:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80005bc:	bf00      	nop
 80005be:	3720      	adds	r7, #32
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bdb0      	pop	{r4, r5, r7, pc}
 80005c4:	08008bdc 	.word	0x08008bdc
 80005c8:	20000090 	.word	0x20000090

080005cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005d4:	2001      	movs	r0, #1
 80005d6:	f005 f988 	bl	80058ea <osDelay>
 80005da:	e7fb      	b.n	80005d4 <StartDefaultTask+0x8>

080005dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08a      	sub	sp, #40	@ 0x28
 80005e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f2:	4b35      	ldr	r3, [pc, #212]	@ (80006c8 <MX_GPIO_Init+0xec>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f6:	4a34      	ldr	r2, [pc, #208]	@ (80006c8 <MX_GPIO_Init+0xec>)
 80005f8:	f043 0304 	orr.w	r3, r3, #4
 80005fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005fe:	4b32      	ldr	r3, [pc, #200]	@ (80006c8 <MX_GPIO_Init+0xec>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000602:	f003 0304 	and.w	r3, r3, #4
 8000606:	613b      	str	r3, [r7, #16]
 8000608:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800060a:	4b2f      	ldr	r3, [pc, #188]	@ (80006c8 <MX_GPIO_Init+0xec>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800060e:	4a2e      	ldr	r2, [pc, #184]	@ (80006c8 <MX_GPIO_Init+0xec>)
 8000610:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000614:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000616:	4b2c      	ldr	r3, [pc, #176]	@ (80006c8 <MX_GPIO_Init+0xec>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800061a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000622:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <MX_GPIO_Init+0xec>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000626:	4a28      	ldr	r2, [pc, #160]	@ (80006c8 <MX_GPIO_Init+0xec>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800062e:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <MX_GPIO_Init+0xec>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063a:	4b23      	ldr	r3, [pc, #140]	@ (80006c8 <MX_GPIO_Init+0xec>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800063e:	4a22      	ldr	r2, [pc, #136]	@ (80006c8 <MX_GPIO_Init+0xec>)
 8000640:	f043 0302 	orr.w	r3, r3, #2
 8000644:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000646:	4b20      	ldr	r3, [pc, #128]	@ (80006c8 <MX_GPIO_Init+0xec>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064a:	f003 0302 	and.w	r3, r3, #2
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VU_nRESET_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	2121      	movs	r1, #33	@ 0x21
 8000656:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800065a:	f001 fbdb 	bl	8001e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	2180      	movs	r1, #128	@ 0x80
 8000662:	481a      	ldr	r0, [pc, #104]	@ (80006cc <MX_GPIO_Init+0xf0>)
 8000664:	f001 fbd6 	bl	8001e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000668:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800066c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800066e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000672:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	4619      	mov	r1, r3
 800067e:	4814      	ldr	r0, [pc, #80]	@ (80006d0 <MX_GPIO_Init+0xf4>)
 8000680:	f001 fa1e 	bl	8001ac0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VU_nRESET_Pin LD2_Pin */
  GPIO_InitStruct.Pin = VU_nRESET_Pin|LD2_Pin;
 8000684:	2321      	movs	r3, #33	@ 0x21
 8000686:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000688:	2301      	movs	r3, #1
 800068a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000690:	2300      	movs	r3, #0
 8000692:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000694:	f107 0314 	add.w	r3, r7, #20
 8000698:	4619      	mov	r1, r3
 800069a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800069e:	f001 fa0f 	bl	8001ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VU_nCS_Pin */
  GPIO_InitStruct.Pin = VU_nCS_Pin;
 80006a2:	2380      	movs	r3, #128	@ 0x80
 80006a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a6:	2301      	movs	r3, #1
 80006a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ae:	2300      	movs	r3, #0
 80006b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VU_nCS_GPIO_Port, &GPIO_InitStruct);
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	4619      	mov	r1, r3
 80006b8:	4804      	ldr	r0, [pc, #16]	@ (80006cc <MX_GPIO_Init+0xf0>)
 80006ba:	f001 fa01 	bl	8001ac0 <HAL_GPIO_Init>

}
 80006be:	bf00      	nop
 80006c0:	3728      	adds	r7, #40	@ 0x28
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40021000 	.word	0x40021000
 80006cc:	48000400 	.word	0x48000400
 80006d0:	48000800 	.word	0x48000800

080006d4 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000748 <MX_I2C2_Init+0x74>)
 80006da:	4a1c      	ldr	r2, [pc, #112]	@ (800074c <MX_I2C2_Init+0x78>)
 80006dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 80006de:	4b1a      	ldr	r3, [pc, #104]	@ (8000748 <MX_I2C2_Init+0x74>)
 80006e0:	4a1b      	ldr	r2, [pc, #108]	@ (8000750 <MX_I2C2_Init+0x7c>)
 80006e2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80006e4:	4b18      	ldr	r3, [pc, #96]	@ (8000748 <MX_I2C2_Init+0x74>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ea:	4b17      	ldr	r3, [pc, #92]	@ (8000748 <MX_I2C2_Init+0x74>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f0:	4b15      	ldr	r3, [pc, #84]	@ (8000748 <MX_I2C2_Init+0x74>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80006f6:	4b14      	ldr	r3, [pc, #80]	@ (8000748 <MX_I2C2_Init+0x74>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006fc:	4b12      	ldr	r3, [pc, #72]	@ (8000748 <MX_I2C2_Init+0x74>)
 80006fe:	2200      	movs	r2, #0
 8000700:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000702:	4b11      	ldr	r3, [pc, #68]	@ (8000748 <MX_I2C2_Init+0x74>)
 8000704:	2200      	movs	r2, #0
 8000706:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000708:	4b0f      	ldr	r3, [pc, #60]	@ (8000748 <MX_I2C2_Init+0x74>)
 800070a:	2200      	movs	r2, #0
 800070c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800070e:	480e      	ldr	r0, [pc, #56]	@ (8000748 <MX_I2C2_Init+0x74>)
 8000710:	f001 fbb2 	bl	8001e78 <HAL_I2C_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800071a:	f000 fa8c 	bl	8000c36 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800071e:	2100      	movs	r1, #0
 8000720:	4809      	ldr	r0, [pc, #36]	@ (8000748 <MX_I2C2_Init+0x74>)
 8000722:	f001 fc44 	bl	8001fae <HAL_I2CEx_ConfigAnalogFilter>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800072c:	f000 fa83 	bl	8000c36 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000730:	2100      	movs	r1, #0
 8000732:	4805      	ldr	r0, [pc, #20]	@ (8000748 <MX_I2C2_Init+0x74>)
 8000734:	f001 fc86 	bl	8002044 <HAL_I2CEx_ConfigDigitalFilter>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800073e:	f000 fa7a 	bl	8000c36 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	200002e8 	.word	0x200002e8
 800074c:	40005800 	.word	0x40005800
 8000750:	10d19ce4 	.word	0x10d19ce4

08000754 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b0ac      	sub	sp, #176	@ 0xb0
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800076c:	f107 0314 	add.w	r3, r7, #20
 8000770:	2288      	movs	r2, #136	@ 0x88
 8000772:	2100      	movs	r1, #0
 8000774:	4618      	mov	r0, r3
 8000776:	f007 fae5 	bl	8007d44 <memset>
  if(i2cHandle->Instance==I2C2)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4a21      	ldr	r2, [pc, #132]	@ (8000804 <HAL_I2C_MspInit+0xb0>)
 8000780:	4293      	cmp	r3, r2
 8000782:	d13b      	bne.n	80007fc <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000784:	2380      	movs	r3, #128	@ 0x80
 8000786:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000788:	2300      	movs	r3, #0
 800078a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800078c:	f107 0314 	add.w	r3, r7, #20
 8000790:	4618      	mov	r0, r3
 8000792:	f002 fb07 	bl	8002da4 <HAL_RCCEx_PeriphCLKConfig>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800079c:	f000 fa4b 	bl	8000c36 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a0:	4b19      	ldr	r3, [pc, #100]	@ (8000808 <HAL_I2C_MspInit+0xb4>)
 80007a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a4:	4a18      	ldr	r2, [pc, #96]	@ (8000808 <HAL_I2C_MspInit+0xb4>)
 80007a6:	f043 0302 	orr.w	r3, r3, #2
 80007aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ac:	4b16      	ldr	r3, [pc, #88]	@ (8000808 <HAL_I2C_MspInit+0xb4>)
 80007ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b0:	f003 0302 	and.w	r3, r3, #2
 80007b4:	613b      	str	r3, [r7, #16]
 80007b6:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80007b8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80007bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007c0:	2312      	movs	r3, #18
 80007c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007cc:	2303      	movs	r3, #3
 80007ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80007d2:	2304      	movs	r3, #4
 80007d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80007dc:	4619      	mov	r1, r3
 80007de:	480b      	ldr	r0, [pc, #44]	@ (800080c <HAL_I2C_MspInit+0xb8>)
 80007e0:	f001 f96e 	bl	8001ac0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80007e4:	4b08      	ldr	r3, [pc, #32]	@ (8000808 <HAL_I2C_MspInit+0xb4>)
 80007e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007e8:	4a07      	ldr	r2, [pc, #28]	@ (8000808 <HAL_I2C_MspInit+0xb4>)
 80007ea:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80007ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80007f0:	4b05      	ldr	r3, [pc, #20]	@ (8000808 <HAL_I2C_MspInit+0xb4>)
 80007f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80007fc:	bf00      	nop
 80007fe:	37b0      	adds	r7, #176	@ 0xb0
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40005800 	.word	0x40005800
 8000808:	40021000 	.word	0x40021000
 800080c:	48000400 	.word	0x48000400

08000810 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000814:	f3bf 8f4f 	dsb	sy
}
 8000818:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800081a:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <__NVIC_SystemReset+0x24>)
 800081c:	68db      	ldr	r3, [r3, #12]
 800081e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000822:	4904      	ldr	r1, [pc, #16]	@ (8000834 <__NVIC_SystemReset+0x24>)
 8000824:	4b04      	ldr	r3, [pc, #16]	@ (8000838 <__NVIC_SystemReset+0x28>)
 8000826:	4313      	orrs	r3, r2
 8000828:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800082a:	f3bf 8f4f 	dsb	sy
}
 800082e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000830:	bf00      	nop
 8000832:	e7fd      	b.n	8000830 <__NVIC_SystemReset+0x20>
 8000834:	e000ed00 	.word	0xe000ed00
 8000838:	05fa0004 	.word	0x05fa0004

0800083c <__io_putchar>:
 * @brief Transmit a character over UART.
 * @param ch: Character to transmit.
 * @retval int: The transmitted character.
 */
int __io_putchar(int ch)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000844:	1d39      	adds	r1, r7, #4
 8000846:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800084a:	2201      	movs	r2, #1
 800084c:	4803      	ldr	r0, [pc, #12]	@ (800085c <__io_putchar+0x20>)
 800084e:	f003 fc45 	bl	80040dc <HAL_UART_Transmit>

	return ch;
 8000852:	687b      	ldr	r3, [r7, #4]
}
 8000854:	4618      	mov	r0, r3
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	200003b0 	.word	0x200003b0

08000860 <Error_Handler_xTaskCreate>:
/**
 * @brief  Gestion d'erreurs de création de tâche.
 * @param	BaseType_t	Retour de xTaskCreate.
 */
void Error_Handler_xTaskCreate(BaseType_t r)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
	/* Vérification si la tâche a été créée avec succès */
	if (pdPASS == r) {
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2b01      	cmp	r3, #1
 800086c:	d010      	beq.n	8000890 <Error_Handler_xTaskCreate+0x30>
		/* Si la tâche est créée avec succès, démarrer le scheduler */
#if (LOGS)
		printf("Tâche crée avec succès\r\n");
#endif
	} else if (errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY == r) {
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000874:	d105      	bne.n	8000882 <Error_Handler_xTaskCreate+0x22>
		printf("Erreur: Mémoire insuffisante\r\n");
 8000876:	4808      	ldr	r0, [pc, #32]	@ (8000898 <Error_Handler_xTaskCreate+0x38>)
 8000878:	f007 f950 	bl	8007b1c <puts>
		Error_Handler();
 800087c:	f000 f9db 	bl	8000c36 <Error_Handler>
		/* Cas improbable : code d'erreur non prévu pour xTaskCreate */
		printf("Erreur inconnue lors de la création de la tâche\r\n");
		Error_Handler();  	// Gestion d'erreur générique
		NVIC_SystemReset(); // Réinitialiser le microcontrôleur
	}
}
 8000880:	e006      	b.n	8000890 <Error_Handler_xTaskCreate+0x30>
		printf("Erreur inconnue lors de la création de la tâche\r\n");
 8000882:	4806      	ldr	r0, [pc, #24]	@ (800089c <Error_Handler_xTaskCreate+0x3c>)
 8000884:	f007 f94a 	bl	8007b1c <puts>
		Error_Handler();  	// Gestion d'erreur générique
 8000888:	f000 f9d5 	bl	8000c36 <Error_Handler>
		NVIC_SystemReset(); // Réinitialiser le microcontrôleur
 800088c:	f7ff ffc0 	bl	8000810 <__NVIC_SystemReset>
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	08008bf8 	.word	0x08008bf8
 800089c:	08008c18 	.word	0x08008c18

080008a0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a04      	ldr	r2, [pc, #16]	@ (80008c0 <HAL_UART_RxCpltCallback+0x20>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d101      	bne.n	80008b6 <HAL_UART_RxCpltCallback+0x16>
	{
		shell_uart_receive_irq_cb();	// Function giving the semaphore!
 80008b2:	f000 fd1f 	bl	80012f4 <shell_uart_receive_irq_cb>
	}
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40004400 	.word	0x40004400

080008c4 <task_LED>:


void task_LED (void * pvParameters) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
	int duree = (int) pvParameters;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	60fb      	str	r3, [r7, #12]
#if (LOGS)
	printf("Task %s created\r\n", pcTaskGetName(xTaskGetCurrentTaskHandle()));
#endif
	for (;;)
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80008d0:	2120      	movs	r1, #32
 80008d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008d6:	f001 fab5 	bl	8001e44 <HAL_GPIO_TogglePin>
		vTaskDelay( duree / portTICK_PERIOD_MS );  // Délai de duree en ms
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	4618      	mov	r0, r3
 80008de:	f005 fd49 	bl	8006374 <vTaskDelay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80008e2:	bf00      	nop
 80008e4:	e7f4      	b.n	80008d0 <task_LED+0xc>
	...

080008e8 <task_shell>:
	}
}

void task_shell(void * unused)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
#if (LOGS)
	printf("Task %s created\r\n", pcTaskGetName(xTaskGetCurrentTaskHandle()));
#endif

	shell_init();	// Shell initialization
 80008f0:	f000 fd8c 	bl	800140c <shell_init>

	// Creation of all commands
	shell_add('f', fonction, "Une fonction inutile");
 80008f4:	4a0a      	ldr	r2, [pc, #40]	@ (8000920 <task_shell+0x38>)
 80008f6:	490b      	ldr	r1, [pc, #44]	@ (8000924 <task_shell+0x3c>)
 80008f8:	2066      	movs	r0, #102	@ 0x66
 80008fa:	f000 fdbf 	bl	800147c <shell_add>
	shell_add('a', addition, "Effectue une somme");
 80008fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000928 <task_shell+0x40>)
 8000900:	490a      	ldr	r1, [pc, #40]	@ (800092c <task_shell+0x44>)
 8000902:	2061      	movs	r0, #97	@ 0x61
 8000904:	f000 fdba 	bl	800147c <shell_add>
	shell_add('c', calcul, "Opération entre 2 nombres");
 8000908:	4a09      	ldr	r2, [pc, #36]	@ (8000930 <task_shell+0x48>)
 800090a:	490a      	ldr	r1, [pc, #40]	@ (8000934 <task_shell+0x4c>)
 800090c:	2063      	movs	r0, #99	@ 0x63
 800090e:	f000 fdb5 	bl	800147c <shell_add>

	shell_run();	// boucle infinie
 8000912:	f000 fe5f 	bl	80015d4 <shell_run>
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	08008c4c 	.word	0x08008c4c
 8000924:	08001145 	.word	0x08001145
 8000928:	08008c64 	.word	0x08008c64
 800092c:	08001289 	.word	0x08001289
 8000930:	08008c78 	.word	0x08008c78
 8000934:	0800118d 	.word	0x0800118d

08000938 <MCP23S17_WriteRegister>:

// Function to write to a register of MCP23S17 with error handling
void MCP23S17_WriteRegister(uint8_t reg, uint8_t data) {
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	460a      	mov	r2, r1
 8000942:	71fb      	strb	r3, [r7, #7]
 8000944:	4613      	mov	r3, r2
 8000946:	71bb      	strb	r3, [r7, #6]
	uint8_t control_byte = MCP23S17_CONTROL_BYTE(0b000, VU_WRITE); // Address = 0b000
 8000948:	2340      	movs	r3, #64	@ 0x40
 800094a:	73bb      	strb	r3, [r7, #14]

	uint8_t buffer[2] = {reg, data};
 800094c:	79fb      	ldrb	r3, [r7, #7]
 800094e:	733b      	strb	r3, [r7, #12]
 8000950:	79bb      	ldrb	r3, [r7, #6]
 8000952:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef status;

	// Assert chip select
	HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_RESET);
 8000954:	2200      	movs	r2, #0
 8000956:	2180      	movs	r1, #128	@ 0x80
 8000958:	481f      	ldr	r0, [pc, #124]	@ (80009d8 <MCP23S17_WriteRegister+0xa0>)
 800095a:	f001 fa5b 	bl	8001e14 <HAL_GPIO_WritePin>

	// Transmit control byte
	status = HAL_SPI_Transmit(&hspi3, &control_byte, 1, HAL_MAX_DELAY);
 800095e:	f107 010e 	add.w	r1, r7, #14
 8000962:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000966:	2201      	movs	r2, #1
 8000968:	481c      	ldr	r0, [pc, #112]	@ (80009dc <MCP23S17_WriteRegister+0xa4>)
 800096a:	f002 ff7a 	bl	8003862 <HAL_SPI_Transmit>
 800096e:	4603      	mov	r3, r0
 8000970:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 8000972:	7bfb      	ldrb	r3, [r7, #15]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d00c      	beq.n	8000992 <MCP23S17_WriteRegister+0x5a>
		HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_SET); // Deassert chip select
 8000978:	2201      	movs	r2, #1
 800097a:	2180      	movs	r1, #128	@ 0x80
 800097c:	4816      	ldr	r0, [pc, #88]	@ (80009d8 <MCP23S17_WriteRegister+0xa0>)
 800097e:	f001 fa49 	bl	8001e14 <HAL_GPIO_WritePin>
		printf("Error: Failed to transmit control byte (HAL_SPI_Transmit returned %d)\r\n", status);
 8000982:	7bfb      	ldrb	r3, [r7, #15]
 8000984:	4619      	mov	r1, r3
 8000986:	4816      	ldr	r0, [pc, #88]	@ (80009e0 <MCP23S17_WriteRegister+0xa8>)
 8000988:	f007 f860 	bl	8007a4c <iprintf>
		Error_Handler(); // Handle the error
 800098c:	f000 f953 	bl	8000c36 <Error_Handler>
		return; // Prevent further execution
 8000990:	e01e      	b.n	80009d0 <MCP23S17_WriteRegister+0x98>
#if (LOGS)
	printf("SPI3 control transmission status: %d\r\n", status);
#endif

	// Transmit register address and data
	status = HAL_SPI_Transmit(&hspi3, buffer, 2, HAL_MAX_DELAY);
 8000992:	f107 010c 	add.w	r1, r7, #12
 8000996:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800099a:	2202      	movs	r2, #2
 800099c:	480f      	ldr	r0, [pc, #60]	@ (80009dc <MCP23S17_WriteRegister+0xa4>)
 800099e:	f002 ff60 	bl	8003862 <HAL_SPI_Transmit>
 80009a2:	4603      	mov	r3, r0
 80009a4:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 80009a6:	7bfb      	ldrb	r3, [r7, #15]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d00c      	beq.n	80009c6 <MCP23S17_WriteRegister+0x8e>
		HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_SET); // Deassert chip select
 80009ac:	2201      	movs	r2, #1
 80009ae:	2180      	movs	r1, #128	@ 0x80
 80009b0:	4809      	ldr	r0, [pc, #36]	@ (80009d8 <MCP23S17_WriteRegister+0xa0>)
 80009b2:	f001 fa2f 	bl	8001e14 <HAL_GPIO_WritePin>
		printf("Error: Failed to transmit register data (HAL_SPI_Transmit returned %d)\r\n", status);
 80009b6:	7bfb      	ldrb	r3, [r7, #15]
 80009b8:	4619      	mov	r1, r3
 80009ba:	480a      	ldr	r0, [pc, #40]	@ (80009e4 <MCP23S17_WriteRegister+0xac>)
 80009bc:	f007 f846 	bl	8007a4c <iprintf>
		Error_Handler(); // Handle the error
 80009c0:	f000 f939 	bl	8000c36 <Error_Handler>
		return; // Prevent further execution
 80009c4:	e004      	b.n	80009d0 <MCP23S17_WriteRegister+0x98>
#if (LOGS)
	printf("SPI3 data Ox%X transmission to register 0x%X status: %d\r\n", data, reg, status);
#endif

	// Deassert chip select
	HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_SET);
 80009c6:	2201      	movs	r2, #1
 80009c8:	2180      	movs	r1, #128	@ 0x80
 80009ca:	4803      	ldr	r0, [pc, #12]	@ (80009d8 <MCP23S17_WriteRegister+0xa0>)
 80009cc:	f001 fa22 	bl	8001e14 <HAL_GPIO_WritePin>
}
 80009d0:	3710      	adds	r7, #16
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	48000400 	.word	0x48000400
 80009dc:	20000348 	.word	0x20000348
 80009e0:	08008c94 	.word	0x08008c94
 80009e4:	08008cdc 	.word	0x08008cdc

080009e8 <MCP23S17_Init>:

void MCP23S17_Init(void) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
	// nRESET to base state
	HAL_GPIO_WritePin(VU_nRESET_GPIO_Port, VU_nRESET_Pin, GPIO_PIN_SET);
 80009ec:	2201      	movs	r2, #1
 80009ee:	2101      	movs	r1, #1
 80009f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009f4:	f001 fa0e 	bl	8001e14 <HAL_GPIO_WritePin>

	// nCS to reset state
	HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_SET);
 80009f8:	2201      	movs	r2, #1
 80009fa:	2180      	movs	r1, #128	@ 0x80
 80009fc:	4806      	ldr	r0, [pc, #24]	@ (8000a18 <MCP23S17_Init+0x30>)
 80009fe:	f001 fa09 	bl	8001e14 <HAL_GPIO_WritePin>

	// Set all GPIOA and GPIOB pins as outputs
	MCP23S17_WriteRegister(MCP23S17_IODIRA, 0x00); // GPA as output
 8000a02:	2100      	movs	r1, #0
 8000a04:	2000      	movs	r0, #0
 8000a06:	f7ff ff97 	bl	8000938 <MCP23S17_WriteRegister>
	MCP23S17_WriteRegister(MCP23S17_IODIRB, 0x00); // GPB as output
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	2001      	movs	r0, #1
 8000a0e:	f7ff ff93 	bl	8000938 <MCP23S17_WriteRegister>
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	48000400 	.word	0x48000400

08000a1c <MCP23S17_Set_LED>:

void MCP23S17_Set_LED(uint8_t led)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	71fb      	strb	r3, [r7, #7]
	if (led > 7)
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	2b07      	cmp	r3, #7
 8000a2a:	d911      	bls.n	8000a50 <MCP23S17_Set_LED+0x34>
	{
		MCP23S17_WriteRegister(MCP23S17_OLATB, ~(1 << led%8));
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	f003 0307 	and.w	r3, r3, #7
 8000a32:	2201      	movs	r2, #1
 8000a34:	fa02 f303 	lsl.w	r3, r2, r3
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	43db      	mvns	r3, r3
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	4619      	mov	r1, r3
 8000a40:	2015      	movs	r0, #21
 8000a42:	f7ff ff79 	bl	8000938 <MCP23S17_WriteRegister>
		MCP23S17_WriteRegister(MCP23S17_OLATA, 0xFF); // All LEDs on GPIOA OFF
 8000a46:	21ff      	movs	r1, #255	@ 0xff
 8000a48:	2014      	movs	r0, #20
 8000a4a:	f7ff ff75 	bl	8000938 <MCP23S17_WriteRegister>
	else
	{
		MCP23S17_WriteRegister(MCP23S17_OLATA, ~(1 << led));
		MCP23S17_WriteRegister(MCP23S17_OLATB, 0xFF); // All LEDs on GPIOB OFF
	}
}
 8000a4e:	e00e      	b.n	8000a6e <MCP23S17_Set_LED+0x52>
		MCP23S17_WriteRegister(MCP23S17_OLATA, ~(1 << led));
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	2201      	movs	r2, #1
 8000a54:	fa02 f303 	lsl.w	r3, r2, r3
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	43db      	mvns	r3, r3
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	4619      	mov	r1, r3
 8000a60:	2014      	movs	r0, #20
 8000a62:	f7ff ff69 	bl	8000938 <MCP23S17_WriteRegister>
		MCP23S17_WriteRegister(MCP23S17_OLATB, 0xFF); // All LEDs on GPIOB OFF
 8000a66:	21ff      	movs	r1, #255	@ 0xff
 8000a68:	2015      	movs	r0, #21
 8000a6a:	f7ff ff65 	bl	8000938 <MCP23S17_WriteRegister>
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <task_GPIO_expander>:

void task_GPIO_expander (void * pvParameters) {
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b086      	sub	sp, #24
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
	int delay = (int) pvParameters;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	613b      	str	r3, [r7, #16]
	int toggle = 1;
 8000a82:	2301      	movs	r3, #1
 8000a84:	60fb      	str	r3, [r7, #12]
	int i = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	617b      	str	r3, [r7, #20]
#if (LOGS)
	printf("Task %s created\r\n", pcTaskGetName(xTaskGetCurrentTaskHandle()));
#endif

	// Initialize MCP23S17 GPIO expander
	MCP23S17_Init();
 8000a8a:	f7ff ffad 	bl	80009e8 <MCP23S17_Init>
	MCP23S17_WriteRegister(MCP23S17_OLATB, 0x00); // All LEDs on GPIOB OFF
 8000a8e:	2100      	movs	r1, #0
 8000a90:	2015      	movs	r0, #21
 8000a92:	f7ff ff51 	bl	8000938 <MCP23S17_WriteRegister>
	MCP23S17_WriteRegister(MCP23S17_OLATA, 0x00); // All LEDs on GPIOA OFF
 8000a96:	2100      	movs	r1, #0
 8000a98:	2014      	movs	r0, #20
 8000a9a:	f7ff ff4d 	bl	8000938 <MCP23S17_WriteRegister>
		}

		toggle = -toggle;
		*/

		MCP23S17_Set_LED(i%16);
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	425a      	negs	r2, r3
 8000aa2:	f003 030f 	and.w	r3, r3, #15
 8000aa6:	f002 020f 	and.w	r2, r2, #15
 8000aaa:	bf58      	it	pl
 8000aac:	4253      	negpl	r3, r2
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff ffb3 	bl	8000a1c <MCP23S17_Set_LED>
		i++;
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	617b      	str	r3, [r7, #20]

		vTaskDelay( delay / portTICK_PERIOD_MS );  // Délai de duree en ms
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f005 fc58 	bl	8006374 <vTaskDelay>
		MCP23S17_Set_LED(i%16);
 8000ac4:	bf00      	nop
 8000ac6:	e7ea      	b.n	8000a9e <task_GPIO_expander+0x28>

08000ac8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ace:	f000 fdeb 	bl	80016a8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ad2:	f000 f85f 	bl	8000b94 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ad6:	f7ff fd81 	bl	80005dc <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000ada:	f000 fa75 	bl	8000fc8 <MX_USART2_UART_Init>
	MX_I2C2_Init();
 8000ade:	f7ff fdf9 	bl	80006d4 <MX_I2C2_Init>
	MX_SPI3_Init();
 8000ae2:	f000 f8af 	bl	8000c44 <MX_SPI3_Init>
	/* USER CODE BEGIN 2 */
	HAL_SPI_Init(&hspi3);
 8000ae6:	4820      	ldr	r0, [pc, #128]	@ (8000b68 <main+0xa0>)
 8000ae8:	f002 fe18 	bl	800371c <HAL_SPI_Init>

	// Test printf
	printf("******* TP Autoradio *******\r\n");
 8000aec:	481f      	ldr	r0, [pc, #124]	@ (8000b6c <main+0xa4>)
 8000aee:	f007 f815 	bl	8007b1c <puts>

	// Create the task, storing the handle.
	Error_Handler_xTaskCreate(
 8000af2:	4b1f      	ldr	r3, [pc, #124]	@ (8000b70 <main+0xa8>)
 8000af4:	9301      	str	r3, [sp, #4]
 8000af6:	2302      	movs	r3, #2
 8000af8:	9300      	str	r3, [sp, #0]
 8000afa:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000afe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b02:	491c      	ldr	r1, [pc, #112]	@ (8000b74 <main+0xac>)
 8000b04:	481c      	ldr	r0, [pc, #112]	@ (8000b78 <main+0xb0>)
 8000b06:	f005 fafd 	bl	8006104 <xTaskCreate>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff fea7 	bl	8000860 <Error_Handler_xTaskCreate>
					(void *) 500, // 1 ms
					TASK_MCP23S17_PRIORITY, // Priority at which the task is created.
					&h_task_GPIOExpander)); // Used to pass out the created task's handle.

	// Turn on LED2 (Green)
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000b12:	2120      	movs	r1, #32
 8000b14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b18:	f001 f994 	bl	8001e44 <HAL_GPIO_TogglePin>

	// Create the task, storing the handle.
	Error_Handler_xTaskCreate(
 8000b1c:	4b17      	ldr	r3, [pc, #92]	@ (8000b7c <main+0xb4>)
 8000b1e:	9301      	str	r3, [sp, #4]
 8000b20:	2301      	movs	r3, #1
 8000b22:	9300      	str	r3, [sp, #0]
 8000b24:	23c8      	movs	r3, #200	@ 0xc8
 8000b26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b2a:	4915      	ldr	r1, [pc, #84]	@ (8000b80 <main+0xb8>)
 8000b2c:	4815      	ldr	r0, [pc, #84]	@ (8000b84 <main+0xbc>)
 8000b2e:	f005 fae9 	bl	8006104 <xTaskCreate>
 8000b32:	4603      	mov	r3, r0
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff fe93 	bl	8000860 <Error_Handler_xTaskCreate>
					STACK_DEPTH, // Stack size in words, not bytes.
					(void *) DELAY_LED_TOGGLE, // Parameter passed into the task.
					1,// Priority at which the task is created.
					&h_task_LED)); // Used to pass out the created task's handle.
	// Shell task
	Error_Handler_xTaskCreate(
 8000b3a:	4b13      	ldr	r3, [pc, #76]	@ (8000b88 <main+0xc0>)
 8000b3c:	9301      	str	r3, [sp, #4]
 8000b3e:	2303      	movs	r3, #3
 8000b40:	9300      	str	r3, [sp, #0]
 8000b42:	2300      	movs	r3, #0
 8000b44:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b48:	4910      	ldr	r1, [pc, #64]	@ (8000b8c <main+0xc4>)
 8000b4a:	4811      	ldr	r0, [pc, #68]	@ (8000b90 <main+0xc8>)
 8000b4c:	f005 fada 	bl	8006104 <xTaskCreate>
 8000b50:	4603      	mov	r3, r0
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff fe84 	bl	8000860 <Error_Handler_xTaskCreate>
					NULL,
					TASK_SHELL_PRIORITY,
					&h_task_shell));

	// OS Start
	vTaskStartScheduler();
 8000b58:	f005 fc42 	bl	80063e0 <vTaskStartScheduler>

	/* USER CODE END 2 */

	/* Call init function for freertos objects (in cmsis_os2.c) */
	MX_FREERTOS_Init();
 8000b5c:	f7ff fd1a 	bl	8000594 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8000b60:	f004 fe70 	bl	8005844 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <main+0x9c>
 8000b68:	20000348 	.word	0x20000348
 8000b6c:	08008d28 	.word	0x08008d28
 8000b70:	20000344 	.word	0x20000344
 8000b74:	08008d48 	.word	0x08008d48
 8000b78:	08000a77 	.word	0x08000a77
 8000b7c:	2000033c 	.word	0x2000033c
 8000b80:	08008d58 	.word	0x08008d58
 8000b84:	080008c5 	.word	0x080008c5
 8000b88:	20000340 	.word	0x20000340
 8000b8c:	08008d60 	.word	0x08008d60
 8000b90:	080008e9 	.word	0x080008e9

08000b94 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b096      	sub	sp, #88	@ 0x58
 8000b98:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	2244      	movs	r2, #68	@ 0x44
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f007 f8ce 	bl	8007d44 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba8:	463b      	mov	r3, r7
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
 8000bb4:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000bb6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000bba:	f001 fa9d 	bl	80020f8 <HAL_PWREx_ControlVoltageScaling>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <SystemClock_Config+0x34>
	{
		Error_Handler();
 8000bc4:	f000 f837 	bl	8000c36 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bcc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bd0:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bd2:	2310      	movs	r3, #16
 8000bd4:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000bde:	2301      	movs	r3, #1
 8000be0:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8000be2:	230a      	movs	r3, #10
 8000be4:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000be6:	2307      	movs	r3, #7
 8000be8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000bea:	2302      	movs	r3, #2
 8000bec:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f001 fad4 	bl	80021a4 <HAL_RCC_OscConfig>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <SystemClock_Config+0x72>
	{
		Error_Handler();
 8000c02:	f000 f818 	bl	8000c36 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c06:	230f      	movs	r3, #15
 8000c08:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c12:	2300      	movs	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c1a:	463b      	mov	r3, r7
 8000c1c:	2104      	movs	r1, #4
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f001 fe9c 	bl	800295c <HAL_RCC_ClockConfig>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8000c2a:	f000 f804 	bl	8000c36 <Error_Handler>
	}
}
 8000c2e:	bf00      	nop
 8000c30:	3758      	adds	r7, #88	@ 0x58
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c3a:	b672      	cpsid	i
}
 8000c3c:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000c3e:	bf00      	nop
 8000c40:	e7fd      	b.n	8000c3e <Error_Handler+0x8>
	...

08000c44 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000c48:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb8 <MX_SPI3_Init+0x74>)
 8000c4a:	4a1c      	ldr	r2, [pc, #112]	@ (8000cbc <MX_SPI3_Init+0x78>)
 8000c4c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb8 <MX_SPI3_Init+0x74>)
 8000c50:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c54:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000c56:	4b18      	ldr	r3, [pc, #96]	@ (8000cb8 <MX_SPI3_Init+0x74>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c5c:	4b16      	ldr	r3, [pc, #88]	@ (8000cb8 <MX_SPI3_Init+0x74>)
 8000c5e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000c62:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c64:	4b14      	ldr	r3, [pc, #80]	@ (8000cb8 <MX_SPI3_Init+0x74>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c6a:	4b13      	ldr	r3, [pc, #76]	@ (8000cb8 <MX_SPI3_Init+0x74>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000c70:	4b11      	ldr	r3, [pc, #68]	@ (8000cb8 <MX_SPI3_Init+0x74>)
 8000c72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c76:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c78:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb8 <MX_SPI3_Init+0x74>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb8 <MX_SPI3_Init+0x74>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c84:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb8 <MX_SPI3_Init+0x74>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb8 <MX_SPI3_Init+0x74>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000c90:	4b09      	ldr	r3, [pc, #36]	@ (8000cb8 <MX_SPI3_Init+0x74>)
 8000c92:	2207      	movs	r2, #7
 8000c94:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c96:	4b08      	ldr	r3, [pc, #32]	@ (8000cb8 <MX_SPI3_Init+0x74>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <MX_SPI3_Init+0x74>)
 8000c9e:	2208      	movs	r2, #8
 8000ca0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000ca2:	4805      	ldr	r0, [pc, #20]	@ (8000cb8 <MX_SPI3_Init+0x74>)
 8000ca4:	f002 fd3a 	bl	800371c <HAL_SPI_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000cae:	f7ff ffc2 	bl	8000c36 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000348 	.word	0x20000348
 8000cbc:	40003c00 	.word	0x40003c00

08000cc0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	@ 0x28
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a29      	ldr	r2, [pc, #164]	@ (8000d84 <HAL_SPI_MspInit+0xc4>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d14c      	bne.n	8000d7c <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ce2:	4b29      	ldr	r3, [pc, #164]	@ (8000d88 <HAL_SPI_MspInit+0xc8>)
 8000ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ce6:	4a28      	ldr	r2, [pc, #160]	@ (8000d88 <HAL_SPI_MspInit+0xc8>)
 8000ce8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000cec:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cee:	4b26      	ldr	r3, [pc, #152]	@ (8000d88 <HAL_SPI_MspInit+0xc8>)
 8000cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cf2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000cf6:	613b      	str	r3, [r7, #16]
 8000cf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfa:	4b23      	ldr	r3, [pc, #140]	@ (8000d88 <HAL_SPI_MspInit+0xc8>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cfe:	4a22      	ldr	r2, [pc, #136]	@ (8000d88 <HAL_SPI_MspInit+0xc8>)
 8000d00:	f043 0304 	orr.w	r3, r3, #4
 8000d04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d06:	4b20      	ldr	r3, [pc, #128]	@ (8000d88 <HAL_SPI_MspInit+0xc8>)
 8000d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d0a:	f003 0304 	and.w	r3, r3, #4
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d12:	4b1d      	ldr	r3, [pc, #116]	@ (8000d88 <HAL_SPI_MspInit+0xc8>)
 8000d14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d16:	4a1c      	ldr	r2, [pc, #112]	@ (8000d88 <HAL_SPI_MspInit+0xc8>)
 8000d18:	f043 0302 	orr.w	r3, r3, #2
 8000d1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000d88 <HAL_SPI_MspInit+0xc8>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = VU_SCK_Pin|VU_MISO_Pin;
 8000d2a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000d2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	2302      	movs	r3, #2
 8000d32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d3c:	2306      	movs	r3, #6
 8000d3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	4619      	mov	r1, r3
 8000d46:	4811      	ldr	r0, [pc, #68]	@ (8000d8c <HAL_SPI_MspInit+0xcc>)
 8000d48:	f000 feba 	bl	8001ac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VU_MOSI_Pin;
 8000d4c:	2320      	movs	r3, #32
 8000d4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d50:	2302      	movs	r3, #2
 8000d52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d5c:	2306      	movs	r3, #6
 8000d5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(VU_MOSI_GPIO_Port, &GPIO_InitStruct);
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	4619      	mov	r1, r3
 8000d66:	480a      	ldr	r0, [pc, #40]	@ (8000d90 <HAL_SPI_MspInit+0xd0>)
 8000d68:	f000 feaa 	bl	8001ac0 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2105      	movs	r1, #5
 8000d70:	2033      	movs	r0, #51	@ 0x33
 8000d72:	f000 fdf0 	bl	8001956 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000d76:	2033      	movs	r0, #51	@ 0x33
 8000d78:	f000 fe09 	bl	800198e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000d7c:	bf00      	nop
 8000d7e:	3728      	adds	r7, #40	@ 0x28
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40003c00 	.word	0x40003c00
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	48000800 	.word	0x48000800
 8000d90:	48000400 	.word	0x48000400

08000d94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9a:	4b11      	ldr	r3, [pc, #68]	@ (8000de0 <HAL_MspInit+0x4c>)
 8000d9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d9e:	4a10      	ldr	r2, [pc, #64]	@ (8000de0 <HAL_MspInit+0x4c>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000da6:	4b0e      	ldr	r3, [pc, #56]	@ (8000de0 <HAL_MspInit+0x4c>)
 8000da8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db2:	4b0b      	ldr	r3, [pc, #44]	@ (8000de0 <HAL_MspInit+0x4c>)
 8000db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000db6:	4a0a      	ldr	r2, [pc, #40]	@ (8000de0 <HAL_MspInit+0x4c>)
 8000db8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dbe:	4b08      	ldr	r3, [pc, #32]	@ (8000de0 <HAL_MspInit+0x4c>)
 8000dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dc6:	603b      	str	r3, [r7, #0]
 8000dc8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	210f      	movs	r1, #15
 8000dce:	f06f 0001 	mvn.w	r0, #1
 8000dd2:	f000 fdc0 	bl	8001956 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40021000 	.word	0x40021000

08000de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000de8:	bf00      	nop
 8000dea:	e7fd      	b.n	8000de8 <NMI_Handler+0x4>

08000dec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df0:	bf00      	nop
 8000df2:	e7fd      	b.n	8000df0 <HardFault_Handler+0x4>

08000df4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df8:	bf00      	nop
 8000dfa:	e7fd      	b.n	8000df8 <MemManage_Handler+0x4>

08000dfc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <BusFault_Handler+0x4>

08000e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e08:	bf00      	nop
 8000e0a:	e7fd      	b.n	8000e08 <UsageFault_Handler+0x4>

08000e0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr

08000e1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e1e:	f000 fc9f 	bl	8001760 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000e22:	f005 fee7 	bl	8006bf4 <xTaskGetSchedulerState>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d001      	beq.n	8000e30 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000e2c:	f006 fa44 	bl	80072b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e38:	4802      	ldr	r0, [pc, #8]	@ (8000e44 <USART2_IRQHandler+0x10>)
 8000e3a:	f003 fa25 	bl	8004288 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	200003b0 	.word	0x200003b0

08000e48 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000e4c:	4802      	ldr	r0, [pc, #8]	@ (8000e58 <SPI3_IRQHandler+0x10>)
 8000e4e:	f002 fe7f 	bl	8003b50 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000348 	.word	0x20000348

08000e5c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]
 8000e6c:	e00a      	b.n	8000e84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e6e:	f3af 8000 	nop.w
 8000e72:	4601      	mov	r1, r0
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	1c5a      	adds	r2, r3, #1
 8000e78:	60ba      	str	r2, [r7, #8]
 8000e7a:	b2ca      	uxtb	r2, r1
 8000e7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	3301      	adds	r3, #1
 8000e82:	617b      	str	r3, [r7, #20]
 8000e84:	697a      	ldr	r2, [r7, #20]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	dbf0      	blt.n	8000e6e <_read+0x12>
  }

  return len;
 8000e8c:	687b      	ldr	r3, [r7, #4]
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3718      	adds	r7, #24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b086      	sub	sp, #24
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	60f8      	str	r0, [r7, #12]
 8000e9e:	60b9      	str	r1, [r7, #8]
 8000ea0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]
 8000ea6:	e009      	b.n	8000ebc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	1c5a      	adds	r2, r3, #1
 8000eac:	60ba      	str	r2, [r7, #8]
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff fcc3 	bl	800083c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	617b      	str	r3, [r7, #20]
 8000ebc:	697a      	ldr	r2, [r7, #20]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	dbf1      	blt.n	8000ea8 <_write+0x12>
  }
  return len;
 8000ec4:	687b      	ldr	r3, [r7, #4]
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3718      	adds	r7, #24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <_close>:

int _close(int file)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	b083      	sub	sp, #12
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ed6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	b083      	sub	sp, #12
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
 8000eee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ef6:	605a      	str	r2, [r3, #4]
  return 0;
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <_isatty>:

int _isatty(int file)
{
 8000f06:	b480      	push	{r7}
 8000f08:	b083      	sub	sp, #12
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f0e:	2301      	movs	r3, #1
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3714      	adds	r7, #20
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
	...

08000f38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f40:	4a14      	ldr	r2, [pc, #80]	@ (8000f94 <_sbrk+0x5c>)
 8000f42:	4b15      	ldr	r3, [pc, #84]	@ (8000f98 <_sbrk+0x60>)
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f4c:	4b13      	ldr	r3, [pc, #76]	@ (8000f9c <_sbrk+0x64>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d102      	bne.n	8000f5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f54:	4b11      	ldr	r3, [pc, #68]	@ (8000f9c <_sbrk+0x64>)
 8000f56:	4a12      	ldr	r2, [pc, #72]	@ (8000fa0 <_sbrk+0x68>)
 8000f58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f5a:	4b10      	ldr	r3, [pc, #64]	@ (8000f9c <_sbrk+0x64>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4413      	add	r3, r2
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d207      	bcs.n	8000f78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f68:	f006 ff3a 	bl	8007de0 <__errno>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	220c      	movs	r2, #12
 8000f70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f76:	e009      	b.n	8000f8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f78:	4b08      	ldr	r3, [pc, #32]	@ (8000f9c <_sbrk+0x64>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f7e:	4b07      	ldr	r3, [pc, #28]	@ (8000f9c <_sbrk+0x64>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4413      	add	r3, r2
 8000f86:	4a05      	ldr	r2, [pc, #20]	@ (8000f9c <_sbrk+0x64>)
 8000f88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3718      	adds	r7, #24
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20018000 	.word	0x20018000
 8000f98:	00000400 	.word	0x00000400
 8000f9c:	200003ac 	.word	0x200003ac
 8000fa0:	20005858 	.word	0x20005858

08000fa4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fa8:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <SystemInit+0x20>)
 8000faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fae:	4a05      	ldr	r2, [pc, #20]	@ (8000fc4 <SystemInit+0x20>)
 8000fb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fcc:	4b14      	ldr	r3, [pc, #80]	@ (8001020 <MX_USART2_UART_Init+0x58>)
 8000fce:	4a15      	ldr	r2, [pc, #84]	@ (8001024 <MX_USART2_UART_Init+0x5c>)
 8000fd0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fd2:	4b13      	ldr	r3, [pc, #76]	@ (8001020 <MX_USART2_UART_Init+0x58>)
 8000fd4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fd8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fda:	4b11      	ldr	r3, [pc, #68]	@ (8001020 <MX_USART2_UART_Init+0x58>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fe0:	4b0f      	ldr	r3, [pc, #60]	@ (8001020 <MX_USART2_UART_Init+0x58>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	@ (8001020 <MX_USART2_UART_Init+0x58>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fec:	4b0c      	ldr	r3, [pc, #48]	@ (8001020 <MX_USART2_UART_Init+0x58>)
 8000fee:	220c      	movs	r2, #12
 8000ff0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8001020 <MX_USART2_UART_Init+0x58>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff8:	4b09      	ldr	r3, [pc, #36]	@ (8001020 <MX_USART2_UART_Init+0x58>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ffe:	4b08      	ldr	r3, [pc, #32]	@ (8001020 <MX_USART2_UART_Init+0x58>)
 8001000:	2200      	movs	r2, #0
 8001002:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001004:	4b06      	ldr	r3, [pc, #24]	@ (8001020 <MX_USART2_UART_Init+0x58>)
 8001006:	2200      	movs	r2, #0
 8001008:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800100a:	4805      	ldr	r0, [pc, #20]	@ (8001020 <MX_USART2_UART_Init+0x58>)
 800100c:	f003 f818 	bl	8004040 <HAL_UART_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001016:	f7ff fe0e 	bl	8000c36 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	200003b0 	.word	0x200003b0
 8001024:	40004400 	.word	0x40004400

08001028 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b0ac      	sub	sp, #176	@ 0xb0
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	2288      	movs	r2, #136	@ 0x88
 8001046:	2100      	movs	r1, #0
 8001048:	4618      	mov	r0, r3
 800104a:	f006 fe7b 	bl	8007d44 <memset>
  if(uartHandle->Instance==USART2)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a25      	ldr	r2, [pc, #148]	@ (80010e8 <HAL_UART_MspInit+0xc0>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d143      	bne.n	80010e0 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001058:	2302      	movs	r3, #2
 800105a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800105c:	2300      	movs	r3, #0
 800105e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	4618      	mov	r0, r3
 8001066:	f001 fe9d 	bl	8002da4 <HAL_RCCEx_PeriphCLKConfig>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001070:	f7ff fde1 	bl	8000c36 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001074:	4b1d      	ldr	r3, [pc, #116]	@ (80010ec <HAL_UART_MspInit+0xc4>)
 8001076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001078:	4a1c      	ldr	r2, [pc, #112]	@ (80010ec <HAL_UART_MspInit+0xc4>)
 800107a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800107e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001080:	4b1a      	ldr	r3, [pc, #104]	@ (80010ec <HAL_UART_MspInit+0xc4>)
 8001082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001084:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108c:	4b17      	ldr	r3, [pc, #92]	@ (80010ec <HAL_UART_MspInit+0xc4>)
 800108e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001090:	4a16      	ldr	r2, [pc, #88]	@ (80010ec <HAL_UART_MspInit+0xc4>)
 8001092:	f043 0301 	orr.w	r3, r3, #1
 8001096:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001098:	4b14      	ldr	r3, [pc, #80]	@ (80010ec <HAL_UART_MspInit+0xc4>)
 800109a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010a4:	230c      	movs	r3, #12
 80010a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010aa:	2302      	movs	r3, #2
 80010ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b6:	2303      	movs	r3, #3
 80010b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010bc:	2307      	movs	r3, #7
 80010be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010c6:	4619      	mov	r1, r3
 80010c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010cc:	f000 fcf8 	bl	8001ac0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80010d0:	2200      	movs	r2, #0
 80010d2:	2105      	movs	r1, #5
 80010d4:	2026      	movs	r0, #38	@ 0x26
 80010d6:	f000 fc3e 	bl	8001956 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010da:	2026      	movs	r0, #38	@ 0x26
 80010dc:	f000 fc57 	bl	800198e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80010e0:	bf00      	nop
 80010e2:	37b0      	adds	r7, #176	@ 0xb0
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40004400 	.word	0x40004400
 80010ec:	40021000 	.word	0x40021000

080010f0 <Reset_Handler>:
 80010f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001128 <LoopForever+0x2>
 80010f4:	f7ff ff56 	bl	8000fa4 <SystemInit>
 80010f8:	480c      	ldr	r0, [pc, #48]	@ (800112c <LoopForever+0x6>)
 80010fa:	490d      	ldr	r1, [pc, #52]	@ (8001130 <LoopForever+0xa>)
 80010fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001134 <LoopForever+0xe>)
 80010fe:	2300      	movs	r3, #0
 8001100:	e002      	b.n	8001108 <LoopCopyDataInit>

08001102 <CopyDataInit>:
 8001102:	58d4      	ldr	r4, [r2, r3]
 8001104:	50c4      	str	r4, [r0, r3]
 8001106:	3304      	adds	r3, #4

08001108 <LoopCopyDataInit>:
 8001108:	18c4      	adds	r4, r0, r3
 800110a:	428c      	cmp	r4, r1
 800110c:	d3f9      	bcc.n	8001102 <CopyDataInit>
 800110e:	4a0a      	ldr	r2, [pc, #40]	@ (8001138 <LoopForever+0x12>)
 8001110:	4c0a      	ldr	r4, [pc, #40]	@ (800113c <LoopForever+0x16>)
 8001112:	2300      	movs	r3, #0
 8001114:	e001      	b.n	800111a <LoopFillZerobss>

08001116 <FillZerobss>:
 8001116:	6013      	str	r3, [r2, #0]
 8001118:	3204      	adds	r2, #4

0800111a <LoopFillZerobss>:
 800111a:	42a2      	cmp	r2, r4
 800111c:	d3fb      	bcc.n	8001116 <FillZerobss>
 800111e:	f006 fe65 	bl	8007dec <__libc_init_array>
 8001122:	f7ff fcd1 	bl	8000ac8 <main>

08001126 <LoopForever>:
 8001126:	e7fe      	b.n	8001126 <LoopForever>
 8001128:	20018000 	.word	0x20018000
 800112c:	20000000 	.word	0x20000000
 8001130:	20000074 	.word	0x20000074
 8001134:	08008ff0 	.word	0x08008ff0
 8001138:	20000074 	.word	0x20000074
 800113c:	20005854 	.word	0x20005854

08001140 <ADC1_2_IRQHandler>:
 8001140:	e7fe      	b.n	8001140 <ADC1_2_IRQHandler>
	...

08001144 <fonction>:

#include "functions.h"


int fonction(int argc, char ** argv)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
	if (argc > 1)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b01      	cmp	r3, #1
 8001152:	dd14      	ble.n	800117e <fonction+0x3a>
	{
		for (int i = 0; i < argc; i++)
 8001154:	2300      	movs	r3, #0
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	e00d      	b.n	8001176 <fonction+0x32>
		{
			printf("Paramètre [%d] = %s\r\n", i+1, argv[i]);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	1c59      	adds	r1, r3, #1
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	683a      	ldr	r2, [r7, #0]
 8001164:	4413      	add	r3, r2
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	461a      	mov	r2, r3
 800116a:	4807      	ldr	r0, [pc, #28]	@ (8001188 <fonction+0x44>)
 800116c:	f006 fc6e 	bl	8007a4c <iprintf>
		for (int i = 0; i < argc; i++)
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	3301      	adds	r3, #1
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	68fa      	ldr	r2, [r7, #12]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	429a      	cmp	r2, r3
 800117c:	dbed      	blt.n	800115a <fonction+0x16>
		}
	}

	return 0;
 800117e:	2300      	movs	r3, #0
}
 8001180:	4618      	mov	r0, r3
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	08008d68 	.word	0x08008d68

0800118c <calcul>:

int calcul(int argc, char ** argv)
{
 800118c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
	if (argc >= 4)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2b03      	cmp	r3, #3
 800119a:	dd68      	ble.n	800126e <calcul+0xe2>
	{
		switch(argv[2][0])
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	3308      	adds	r3, #8
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b78      	cmp	r3, #120	@ 0x78
 80011a6:	d03f      	beq.n	8001228 <calcul+0x9c>
 80011a8:	2b78      	cmp	r3, #120	@ 0x78
 80011aa:	dc59      	bgt.n	8001260 <calcul+0xd4>
 80011ac:	2b2d      	cmp	r3, #45	@ 0x2d
 80011ae:	d020      	beq.n	80011f2 <calcul+0x66>
 80011b0:	2b2d      	cmp	r3, #45	@ 0x2d
 80011b2:	dc55      	bgt.n	8001260 <calcul+0xd4>
 80011b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80011b6:	d037      	beq.n	8001228 <calcul+0x9c>
 80011b8:	2b2b      	cmp	r3, #43	@ 0x2b
 80011ba:	d151      	bne.n	8001260 <calcul+0xd4>
		{
		case '+':
			printf("%s + %s = %d\r\n", argv[1], argv[3], atoi(argv[1])+atoi(argv[3]));
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	3304      	adds	r3, #4
 80011c0:	681c      	ldr	r4, [r3, #0]
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	330c      	adds	r3, #12
 80011c6:	681d      	ldr	r5, [r3, #0]
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	3304      	adds	r3, #4
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f006 faf2 	bl	80077b8 <atoi>
 80011d4:	4606      	mov	r6, r0
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	330c      	adds	r3, #12
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4618      	mov	r0, r3
 80011de:	f006 faeb 	bl	80077b8 <atoi>
 80011e2:	4603      	mov	r3, r0
 80011e4:	4433      	add	r3, r6
 80011e6:	462a      	mov	r2, r5
 80011e8:	4621      	mov	r1, r4
 80011ea:	4823      	ldr	r0, [pc, #140]	@ (8001278 <calcul+0xec>)
 80011ec:	f006 fc2e 	bl	8007a4c <iprintf>
			break;
 80011f0:	e03d      	b.n	800126e <calcul+0xe2>
		case '-':
			printf("%s - %s = %d\r\n", argv[1], argv[3], atoi(argv[1])-atoi(argv[3]));
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	3304      	adds	r3, #4
 80011f6:	681c      	ldr	r4, [r3, #0]
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	330c      	adds	r3, #12
 80011fc:	681d      	ldr	r5, [r3, #0]
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	3304      	adds	r3, #4
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4618      	mov	r0, r3
 8001206:	f006 fad7 	bl	80077b8 <atoi>
 800120a:	4606      	mov	r6, r0
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	330c      	adds	r3, #12
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4618      	mov	r0, r3
 8001214:	f006 fad0 	bl	80077b8 <atoi>
 8001218:	4603      	mov	r3, r0
 800121a:	1af3      	subs	r3, r6, r3
 800121c:	462a      	mov	r2, r5
 800121e:	4621      	mov	r1, r4
 8001220:	4816      	ldr	r0, [pc, #88]	@ (800127c <calcul+0xf0>)
 8001222:	f006 fc13 	bl	8007a4c <iprintf>
			break;
 8001226:	e022      	b.n	800126e <calcul+0xe2>
		case '*':
		case 'x':
			printf("%s * %s = %d\r\n", argv[1], argv[3], atoi(argv[1])*atoi(argv[3]));
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	3304      	adds	r3, #4
 800122c:	681c      	ldr	r4, [r3, #0]
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	330c      	adds	r3, #12
 8001232:	681d      	ldr	r5, [r3, #0]
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	3304      	adds	r3, #4
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4618      	mov	r0, r3
 800123c:	f006 fabc 	bl	80077b8 <atoi>
 8001240:	4606      	mov	r6, r0
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	330c      	adds	r3, #12
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4618      	mov	r0, r3
 800124a:	f006 fab5 	bl	80077b8 <atoi>
 800124e:	4603      	mov	r3, r0
 8001250:	fb06 f303 	mul.w	r3, r6, r3
 8001254:	462a      	mov	r2, r5
 8001256:	4621      	mov	r1, r4
 8001258:	4809      	ldr	r0, [pc, #36]	@ (8001280 <calcul+0xf4>)
 800125a:	f006 fbf7 	bl	8007a4c <iprintf>
			break;
 800125e:	e006      	b.n	800126e <calcul+0xe2>
		default:
			printf("Opération '%s' non supporté!\r\n", argv[2]);
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	3308      	adds	r3, #8
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4619      	mov	r1, r3
 8001268:	4806      	ldr	r0, [pc, #24]	@ (8001284 <calcul+0xf8>)
 800126a:	f006 fbef 	bl	8007a4c <iprintf>
		}
	}

	return 0;
 800126e:	2300      	movs	r3, #0
}
 8001270:	4618      	mov	r0, r3
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001278:	08008d80 	.word	0x08008d80
 800127c:	08008d90 	.word	0x08008d90
 8001280:	08008da0 	.word	0x08008da0
 8001284:	08008db0 	.word	0x08008db0

08001288 <addition>:

int addition(int argc, char ** argv)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
	if (argc > 1)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2b01      	cmp	r3, #1
 8001296:	dd24      	ble.n	80012e2 <addition+0x5a>
	{
		int somme = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	60fb      	str	r3, [r7, #12]
		for (int i = 1; i < argc; i++)
 800129c:	2301      	movs	r3, #1
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	e017      	b.n	80012d2 <addition+0x4a>
		{
			printf(" + %s", argv[i]);
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	683a      	ldr	r2, [r7, #0]
 80012a8:	4413      	add	r3, r2
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4619      	mov	r1, r3
 80012ae:	480f      	ldr	r0, [pc, #60]	@ (80012ec <addition+0x64>)
 80012b0:	f006 fbcc 	bl	8007a4c <iprintf>
			somme = somme + atoi(argv[i]);
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	683a      	ldr	r2, [r7, #0]
 80012ba:	4413      	add	r3, r2
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4618      	mov	r0, r3
 80012c0:	f006 fa7a 	bl	80077b8 <atoi>
 80012c4:	4602      	mov	r2, r0
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	4413      	add	r3, r2
 80012ca:	60fb      	str	r3, [r7, #12]
		for (int i = 1; i < argc; i++)
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	3301      	adds	r3, #1
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	68ba      	ldr	r2, [r7, #8]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	dbe3      	blt.n	80012a2 <addition+0x1a>
		}

		printf(" = %d\r\n", somme);
 80012da:	68f9      	ldr	r1, [r7, #12]
 80012dc:	4804      	ldr	r0, [pc, #16]	@ (80012f0 <addition+0x68>)
 80012de:	f006 fbb5 	bl	8007a4c <iprintf>
	}
	return 0;
 80012e2:	2300      	movs	r3, #0
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	08008dd4 	.word	0x08008dd4
 80012f0:	08008ddc 	.word	0x08008ddc

080012f4 <shell_uart_receive_irq_cb>:
static char print_buffer[BUFFER_SIZE];
static SemaphoreHandle_t sem_uart_read = NULL;


void shell_uart_receive_irq_cb(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
	BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 80012fa:	2300      	movs	r3, #0
 80012fc:	607b      	str	r3, [r7, #4]

	xSemaphoreGiveFromISR(sem_uart_read, &pxHigherPriorityTaskWoken);
 80012fe:	4b0b      	ldr	r3, [pc, #44]	@ (800132c <shell_uart_receive_irq_cb+0x38>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	1d3a      	adds	r2, r7, #4
 8001304:	4611      	mov	r1, r2
 8001306:	4618      	mov	r0, r3
 8001308:	f004 fc7c 	bl	8005c04 <xQueueGiveFromISR>

	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d007      	beq.n	8001322 <shell_uart_receive_irq_cb+0x2e>
 8001312:	4b07      	ldr	r3, [pc, #28]	@ (8001330 <shell_uart_receive_irq_cb+0x3c>)
 8001314:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	f3bf 8f4f 	dsb	sy
 800131e:	f3bf 8f6f 	isb	sy
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000764 	.word	0x20000764
 8001330:	e000ed04 	.word	0xe000ed04

08001334 <uart_read>:

static char uart_read() {
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
	char c;

	HAL_UART_Receive_IT(&UART_DEVICE, (uint8_t*)(&c), 1);
 800133a:	1dfb      	adds	r3, r7, #7
 800133c:	2201      	movs	r2, #1
 800133e:	4619      	mov	r1, r3
 8001340:	4807      	ldr	r0, [pc, #28]	@ (8001360 <uart_read+0x2c>)
 8001342:	f002 ff55 	bl	80041f0 <HAL_UART_Receive_IT>
	// il faut mettre la tâche shell dans l'état bloqué, jusqu'à l'interruption de réception de caractère
	// prendre un sémaphore vide par exemple
	xSemaphoreTake(sem_uart_read, portMAX_DELAY);
 8001346:	4b07      	ldr	r3, [pc, #28]	@ (8001364 <uart_read+0x30>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800134e:	4618      	mov	r0, r3
 8001350:	f004 fce8 	bl	8005d24 <xQueueSemaphoreTake>

	return c;
 8001354:	79fb      	ldrb	r3, [r7, #7]
}
 8001356:	4618      	mov	r0, r3
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	200003b0 	.word	0x200003b0
 8001364:	20000764 	.word	0x20000764

08001368 <uart_write>:

static int uart_write(char * s, uint16_t size) {
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&UART_DEVICE, (uint8_t*)s, size, HAL_MAX_DELAY);
 8001374:	887a      	ldrh	r2, [r7, #2]
 8001376:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	4803      	ldr	r0, [pc, #12]	@ (800138c <uart_write+0x24>)
 800137e:	f002 fead 	bl	80040dc <HAL_UART_Transmit>
	return size;
 8001382:	887b      	ldrh	r3, [r7, #2]
}
 8001384:	4618      	mov	r0, r3
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	200003b0 	.word	0x200003b0

08001390 <sh_help>:

static int sh_help(int argc, char ** argv) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af02      	add	r7, sp, #8
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
	int i;
	for(i = 0 ; i < shell_func_list_size ; i++) {
 800139a:	2300      	movs	r3, #0
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	e022      	b.n	80013e6 <sh_help+0x56>
		int size;
		size = snprintf (print_buffer, BUFFER_SIZE, "%c: %s\r\n", shell_func_list[i].c, shell_func_list[i].description);
 80013a0:	4916      	ldr	r1, [pc, #88]	@ (80013fc <sh_help+0x6c>)
 80013a2:	68fa      	ldr	r2, [r7, #12]
 80013a4:	4613      	mov	r3, r2
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	4413      	add	r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	440b      	add	r3, r1
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	4618      	mov	r0, r3
 80013b2:	4912      	ldr	r1, [pc, #72]	@ (80013fc <sh_help+0x6c>)
 80013b4:	68fa      	ldr	r2, [r7, #12]
 80013b6:	4613      	mov	r3, r2
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	4413      	add	r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	440b      	add	r3, r1
 80013c0:	3308      	adds	r3, #8
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	4603      	mov	r3, r0
 80013c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001400 <sh_help+0x70>)
 80013ca:	2128      	movs	r1, #40	@ 0x28
 80013cc:	480d      	ldr	r0, [pc, #52]	@ (8001404 <sh_help+0x74>)
 80013ce:	f006 fbad 	bl	8007b2c <sniprintf>
 80013d2:	60b8      	str	r0, [r7, #8]
		uart_write(print_buffer, size);
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	4619      	mov	r1, r3
 80013da:	480a      	ldr	r0, [pc, #40]	@ (8001404 <sh_help+0x74>)
 80013dc:	f7ff ffc4 	bl	8001368 <uart_write>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	3301      	adds	r3, #1
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	4b08      	ldr	r3, [pc, #32]	@ (8001408 <sh_help+0x78>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	dbd7      	blt.n	80013a0 <sh_help+0x10>
	}

	return 0;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	2000043c 	.word	0x2000043c
 8001400:	08008de4 	.word	0x08008de4
 8001404:	2000073c 	.word	0x2000073c
 8001408:	20000438 	.word	0x20000438

0800140c <shell_init>:

void shell_init() {
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
	int size = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	607b      	str	r3, [r7, #4]

	size = snprintf (print_buffer, BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 8001416:	4a13      	ldr	r2, [pc, #76]	@ (8001464 <shell_init+0x58>)
 8001418:	2128      	movs	r1, #40	@ 0x28
 800141a:	4813      	ldr	r0, [pc, #76]	@ (8001468 <shell_init+0x5c>)
 800141c:	f006 fb86 	bl	8007b2c <sniprintf>
 8001420:	6078      	str	r0, [r7, #4]
	uart_write(print_buffer, size);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	b29b      	uxth	r3, r3
 8001426:	4619      	mov	r1, r3
 8001428:	480f      	ldr	r0, [pc, #60]	@ (8001468 <shell_init+0x5c>)
 800142a:	f7ff ff9d 	bl	8001368 <uart_write>

	sem_uart_read = xSemaphoreCreateBinary();
 800142e:	2203      	movs	r2, #3
 8001430:	2100      	movs	r1, #0
 8001432:	2001      	movs	r0, #1
 8001434:	f004 fb8c 	bl	8005b50 <xQueueGenericCreate>
 8001438:	4603      	mov	r3, r0
 800143a:	4a0c      	ldr	r2, [pc, #48]	@ (800146c <shell_init+0x60>)
 800143c:	6013      	str	r3, [r2, #0]
	if (sem_uart_read == NULL)
 800143e:	4b0b      	ldr	r3, [pc, #44]	@ (800146c <shell_init+0x60>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d104      	bne.n	8001450 <shell_init+0x44>
	{
		printf("Error semaphore shell\r\n");
 8001446:	480a      	ldr	r0, [pc, #40]	@ (8001470 <shell_init+0x64>)
 8001448:	f006 fb68 	bl	8007b1c <puts>
		while(1);
 800144c:	bf00      	nop
 800144e:	e7fd      	b.n	800144c <shell_init+0x40>
	}

	shell_add('h', sh_help, "Help");
 8001450:	4a08      	ldr	r2, [pc, #32]	@ (8001474 <shell_init+0x68>)
 8001452:	4909      	ldr	r1, [pc, #36]	@ (8001478 <shell_init+0x6c>)
 8001454:	2068      	movs	r0, #104	@ 0x68
 8001456:	f000 f811 	bl	800147c <shell_add>
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	08008df0 	.word	0x08008df0
 8001468:	2000073c 	.word	0x2000073c
 800146c:	20000764 	.word	0x20000764
 8001470:	08008e18 	.word	0x08008e18
 8001474:	08008e30 	.word	0x08008e30
 8001478:	08001391 	.word	0x08001391

0800147c <shell_add>:

int shell_add(char c, int (* pfunc)(int argc, char ** argv), char * description) {
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
 8001488:	73fb      	strb	r3, [r7, #15]
	if (shell_func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 800148a:	4b19      	ldr	r3, [pc, #100]	@ (80014f0 <shell_add+0x74>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001490:	dc26      	bgt.n	80014e0 <shell_add+0x64>
		shell_func_list[shell_func_list_size].c = c;
 8001492:	4b17      	ldr	r3, [pc, #92]	@ (80014f0 <shell_add+0x74>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	4917      	ldr	r1, [pc, #92]	@ (80014f4 <shell_add+0x78>)
 8001498:	4613      	mov	r3, r2
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	4413      	add	r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	440b      	add	r3, r1
 80014a2:	7bfa      	ldrb	r2, [r7, #15]
 80014a4:	701a      	strb	r2, [r3, #0]
		shell_func_list[shell_func_list_size].func = pfunc;
 80014a6:	4b12      	ldr	r3, [pc, #72]	@ (80014f0 <shell_add+0x74>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	4912      	ldr	r1, [pc, #72]	@ (80014f4 <shell_add+0x78>)
 80014ac:	4613      	mov	r3, r2
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	4413      	add	r3, r2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	440b      	add	r3, r1
 80014b6:	3304      	adds	r3, #4
 80014b8:	68ba      	ldr	r2, [r7, #8]
 80014ba:	601a      	str	r2, [r3, #0]
		shell_func_list[shell_func_list_size].description = description;
 80014bc:	4b0c      	ldr	r3, [pc, #48]	@ (80014f0 <shell_add+0x74>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	490c      	ldr	r1, [pc, #48]	@ (80014f4 <shell_add+0x78>)
 80014c2:	4613      	mov	r3, r2
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	4413      	add	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	440b      	add	r3, r1
 80014cc:	3308      	adds	r3, #8
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	601a      	str	r2, [r3, #0]
		shell_func_list_size++;
 80014d2:	4b07      	ldr	r3, [pc, #28]	@ (80014f0 <shell_add+0x74>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	3301      	adds	r3, #1
 80014d8:	4a05      	ldr	r2, [pc, #20]	@ (80014f0 <shell_add+0x74>)
 80014da:	6013      	str	r3, [r2, #0]
		return 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	e001      	b.n	80014e4 <shell_add+0x68>
	}

	return -1;
 80014e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	20000438 	.word	0x20000438
 80014f4:	2000043c 	.word	0x2000043c

080014f8 <shell_exec>:

static int shell_exec(char * buf) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b090      	sub	sp, #64	@ 0x40
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
	int i;

	char c = buf[0];
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < shell_func_list_size ; i++) {
 8001508:	2300      	movs	r3, #0
 800150a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800150c:	e040      	b.n	8001590 <shell_exec+0x98>
		if (shell_func_list[i].c == c) {
 800150e:	492d      	ldr	r1, [pc, #180]	@ (80015c4 <shell_exec+0xcc>)
 8001510:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001512:	4613      	mov	r3, r2
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	4413      	add	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	440b      	add	r3, r1
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8001522:	429a      	cmp	r2, r3
 8001524:	d131      	bne.n	800158a <shell_exec+0x92>
			argc = 1;
 8001526:	2301      	movs	r3, #1
 8001528:	63bb      	str	r3, [r7, #56]	@ 0x38
			argv[0] = buf;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	637b      	str	r3, [r7, #52]	@ 0x34
 8001532:	e013      	b.n	800155c <shell_exec+0x64>
				if(*p == ' ') {
 8001534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b20      	cmp	r3, #32
 800153a:	d10c      	bne.n	8001556 <shell_exec+0x5e>
					*p = '\0';
 800153c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800153e:	2200      	movs	r2, #0
 8001540:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 8001542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001544:	1c5a      	adds	r2, r3, #1
 8001546:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001548:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800154a:	3201      	adds	r2, #1
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	3340      	adds	r3, #64	@ 0x40
 8001550:	443b      	add	r3, r7
 8001552:	f843 2c34 	str.w	r2, [r3, #-52]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8001556:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001558:	3301      	adds	r3, #1
 800155a:	637b      	str	r3, [r7, #52]	@ 0x34
 800155c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d002      	beq.n	800156a <shell_exec+0x72>
 8001564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001566:	2b07      	cmp	r3, #7
 8001568:	dde4      	ble.n	8001534 <shell_exec+0x3c>
				}
			}

			return shell_func_list[i].func(argc, argv);
 800156a:	4916      	ldr	r1, [pc, #88]	@ (80015c4 <shell_exec+0xcc>)
 800156c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800156e:	4613      	mov	r3, r2
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	4413      	add	r3, r2
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	440b      	add	r3, r1
 8001578:	3304      	adds	r3, #4
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f107 020c 	add.w	r2, r7, #12
 8001580:	4611      	mov	r1, r2
 8001582:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001584:	4798      	blx	r3
 8001586:	4603      	mov	r3, r0
 8001588:	e017      	b.n	80015ba <shell_exec+0xc2>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 800158a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800158c:	3301      	adds	r3, #1
 800158e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001590:	4b0d      	ldr	r3, [pc, #52]	@ (80015c8 <shell_exec+0xd0>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001596:	429a      	cmp	r2, r3
 8001598:	dbb9      	blt.n	800150e <shell_exec+0x16>
		}
	}

	int size;
	size = snprintf (print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 800159a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800159e:	4a0b      	ldr	r2, [pc, #44]	@ (80015cc <shell_exec+0xd4>)
 80015a0:	2128      	movs	r1, #40	@ 0x28
 80015a2:	480b      	ldr	r0, [pc, #44]	@ (80015d0 <shell_exec+0xd8>)
 80015a4:	f006 fac2 	bl	8007b2c <sniprintf>
 80015a8:	62f8      	str	r0, [r7, #44]	@ 0x2c
	uart_write(print_buffer, size);
 80015aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	4619      	mov	r1, r3
 80015b0:	4807      	ldr	r0, [pc, #28]	@ (80015d0 <shell_exec+0xd8>)
 80015b2:	f7ff fed9 	bl	8001368 <uart_write>
	return -1;
 80015b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3740      	adds	r7, #64	@ 0x40
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	2000043c 	.word	0x2000043c
 80015c8:	20000438 	.word	0x20000438
 80015cc:	08008e38 	.word	0x08008e38
 80015d0:	2000073c 	.word	0x2000073c

080015d4 <shell_run>:

static char backspace[] = "\b \b";
static char prompt[] = "> ";

int shell_run() {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
	int reading = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
	int pos = 0;
 80015de:	2300      	movs	r3, #0
 80015e0:	60bb      	str	r3, [r7, #8]

	static char cmd_buffer[BUFFER_SIZE];

	while (1) {
		uart_write(prompt, 2);
 80015e2:	2102      	movs	r1, #2
 80015e4:	482a      	ldr	r0, [pc, #168]	@ (8001690 <shell_run+0xbc>)
 80015e6:	f7ff febf 	bl	8001368 <uart_write>
		reading = 1;
 80015ea:	2301      	movs	r3, #1
 80015ec:	60fb      	str	r3, [r7, #12]

		while(reading) {
 80015ee:	e047      	b.n	8001680 <shell_run+0xac>
			char c = uart_read();
 80015f0:	f7ff fea0 	bl	8001334 <uart_read>
 80015f4:	4603      	mov	r3, r0
 80015f6:	70fb      	strb	r3, [r7, #3]
			int size;

			switch (c) {
 80015f8:	78fb      	ldrb	r3, [r7, #3]
 80015fa:	2b08      	cmp	r3, #8
 80015fc:	d025      	beq.n	800164a <shell_run+0x76>
 80015fe:	2b0d      	cmp	r3, #13
 8001600:	d12e      	bne.n	8001660 <shell_run+0x8c>
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (print_buffer, BUFFER_SIZE, "\r\n");
 8001602:	4a24      	ldr	r2, [pc, #144]	@ (8001694 <shell_run+0xc0>)
 8001604:	2128      	movs	r1, #40	@ 0x28
 8001606:	4824      	ldr	r0, [pc, #144]	@ (8001698 <shell_run+0xc4>)
 8001608:	f006 fa90 	bl	8007b2c <sniprintf>
 800160c:	6078      	str	r0, [r7, #4]
				uart_write(print_buffer, size);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	b29b      	uxth	r3, r3
 8001612:	4619      	mov	r1, r3
 8001614:	4820      	ldr	r0, [pc, #128]	@ (8001698 <shell_run+0xc4>)
 8001616:	f7ff fea7 	bl	8001368 <uart_write>
				cmd_buffer[pos++] = 0;     //add \0 char at end of string
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	1c5a      	adds	r2, r3, #1
 800161e:	60ba      	str	r2, [r7, #8]
 8001620:	4a1e      	ldr	r2, [pc, #120]	@ (800169c <shell_run+0xc8>)
 8001622:	2100      	movs	r1, #0
 8001624:	54d1      	strb	r1, [r2, r3]
				size = snprintf (print_buffer, BUFFER_SIZE, ":%s\r\n", cmd_buffer);
 8001626:	4b1d      	ldr	r3, [pc, #116]	@ (800169c <shell_run+0xc8>)
 8001628:	4a1d      	ldr	r2, [pc, #116]	@ (80016a0 <shell_run+0xcc>)
 800162a:	2128      	movs	r1, #40	@ 0x28
 800162c:	481a      	ldr	r0, [pc, #104]	@ (8001698 <shell_run+0xc4>)
 800162e:	f006 fa7d 	bl	8007b2c <sniprintf>
 8001632:	6078      	str	r0, [r7, #4]
				uart_write(print_buffer, size);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	b29b      	uxth	r3, r3
 8001638:	4619      	mov	r1, r3
 800163a:	4817      	ldr	r0, [pc, #92]	@ (8001698 <shell_run+0xc4>)
 800163c:	f7ff fe94 	bl	8001368 <uart_write>
				reading = 0;        //exit read loop
 8001640:	2300      	movs	r3, #0
 8001642:	60fb      	str	r3, [r7, #12]
				pos = 0;            //reset buffer
 8001644:	2300      	movs	r3, #0
 8001646:	60bb      	str	r3, [r7, #8]
				break;
 8001648:	e01a      	b.n	8001680 <shell_run+0xac>
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	2b00      	cmp	r3, #0
 800164e:	dd16      	ble.n	800167e <shell_run+0xaa>
					pos--;          //remove it in buffer
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	3b01      	subs	r3, #1
 8001654:	60bb      	str	r3, [r7, #8]

					uart_write(backspace, 3);	// delete the char on the terminal
 8001656:	2103      	movs	r1, #3
 8001658:	4812      	ldr	r0, [pc, #72]	@ (80016a4 <shell_run+0xd0>)
 800165a:	f7ff fe85 	bl	8001368 <uart_write>
				}
				break;
 800165e:	e00e      	b.n	800167e <shell_run+0xaa>
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	2b27      	cmp	r3, #39	@ 0x27
 8001664:	dc0c      	bgt.n	8001680 <shell_run+0xac>
					uart_write(&c, 1);
 8001666:	1cfb      	adds	r3, r7, #3
 8001668:	2101      	movs	r1, #1
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff fe7c 	bl	8001368 <uart_write>
					cmd_buffer[pos++] = c; //store
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	1c5a      	adds	r2, r3, #1
 8001674:	60ba      	str	r2, [r7, #8]
 8001676:	78f9      	ldrb	r1, [r7, #3]
 8001678:	4a08      	ldr	r2, [pc, #32]	@ (800169c <shell_run+0xc8>)
 800167a:	54d1      	strb	r1, [r2, r3]
 800167c:	e000      	b.n	8001680 <shell_run+0xac>
				break;
 800167e:	bf00      	nop
		while(reading) {
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1b4      	bne.n	80015f0 <shell_run+0x1c>
				}
			}
		}
		shell_exec(cmd_buffer);
 8001686:	4805      	ldr	r0, [pc, #20]	@ (800169c <shell_run+0xc8>)
 8001688:	f7ff ff36 	bl	80014f8 <shell_exec>
		uart_write(prompt, 2);
 800168c:	e7a9      	b.n	80015e2 <shell_run+0xe>
 800168e:	bf00      	nop
 8001690:	20000008 	.word	0x20000008
 8001694:	08008e50 	.word	0x08008e50
 8001698:	2000073c 	.word	0x2000073c
 800169c:	20000768 	.word	0x20000768
 80016a0:	08008e54 	.word	0x08008e54
 80016a4:	20000004 	.word	0x20000004

080016a8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016ae:	2300      	movs	r3, #0
 80016b0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016b2:	4b0c      	ldr	r3, [pc, #48]	@ (80016e4 <HAL_Init+0x3c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a0b      	ldr	r2, [pc, #44]	@ (80016e4 <HAL_Init+0x3c>)
 80016b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016bc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016be:	2003      	movs	r0, #3
 80016c0:	f000 f93e 	bl	8001940 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016c4:	200f      	movs	r0, #15
 80016c6:	f000 f80f 	bl	80016e8 <HAL_InitTick>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d002      	beq.n	80016d6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	71fb      	strb	r3, [r7, #7]
 80016d4:	e001      	b.n	80016da <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016d6:	f7ff fb5d 	bl	8000d94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016da:	79fb      	ldrb	r3, [r7, #7]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40022000 	.word	0x40022000

080016e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016f0:	2300      	movs	r3, #0
 80016f2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80016f4:	4b17      	ldr	r3, [pc, #92]	@ (8001754 <HAL_InitTick+0x6c>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d023      	beq.n	8001744 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80016fc:	4b16      	ldr	r3, [pc, #88]	@ (8001758 <HAL_InitTick+0x70>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b14      	ldr	r3, [pc, #80]	@ (8001754 <HAL_InitTick+0x6c>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	4619      	mov	r1, r3
 8001706:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800170a:	fbb3 f3f1 	udiv	r3, r3, r1
 800170e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001712:	4618      	mov	r0, r3
 8001714:	f000 f949 	bl	80019aa <HAL_SYSTICK_Config>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d10f      	bne.n	800173e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2b0f      	cmp	r3, #15
 8001722:	d809      	bhi.n	8001738 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001724:	2200      	movs	r2, #0
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800172c:	f000 f913 	bl	8001956 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001730:	4a0a      	ldr	r2, [pc, #40]	@ (800175c <HAL_InitTick+0x74>)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6013      	str	r3, [r2, #0]
 8001736:	e007      	b.n	8001748 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	73fb      	strb	r3, [r7, #15]
 800173c:	e004      	b.n	8001748 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	73fb      	strb	r3, [r7, #15]
 8001742:	e001      	b.n	8001748 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001748:	7bfb      	ldrb	r3, [r7, #15]
}
 800174a:	4618      	mov	r0, r3
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000010 	.word	0x20000010
 8001758:	20000000 	.word	0x20000000
 800175c:	2000000c 	.word	0x2000000c

08001760 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001764:	4b06      	ldr	r3, [pc, #24]	@ (8001780 <HAL_IncTick+0x20>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	461a      	mov	r2, r3
 800176a:	4b06      	ldr	r3, [pc, #24]	@ (8001784 <HAL_IncTick+0x24>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4413      	add	r3, r2
 8001770:	4a04      	ldr	r2, [pc, #16]	@ (8001784 <HAL_IncTick+0x24>)
 8001772:	6013      	str	r3, [r2, #0]
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	20000010 	.word	0x20000010
 8001784:	20000790 	.word	0x20000790

08001788 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  return uwTick;
 800178c:	4b03      	ldr	r3, [pc, #12]	@ (800179c <HAL_GetTick+0x14>)
 800178e:	681b      	ldr	r3, [r3, #0]
}
 8001790:	4618      	mov	r0, r3
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	20000790 	.word	0x20000790

080017a0 <__NVIC_SetPriorityGrouping>:
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b0:	4b0c      	ldr	r3, [pc, #48]	@ (80017e4 <__NVIC_SetPriorityGrouping+0x44>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017b6:	68ba      	ldr	r2, [r7, #8]
 80017b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017bc:	4013      	ands	r3, r2
 80017be:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017d2:	4a04      	ldr	r2, [pc, #16]	@ (80017e4 <__NVIC_SetPriorityGrouping+0x44>)
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	60d3      	str	r3, [r2, #12]
}
 80017d8:	bf00      	nop
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <__NVIC_GetPriorityGrouping>:
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017ec:	4b04      	ldr	r3, [pc, #16]	@ (8001800 <__NVIC_GetPriorityGrouping+0x18>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	0a1b      	lsrs	r3, r3, #8
 80017f2:	f003 0307 	and.w	r3, r3, #7
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	e000ed00 	.word	0xe000ed00

08001804 <__NVIC_EnableIRQ>:
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800180e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001812:	2b00      	cmp	r3, #0
 8001814:	db0b      	blt.n	800182e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	f003 021f 	and.w	r2, r3, #31
 800181c:	4907      	ldr	r1, [pc, #28]	@ (800183c <__NVIC_EnableIRQ+0x38>)
 800181e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001822:	095b      	lsrs	r3, r3, #5
 8001824:	2001      	movs	r0, #1
 8001826:	fa00 f202 	lsl.w	r2, r0, r2
 800182a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	e000e100 	.word	0xe000e100

08001840 <__NVIC_SetPriority>:
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	6039      	str	r1, [r7, #0]
 800184a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800184c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001850:	2b00      	cmp	r3, #0
 8001852:	db0a      	blt.n	800186a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	b2da      	uxtb	r2, r3
 8001858:	490c      	ldr	r1, [pc, #48]	@ (800188c <__NVIC_SetPriority+0x4c>)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	0112      	lsls	r2, r2, #4
 8001860:	b2d2      	uxtb	r2, r2
 8001862:	440b      	add	r3, r1
 8001864:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001868:	e00a      	b.n	8001880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	b2da      	uxtb	r2, r3
 800186e:	4908      	ldr	r1, [pc, #32]	@ (8001890 <__NVIC_SetPriority+0x50>)
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	3b04      	subs	r3, #4
 8001878:	0112      	lsls	r2, r2, #4
 800187a:	b2d2      	uxtb	r2, r2
 800187c:	440b      	add	r3, r1
 800187e:	761a      	strb	r2, [r3, #24]
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	e000e100 	.word	0xe000e100
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <NVIC_EncodePriority>:
{
 8001894:	b480      	push	{r7}
 8001896:	b089      	sub	sp, #36	@ 0x24
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f1c3 0307 	rsb	r3, r3, #7
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	bf28      	it	cs
 80018b2:	2304      	movcs	r3, #4
 80018b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	3304      	adds	r3, #4
 80018ba:	2b06      	cmp	r3, #6
 80018bc:	d902      	bls.n	80018c4 <NVIC_EncodePriority+0x30>
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3b03      	subs	r3, #3
 80018c2:	e000      	b.n	80018c6 <NVIC_EncodePriority+0x32>
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43da      	mvns	r2, r3
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	401a      	ands	r2, r3
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018dc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	fa01 f303 	lsl.w	r3, r1, r3
 80018e6:	43d9      	mvns	r1, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ec:	4313      	orrs	r3, r2
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3724      	adds	r7, #36	@ 0x24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
	...

080018fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3b01      	subs	r3, #1
 8001908:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800190c:	d301      	bcc.n	8001912 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800190e:	2301      	movs	r3, #1
 8001910:	e00f      	b.n	8001932 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001912:	4a0a      	ldr	r2, [pc, #40]	@ (800193c <SysTick_Config+0x40>)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3b01      	subs	r3, #1
 8001918:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800191a:	210f      	movs	r1, #15
 800191c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001920:	f7ff ff8e 	bl	8001840 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001924:	4b05      	ldr	r3, [pc, #20]	@ (800193c <SysTick_Config+0x40>)
 8001926:	2200      	movs	r2, #0
 8001928:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800192a:	4b04      	ldr	r3, [pc, #16]	@ (800193c <SysTick_Config+0x40>)
 800192c:	2207      	movs	r2, #7
 800192e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	e000e010 	.word	0xe000e010

08001940 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f7ff ff29 	bl	80017a0 <__NVIC_SetPriorityGrouping>
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b086      	sub	sp, #24
 800195a:	af00      	add	r7, sp, #0
 800195c:	4603      	mov	r3, r0
 800195e:	60b9      	str	r1, [r7, #8]
 8001960:	607a      	str	r2, [r7, #4]
 8001962:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001968:	f7ff ff3e 	bl	80017e8 <__NVIC_GetPriorityGrouping>
 800196c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	68b9      	ldr	r1, [r7, #8]
 8001972:	6978      	ldr	r0, [r7, #20]
 8001974:	f7ff ff8e 	bl	8001894 <NVIC_EncodePriority>
 8001978:	4602      	mov	r2, r0
 800197a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800197e:	4611      	mov	r1, r2
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff ff5d 	bl	8001840 <__NVIC_SetPriority>
}
 8001986:	bf00      	nop
 8001988:	3718      	adds	r7, #24
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
 8001994:	4603      	mov	r3, r0
 8001996:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff ff31 	bl	8001804 <__NVIC_EnableIRQ>
}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b082      	sub	sp, #8
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7ff ffa2 	bl	80018fc <SysTick_Config>
 80019b8:	4603      	mov	r3, r0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b085      	sub	sp, #20
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019ca:	2300      	movs	r3, #0
 80019cc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d008      	beq.n	80019ec <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2204      	movs	r2, #4
 80019de:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e022      	b.n	8001a32 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f022 020e 	bic.w	r2, r2, #14
 80019fa:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f022 0201 	bic.w	r2, r2, #1
 8001a0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a10:	f003 021c 	and.w	r2, r3, #28
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a18:	2101      	movs	r1, #1
 8001a1a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a1e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001a30:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b084      	sub	sp, #16
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a46:	2300      	movs	r3, #0
 8001a48:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d005      	beq.n	8001a62 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2204      	movs	r2, #4
 8001a5a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	73fb      	strb	r3, [r7, #15]
 8001a60:	e029      	b.n	8001ab6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f022 020e 	bic.w	r2, r2, #14
 8001a70:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f022 0201 	bic.w	r2, r2, #1
 8001a80:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a86:	f003 021c 	and.w	r2, r3, #28
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8e:	2101      	movs	r1, #1
 8001a90:	fa01 f202 	lsl.w	r2, r1, r2
 8001a94:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	4798      	blx	r3
    }
  }
  return status;
 8001ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b087      	sub	sp, #28
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ace:	e17f      	b.n	8001dd0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8001adc:	4013      	ands	r3, r2
 8001ade:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f000 8171 	beq.w	8001dca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 0303 	and.w	r3, r3, #3
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d005      	beq.n	8001b00 <HAL_GPIO_Init+0x40>
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 0303 	and.w	r3, r3, #3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d130      	bne.n	8001b62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	2203      	movs	r2, #3
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	43db      	mvns	r3, r3
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	4013      	ands	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	68da      	ldr	r2, [r3, #12]
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b36:	2201      	movs	r2, #1
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	4013      	ands	r3, r2
 8001b44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	091b      	lsrs	r3, r3, #4
 8001b4c:	f003 0201 	and.w	r2, r3, #1
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	2b03      	cmp	r3, #3
 8001b6c:	d118      	bne.n	8001ba0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001b74:	2201      	movs	r2, #1
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	4013      	ands	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	08db      	lsrs	r3, r3, #3
 8001b8a:	f003 0201 	and.w	r2, r3, #1
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 0303 	and.w	r3, r3, #3
 8001ba8:	2b03      	cmp	r3, #3
 8001baa:	d017      	beq.n	8001bdc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	2203      	movs	r2, #3
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 0303 	and.w	r3, r3, #3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d123      	bne.n	8001c30 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	08da      	lsrs	r2, r3, #3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3208      	adds	r2, #8
 8001bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	f003 0307 	and.w	r3, r3, #7
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	220f      	movs	r2, #15
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	691a      	ldr	r2, [r3, #16]
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	08da      	lsrs	r2, r3, #3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	3208      	adds	r2, #8
 8001c2a:	6939      	ldr	r1, [r7, #16]
 8001c2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	2203      	movs	r2, #3
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	43db      	mvns	r3, r3
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	4013      	ands	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 0203 	and.w	r2, r3, #3
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	f000 80ac 	beq.w	8001dca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c72:	4b5f      	ldr	r3, [pc, #380]	@ (8001df0 <HAL_GPIO_Init+0x330>)
 8001c74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c76:	4a5e      	ldr	r2, [pc, #376]	@ (8001df0 <HAL_GPIO_Init+0x330>)
 8001c78:	f043 0301 	orr.w	r3, r3, #1
 8001c7c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c7e:	4b5c      	ldr	r3, [pc, #368]	@ (8001df0 <HAL_GPIO_Init+0x330>)
 8001c80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	60bb      	str	r3, [r7, #8]
 8001c88:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c8a:	4a5a      	ldr	r2, [pc, #360]	@ (8001df4 <HAL_GPIO_Init+0x334>)
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	089b      	lsrs	r3, r3, #2
 8001c90:	3302      	adds	r3, #2
 8001c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c96:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	f003 0303 	and.w	r3, r3, #3
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	220f      	movs	r2, #15
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	4013      	ands	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001cb4:	d025      	beq.n	8001d02 <HAL_GPIO_Init+0x242>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a4f      	ldr	r2, [pc, #316]	@ (8001df8 <HAL_GPIO_Init+0x338>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d01f      	beq.n	8001cfe <HAL_GPIO_Init+0x23e>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a4e      	ldr	r2, [pc, #312]	@ (8001dfc <HAL_GPIO_Init+0x33c>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d019      	beq.n	8001cfa <HAL_GPIO_Init+0x23a>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a4d      	ldr	r2, [pc, #308]	@ (8001e00 <HAL_GPIO_Init+0x340>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d013      	beq.n	8001cf6 <HAL_GPIO_Init+0x236>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a4c      	ldr	r2, [pc, #304]	@ (8001e04 <HAL_GPIO_Init+0x344>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d00d      	beq.n	8001cf2 <HAL_GPIO_Init+0x232>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a4b      	ldr	r2, [pc, #300]	@ (8001e08 <HAL_GPIO_Init+0x348>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d007      	beq.n	8001cee <HAL_GPIO_Init+0x22e>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a4a      	ldr	r2, [pc, #296]	@ (8001e0c <HAL_GPIO_Init+0x34c>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d101      	bne.n	8001cea <HAL_GPIO_Init+0x22a>
 8001ce6:	2306      	movs	r3, #6
 8001ce8:	e00c      	b.n	8001d04 <HAL_GPIO_Init+0x244>
 8001cea:	2307      	movs	r3, #7
 8001cec:	e00a      	b.n	8001d04 <HAL_GPIO_Init+0x244>
 8001cee:	2305      	movs	r3, #5
 8001cf0:	e008      	b.n	8001d04 <HAL_GPIO_Init+0x244>
 8001cf2:	2304      	movs	r3, #4
 8001cf4:	e006      	b.n	8001d04 <HAL_GPIO_Init+0x244>
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e004      	b.n	8001d04 <HAL_GPIO_Init+0x244>
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	e002      	b.n	8001d04 <HAL_GPIO_Init+0x244>
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e000      	b.n	8001d04 <HAL_GPIO_Init+0x244>
 8001d02:	2300      	movs	r3, #0
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	f002 0203 	and.w	r2, r2, #3
 8001d0a:	0092      	lsls	r2, r2, #2
 8001d0c:	4093      	lsls	r3, r2
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d14:	4937      	ldr	r1, [pc, #220]	@ (8001df4 <HAL_GPIO_Init+0x334>)
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	089b      	lsrs	r3, r3, #2
 8001d1a:	3302      	adds	r3, #2
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d22:	4b3b      	ldr	r3, [pc, #236]	@ (8001e10 <HAL_GPIO_Init+0x350>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d46:	4a32      	ldr	r2, [pc, #200]	@ (8001e10 <HAL_GPIO_Init+0x350>)
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d4c:	4b30      	ldr	r3, [pc, #192]	@ (8001e10 <HAL_GPIO_Init+0x350>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	43db      	mvns	r3, r3
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d003      	beq.n	8001d70 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d70:	4a27      	ldr	r2, [pc, #156]	@ (8001e10 <HAL_GPIO_Init+0x350>)
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d76:	4b26      	ldr	r3, [pc, #152]	@ (8001e10 <HAL_GPIO_Init+0x350>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	4013      	ands	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d9a:	4a1d      	ldr	r2, [pc, #116]	@ (8001e10 <HAL_GPIO_Init+0x350>)
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001da0:	4b1b      	ldr	r3, [pc, #108]	@ (8001e10 <HAL_GPIO_Init+0x350>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	43db      	mvns	r3, r3
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	4013      	ands	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d003      	beq.n	8001dc4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001dc4:	4a12      	ldr	r2, [pc, #72]	@ (8001e10 <HAL_GPIO_Init+0x350>)
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f47f ae78 	bne.w	8001ad0 <HAL_GPIO_Init+0x10>
  }
}
 8001de0:	bf00      	nop
 8001de2:	bf00      	nop
 8001de4:	371c      	adds	r7, #28
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	40021000 	.word	0x40021000
 8001df4:	40010000 	.word	0x40010000
 8001df8:	48000400 	.word	0x48000400
 8001dfc:	48000800 	.word	0x48000800
 8001e00:	48000c00 	.word	0x48000c00
 8001e04:	48001000 	.word	0x48001000
 8001e08:	48001400 	.word	0x48001400
 8001e0c:	48001800 	.word	0x48001800
 8001e10:	40010400 	.word	0x40010400

08001e14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	807b      	strh	r3, [r7, #2]
 8001e20:	4613      	mov	r3, r2
 8001e22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e24:	787b      	ldrb	r3, [r7, #1]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d003      	beq.n	8001e32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e2a:	887a      	ldrh	r2, [r7, #2]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e30:	e002      	b.n	8001e38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e32:	887a      	ldrh	r2, [r7, #2]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	695b      	ldr	r3, [r3, #20]
 8001e54:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e56:	887a      	ldrh	r2, [r7, #2]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	041a      	lsls	r2, r3, #16
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	43d9      	mvns	r1, r3
 8001e62:	887b      	ldrh	r3, [r7, #2]
 8001e64:	400b      	ands	r3, r1
 8001e66:	431a      	orrs	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	619a      	str	r2, [r3, #24]
}
 8001e6c:	bf00      	nop
 8001e6e:	3714      	adds	r7, #20
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e08d      	b.n	8001fa6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d106      	bne.n	8001ea4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7fe fc58 	bl	8000754 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2224      	movs	r2, #36	@ 0x24
 8001ea8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f022 0201 	bic.w	r2, r2, #1
 8001eba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ec8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ed8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d107      	bne.n	8001ef2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689a      	ldr	r2, [r3, #8]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	e006      	b.n	8001f00 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689a      	ldr	r2, [r3, #8]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001efe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d108      	bne.n	8001f1a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	685a      	ldr	r2, [r3, #4]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f16:	605a      	str	r2, [r3, #4]
 8001f18:	e007      	b.n	8001f2a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f28:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	6812      	ldr	r2, [r2, #0]
 8001f34:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f3c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68da      	ldr	r2, [r3, #12]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f4c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	691a      	ldr	r2, [r3, #16]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	430a      	orrs	r2, r1
 8001f66:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69d9      	ldr	r1, [r3, #28]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a1a      	ldr	r2, [r3, #32]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	430a      	orrs	r2, r1
 8001f76:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f042 0201 	orr.w	r2, r2, #1
 8001f86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2220      	movs	r2, #32
 8001f92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
 8001fb6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b20      	cmp	r3, #32
 8001fc2:	d138      	bne.n	8002036 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d101      	bne.n	8001fd2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001fce:	2302      	movs	r3, #2
 8001fd0:	e032      	b.n	8002038 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2224      	movs	r2, #36	@ 0x24
 8001fde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 0201 	bic.w	r2, r2, #1
 8001ff0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002000:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6819      	ldr	r1, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	430a      	orrs	r2, r1
 8002010:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f042 0201 	orr.w	r2, r2, #1
 8002020:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2220      	movs	r2, #32
 8002026:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002032:	2300      	movs	r3, #0
 8002034:	e000      	b.n	8002038 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002036:	2302      	movs	r3, #2
  }
}
 8002038:	4618      	mov	r0, r3
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b20      	cmp	r3, #32
 8002058:	d139      	bne.n	80020ce <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002060:	2b01      	cmp	r3, #1
 8002062:	d101      	bne.n	8002068 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002064:	2302      	movs	r3, #2
 8002066:	e033      	b.n	80020d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2224      	movs	r2, #36	@ 0x24
 8002074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f022 0201 	bic.w	r2, r2, #1
 8002086:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002096:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	021b      	lsls	r3, r3, #8
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	4313      	orrs	r3, r2
 80020a0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f042 0201 	orr.w	r2, r2, #1
 80020b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2220      	movs	r2, #32
 80020be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80020ca:	2300      	movs	r3, #0
 80020cc:	e000      	b.n	80020d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80020ce:	2302      	movs	r3, #2
  }
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3714      	adds	r7, #20
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80020e0:	4b04      	ldr	r3, [pc, #16]	@ (80020f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	40007000 	.word	0x40007000

080020f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002106:	d130      	bne.n	800216a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002108:	4b23      	ldr	r3, [pc, #140]	@ (8002198 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002110:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002114:	d038      	beq.n	8002188 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002116:	4b20      	ldr	r3, [pc, #128]	@ (8002198 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800211e:	4a1e      	ldr	r2, [pc, #120]	@ (8002198 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002120:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002124:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002126:	4b1d      	ldr	r3, [pc, #116]	@ (800219c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2232      	movs	r2, #50	@ 0x32
 800212c:	fb02 f303 	mul.w	r3, r2, r3
 8002130:	4a1b      	ldr	r2, [pc, #108]	@ (80021a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002132:	fba2 2303 	umull	r2, r3, r2, r3
 8002136:	0c9b      	lsrs	r3, r3, #18
 8002138:	3301      	adds	r3, #1
 800213a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800213c:	e002      	b.n	8002144 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	3b01      	subs	r3, #1
 8002142:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002144:	4b14      	ldr	r3, [pc, #80]	@ (8002198 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002146:	695b      	ldr	r3, [r3, #20]
 8002148:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800214c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002150:	d102      	bne.n	8002158 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1f2      	bne.n	800213e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002158:	4b0f      	ldr	r3, [pc, #60]	@ (8002198 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800215a:	695b      	ldr	r3, [r3, #20]
 800215c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002160:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002164:	d110      	bne.n	8002188 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e00f      	b.n	800218a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800216a:	4b0b      	ldr	r3, [pc, #44]	@ (8002198 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002172:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002176:	d007      	beq.n	8002188 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002178:	4b07      	ldr	r3, [pc, #28]	@ (8002198 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002180:	4a05      	ldr	r2, [pc, #20]	@ (8002198 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002182:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002186:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3714      	adds	r7, #20
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	40007000 	.word	0x40007000
 800219c:	20000000 	.word	0x20000000
 80021a0:	431bde83 	.word	0x431bde83

080021a4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b088      	sub	sp, #32
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e3ca      	b.n	800294c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021b6:	4b97      	ldr	r3, [pc, #604]	@ (8002414 <HAL_RCC_OscConfig+0x270>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f003 030c 	and.w	r3, r3, #12
 80021be:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021c0:	4b94      	ldr	r3, [pc, #592]	@ (8002414 <HAL_RCC_OscConfig+0x270>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	f003 0303 	and.w	r3, r3, #3
 80021c8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0310 	and.w	r3, r3, #16
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 80e4 	beq.w	80023a0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d007      	beq.n	80021ee <HAL_RCC_OscConfig+0x4a>
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	2b0c      	cmp	r3, #12
 80021e2:	f040 808b 	bne.w	80022fc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	f040 8087 	bne.w	80022fc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021ee:	4b89      	ldr	r3, [pc, #548]	@ (8002414 <HAL_RCC_OscConfig+0x270>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d005      	beq.n	8002206 <HAL_RCC_OscConfig+0x62>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e3a2      	b.n	800294c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a1a      	ldr	r2, [r3, #32]
 800220a:	4b82      	ldr	r3, [pc, #520]	@ (8002414 <HAL_RCC_OscConfig+0x270>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0308 	and.w	r3, r3, #8
 8002212:	2b00      	cmp	r3, #0
 8002214:	d004      	beq.n	8002220 <HAL_RCC_OscConfig+0x7c>
 8002216:	4b7f      	ldr	r3, [pc, #508]	@ (8002414 <HAL_RCC_OscConfig+0x270>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800221e:	e005      	b.n	800222c <HAL_RCC_OscConfig+0x88>
 8002220:	4b7c      	ldr	r3, [pc, #496]	@ (8002414 <HAL_RCC_OscConfig+0x270>)
 8002222:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002226:	091b      	lsrs	r3, r3, #4
 8002228:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800222c:	4293      	cmp	r3, r2
 800222e:	d223      	bcs.n	8002278 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	4618      	mov	r0, r3
 8002236:	f000 fd55 	bl	8002ce4 <RCC_SetFlashLatencyFromMSIRange>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e383      	b.n	800294c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002244:	4b73      	ldr	r3, [pc, #460]	@ (8002414 <HAL_RCC_OscConfig+0x270>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a72      	ldr	r2, [pc, #456]	@ (8002414 <HAL_RCC_OscConfig+0x270>)
 800224a:	f043 0308 	orr.w	r3, r3, #8
 800224e:	6013      	str	r3, [r2, #0]
 8002250:	4b70      	ldr	r3, [pc, #448]	@ (8002414 <HAL_RCC_OscConfig+0x270>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a1b      	ldr	r3, [r3, #32]
 800225c:	496d      	ldr	r1, [pc, #436]	@ (8002414 <HAL_RCC_OscConfig+0x270>)
 800225e:	4313      	orrs	r3, r2
 8002260:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002262:	4b6c      	ldr	r3, [pc, #432]	@ (8002414 <HAL_RCC_OscConfig+0x270>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	021b      	lsls	r3, r3, #8
 8002270:	4968      	ldr	r1, [pc, #416]	@ (8002414 <HAL_RCC_OscConfig+0x270>)
 8002272:	4313      	orrs	r3, r2
 8002274:	604b      	str	r3, [r1, #4]
 8002276:	e025      	b.n	80022c4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002278:	4b66      	ldr	r3, [pc, #408]	@ (8002414 <HAL_RCC_OscConfig+0x270>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a65      	ldr	r2, [pc, #404]	@ (8002414 <HAL_RCC_OscConfig+0x270>)
 800227e:	f043 0308 	orr.w	r3, r3, #8
 8002282:	6013      	str	r3, [r2, #0]
 8002284:	4b63      	ldr	r3, [pc, #396]	@ (8002414 <HAL_RCC_OscConfig+0x270>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a1b      	ldr	r3, [r3, #32]
 8002290:	4960      	ldr	r1, [pc, #384]	@ (8002414 <HAL_RCC_OscConfig+0x270>)
 8002292:	4313      	orrs	r3, r2
 8002294:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002296:	4b5f      	ldr	r3, [pc, #380]	@ (8002414 <HAL_RCC_OscConfig+0x270>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	021b      	lsls	r3, r3, #8
 80022a4:	495b      	ldr	r1, [pc, #364]	@ (8002414 <HAL_RCC_OscConfig+0x270>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d109      	bne.n	80022c4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a1b      	ldr	r3, [r3, #32]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f000 fd15 	bl	8002ce4 <RCC_SetFlashLatencyFromMSIRange>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e343      	b.n	800294c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022c4:	f000 fc4a 	bl	8002b5c <HAL_RCC_GetSysClockFreq>
 80022c8:	4602      	mov	r2, r0
 80022ca:	4b52      	ldr	r3, [pc, #328]	@ (8002414 <HAL_RCC_OscConfig+0x270>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	091b      	lsrs	r3, r3, #4
 80022d0:	f003 030f 	and.w	r3, r3, #15
 80022d4:	4950      	ldr	r1, [pc, #320]	@ (8002418 <HAL_RCC_OscConfig+0x274>)
 80022d6:	5ccb      	ldrb	r3, [r1, r3]
 80022d8:	f003 031f 	and.w	r3, r3, #31
 80022dc:	fa22 f303 	lsr.w	r3, r2, r3
 80022e0:	4a4e      	ldr	r2, [pc, #312]	@ (800241c <HAL_RCC_OscConfig+0x278>)
 80022e2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80022e4:	4b4e      	ldr	r3, [pc, #312]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff f9fd 	bl	80016e8 <HAL_InitTick>
 80022ee:	4603      	mov	r3, r0
 80022f0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80022f2:	7bfb      	ldrb	r3, [r7, #15]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d052      	beq.n	800239e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80022f8:	7bfb      	ldrb	r3, [r7, #15]
 80022fa:	e327      	b.n	800294c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d032      	beq.n	800236a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002304:	4b43      	ldr	r3, [pc, #268]	@ (8002414 <HAL_RCC_OscConfig+0x270>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a42      	ldr	r2, [pc, #264]	@ (8002414 <HAL_RCC_OscConfig+0x270>)
 800230a:	f043 0301 	orr.w	r3, r3, #1
 800230e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002310:	f7ff fa3a 	bl	8001788 <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002318:	f7ff fa36 	bl	8001788 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e310      	b.n	800294c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800232a:	4b3a      	ldr	r3, [pc, #232]	@ (8002414 <HAL_RCC_OscConfig+0x270>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0f0      	beq.n	8002318 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002336:	4b37      	ldr	r3, [pc, #220]	@ (8002414 <HAL_RCC_OscConfig+0x270>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a36      	ldr	r2, [pc, #216]	@ (8002414 <HAL_RCC_OscConfig+0x270>)
 800233c:	f043 0308 	orr.w	r3, r3, #8
 8002340:	6013      	str	r3, [r2, #0]
 8002342:	4b34      	ldr	r3, [pc, #208]	@ (8002414 <HAL_RCC_OscConfig+0x270>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	4931      	ldr	r1, [pc, #196]	@ (8002414 <HAL_RCC_OscConfig+0x270>)
 8002350:	4313      	orrs	r3, r2
 8002352:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002354:	4b2f      	ldr	r3, [pc, #188]	@ (8002414 <HAL_RCC_OscConfig+0x270>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	69db      	ldr	r3, [r3, #28]
 8002360:	021b      	lsls	r3, r3, #8
 8002362:	492c      	ldr	r1, [pc, #176]	@ (8002414 <HAL_RCC_OscConfig+0x270>)
 8002364:	4313      	orrs	r3, r2
 8002366:	604b      	str	r3, [r1, #4]
 8002368:	e01a      	b.n	80023a0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800236a:	4b2a      	ldr	r3, [pc, #168]	@ (8002414 <HAL_RCC_OscConfig+0x270>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a29      	ldr	r2, [pc, #164]	@ (8002414 <HAL_RCC_OscConfig+0x270>)
 8002370:	f023 0301 	bic.w	r3, r3, #1
 8002374:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002376:	f7ff fa07 	bl	8001788 <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800237c:	e008      	b.n	8002390 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800237e:	f7ff fa03 	bl	8001788 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e2dd      	b.n	800294c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002390:	4b20      	ldr	r3, [pc, #128]	@ (8002414 <HAL_RCC_OscConfig+0x270>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1f0      	bne.n	800237e <HAL_RCC_OscConfig+0x1da>
 800239c:	e000      	b.n	80023a0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800239e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d074      	beq.n	8002496 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	2b08      	cmp	r3, #8
 80023b0:	d005      	beq.n	80023be <HAL_RCC_OscConfig+0x21a>
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	2b0c      	cmp	r3, #12
 80023b6:	d10e      	bne.n	80023d6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	2b03      	cmp	r3, #3
 80023bc:	d10b      	bne.n	80023d6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023be:	4b15      	ldr	r3, [pc, #84]	@ (8002414 <HAL_RCC_OscConfig+0x270>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d064      	beq.n	8002494 <HAL_RCC_OscConfig+0x2f0>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d160      	bne.n	8002494 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e2ba      	b.n	800294c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023de:	d106      	bne.n	80023ee <HAL_RCC_OscConfig+0x24a>
 80023e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002414 <HAL_RCC_OscConfig+0x270>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a0b      	ldr	r2, [pc, #44]	@ (8002414 <HAL_RCC_OscConfig+0x270>)
 80023e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023ea:	6013      	str	r3, [r2, #0]
 80023ec:	e026      	b.n	800243c <HAL_RCC_OscConfig+0x298>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023f6:	d115      	bne.n	8002424 <HAL_RCC_OscConfig+0x280>
 80023f8:	4b06      	ldr	r3, [pc, #24]	@ (8002414 <HAL_RCC_OscConfig+0x270>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a05      	ldr	r2, [pc, #20]	@ (8002414 <HAL_RCC_OscConfig+0x270>)
 80023fe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002402:	6013      	str	r3, [r2, #0]
 8002404:	4b03      	ldr	r3, [pc, #12]	@ (8002414 <HAL_RCC_OscConfig+0x270>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a02      	ldr	r2, [pc, #8]	@ (8002414 <HAL_RCC_OscConfig+0x270>)
 800240a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800240e:	6013      	str	r3, [r2, #0]
 8002410:	e014      	b.n	800243c <HAL_RCC_OscConfig+0x298>
 8002412:	bf00      	nop
 8002414:	40021000 	.word	0x40021000
 8002418:	08008e64 	.word	0x08008e64
 800241c:	20000000 	.word	0x20000000
 8002420:	2000000c 	.word	0x2000000c
 8002424:	4ba0      	ldr	r3, [pc, #640]	@ (80026a8 <HAL_RCC_OscConfig+0x504>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a9f      	ldr	r2, [pc, #636]	@ (80026a8 <HAL_RCC_OscConfig+0x504>)
 800242a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800242e:	6013      	str	r3, [r2, #0]
 8002430:	4b9d      	ldr	r3, [pc, #628]	@ (80026a8 <HAL_RCC_OscConfig+0x504>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a9c      	ldr	r2, [pc, #624]	@ (80026a8 <HAL_RCC_OscConfig+0x504>)
 8002436:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800243a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d013      	beq.n	800246c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002444:	f7ff f9a0 	bl	8001788 <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800244c:	f7ff f99c 	bl	8001788 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b64      	cmp	r3, #100	@ 0x64
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e276      	b.n	800294c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800245e:	4b92      	ldr	r3, [pc, #584]	@ (80026a8 <HAL_RCC_OscConfig+0x504>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d0f0      	beq.n	800244c <HAL_RCC_OscConfig+0x2a8>
 800246a:	e014      	b.n	8002496 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800246c:	f7ff f98c 	bl	8001788 <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002474:	f7ff f988 	bl	8001788 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b64      	cmp	r3, #100	@ 0x64
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e262      	b.n	800294c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002486:	4b88      	ldr	r3, [pc, #544]	@ (80026a8 <HAL_RCC_OscConfig+0x504>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1f0      	bne.n	8002474 <HAL_RCC_OscConfig+0x2d0>
 8002492:	e000      	b.n	8002496 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002494:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d060      	beq.n	8002564 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	2b04      	cmp	r3, #4
 80024a6:	d005      	beq.n	80024b4 <HAL_RCC_OscConfig+0x310>
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	2b0c      	cmp	r3, #12
 80024ac:	d119      	bne.n	80024e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d116      	bne.n	80024e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024b4:	4b7c      	ldr	r3, [pc, #496]	@ (80026a8 <HAL_RCC_OscConfig+0x504>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d005      	beq.n	80024cc <HAL_RCC_OscConfig+0x328>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e23f      	b.n	800294c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024cc:	4b76      	ldr	r3, [pc, #472]	@ (80026a8 <HAL_RCC_OscConfig+0x504>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	061b      	lsls	r3, r3, #24
 80024da:	4973      	ldr	r1, [pc, #460]	@ (80026a8 <HAL_RCC_OscConfig+0x504>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024e0:	e040      	b.n	8002564 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d023      	beq.n	8002532 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024ea:	4b6f      	ldr	r3, [pc, #444]	@ (80026a8 <HAL_RCC_OscConfig+0x504>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a6e      	ldr	r2, [pc, #440]	@ (80026a8 <HAL_RCC_OscConfig+0x504>)
 80024f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f6:	f7ff f947 	bl	8001788 <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024fc:	e008      	b.n	8002510 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024fe:	f7ff f943 	bl	8001788 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e21d      	b.n	800294c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002510:	4b65      	ldr	r3, [pc, #404]	@ (80026a8 <HAL_RCC_OscConfig+0x504>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002518:	2b00      	cmp	r3, #0
 800251a:	d0f0      	beq.n	80024fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800251c:	4b62      	ldr	r3, [pc, #392]	@ (80026a8 <HAL_RCC_OscConfig+0x504>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	061b      	lsls	r3, r3, #24
 800252a:	495f      	ldr	r1, [pc, #380]	@ (80026a8 <HAL_RCC_OscConfig+0x504>)
 800252c:	4313      	orrs	r3, r2
 800252e:	604b      	str	r3, [r1, #4]
 8002530:	e018      	b.n	8002564 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002532:	4b5d      	ldr	r3, [pc, #372]	@ (80026a8 <HAL_RCC_OscConfig+0x504>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a5c      	ldr	r2, [pc, #368]	@ (80026a8 <HAL_RCC_OscConfig+0x504>)
 8002538:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800253c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253e:	f7ff f923 	bl	8001788 <HAL_GetTick>
 8002542:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002544:	e008      	b.n	8002558 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002546:	f7ff f91f 	bl	8001788 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e1f9      	b.n	800294c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002558:	4b53      	ldr	r3, [pc, #332]	@ (80026a8 <HAL_RCC_OscConfig+0x504>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1f0      	bne.n	8002546 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0308 	and.w	r3, r3, #8
 800256c:	2b00      	cmp	r3, #0
 800256e:	d03c      	beq.n	80025ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	695b      	ldr	r3, [r3, #20]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d01c      	beq.n	80025b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002578:	4b4b      	ldr	r3, [pc, #300]	@ (80026a8 <HAL_RCC_OscConfig+0x504>)
 800257a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800257e:	4a4a      	ldr	r2, [pc, #296]	@ (80026a8 <HAL_RCC_OscConfig+0x504>)
 8002580:	f043 0301 	orr.w	r3, r3, #1
 8002584:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002588:	f7ff f8fe 	bl	8001788 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002590:	f7ff f8fa 	bl	8001788 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e1d4      	b.n	800294c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025a2:	4b41      	ldr	r3, [pc, #260]	@ (80026a8 <HAL_RCC_OscConfig+0x504>)
 80025a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0ef      	beq.n	8002590 <HAL_RCC_OscConfig+0x3ec>
 80025b0:	e01b      	b.n	80025ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025b2:	4b3d      	ldr	r3, [pc, #244]	@ (80026a8 <HAL_RCC_OscConfig+0x504>)
 80025b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025b8:	4a3b      	ldr	r2, [pc, #236]	@ (80026a8 <HAL_RCC_OscConfig+0x504>)
 80025ba:	f023 0301 	bic.w	r3, r3, #1
 80025be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c2:	f7ff f8e1 	bl	8001788 <HAL_GetTick>
 80025c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025c8:	e008      	b.n	80025dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025ca:	f7ff f8dd 	bl	8001788 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e1b7      	b.n	800294c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025dc:	4b32      	ldr	r3, [pc, #200]	@ (80026a8 <HAL_RCC_OscConfig+0x504>)
 80025de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1ef      	bne.n	80025ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0304 	and.w	r3, r3, #4
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f000 80a6 	beq.w	8002744 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025f8:	2300      	movs	r3, #0
 80025fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80025fc:	4b2a      	ldr	r3, [pc, #168]	@ (80026a8 <HAL_RCC_OscConfig+0x504>)
 80025fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002600:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d10d      	bne.n	8002624 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002608:	4b27      	ldr	r3, [pc, #156]	@ (80026a8 <HAL_RCC_OscConfig+0x504>)
 800260a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800260c:	4a26      	ldr	r2, [pc, #152]	@ (80026a8 <HAL_RCC_OscConfig+0x504>)
 800260e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002612:	6593      	str	r3, [r2, #88]	@ 0x58
 8002614:	4b24      	ldr	r3, [pc, #144]	@ (80026a8 <HAL_RCC_OscConfig+0x504>)
 8002616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002618:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800261c:	60bb      	str	r3, [r7, #8]
 800261e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002620:	2301      	movs	r3, #1
 8002622:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002624:	4b21      	ldr	r3, [pc, #132]	@ (80026ac <HAL_RCC_OscConfig+0x508>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800262c:	2b00      	cmp	r3, #0
 800262e:	d118      	bne.n	8002662 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002630:	4b1e      	ldr	r3, [pc, #120]	@ (80026ac <HAL_RCC_OscConfig+0x508>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a1d      	ldr	r2, [pc, #116]	@ (80026ac <HAL_RCC_OscConfig+0x508>)
 8002636:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800263a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800263c:	f7ff f8a4 	bl	8001788 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002644:	f7ff f8a0 	bl	8001788 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e17a      	b.n	800294c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002656:	4b15      	ldr	r3, [pc, #84]	@ (80026ac <HAL_RCC_OscConfig+0x508>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0f0      	beq.n	8002644 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d108      	bne.n	800267c <HAL_RCC_OscConfig+0x4d8>
 800266a:	4b0f      	ldr	r3, [pc, #60]	@ (80026a8 <HAL_RCC_OscConfig+0x504>)
 800266c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002670:	4a0d      	ldr	r2, [pc, #52]	@ (80026a8 <HAL_RCC_OscConfig+0x504>)
 8002672:	f043 0301 	orr.w	r3, r3, #1
 8002676:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800267a:	e029      	b.n	80026d0 <HAL_RCC_OscConfig+0x52c>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	2b05      	cmp	r3, #5
 8002682:	d115      	bne.n	80026b0 <HAL_RCC_OscConfig+0x50c>
 8002684:	4b08      	ldr	r3, [pc, #32]	@ (80026a8 <HAL_RCC_OscConfig+0x504>)
 8002686:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800268a:	4a07      	ldr	r2, [pc, #28]	@ (80026a8 <HAL_RCC_OscConfig+0x504>)
 800268c:	f043 0304 	orr.w	r3, r3, #4
 8002690:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002694:	4b04      	ldr	r3, [pc, #16]	@ (80026a8 <HAL_RCC_OscConfig+0x504>)
 8002696:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800269a:	4a03      	ldr	r2, [pc, #12]	@ (80026a8 <HAL_RCC_OscConfig+0x504>)
 800269c:	f043 0301 	orr.w	r3, r3, #1
 80026a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026a4:	e014      	b.n	80026d0 <HAL_RCC_OscConfig+0x52c>
 80026a6:	bf00      	nop
 80026a8:	40021000 	.word	0x40021000
 80026ac:	40007000 	.word	0x40007000
 80026b0:	4b9c      	ldr	r3, [pc, #624]	@ (8002924 <HAL_RCC_OscConfig+0x780>)
 80026b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026b6:	4a9b      	ldr	r2, [pc, #620]	@ (8002924 <HAL_RCC_OscConfig+0x780>)
 80026b8:	f023 0301 	bic.w	r3, r3, #1
 80026bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026c0:	4b98      	ldr	r3, [pc, #608]	@ (8002924 <HAL_RCC_OscConfig+0x780>)
 80026c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026c6:	4a97      	ldr	r2, [pc, #604]	@ (8002924 <HAL_RCC_OscConfig+0x780>)
 80026c8:	f023 0304 	bic.w	r3, r3, #4
 80026cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d016      	beq.n	8002706 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d8:	f7ff f856 	bl	8001788 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026de:	e00a      	b.n	80026f6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026e0:	f7ff f852 	bl	8001788 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e12a      	b.n	800294c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026f6:	4b8b      	ldr	r3, [pc, #556]	@ (8002924 <HAL_RCC_OscConfig+0x780>)
 80026f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d0ed      	beq.n	80026e0 <HAL_RCC_OscConfig+0x53c>
 8002704:	e015      	b.n	8002732 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002706:	f7ff f83f 	bl	8001788 <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800270c:	e00a      	b.n	8002724 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800270e:	f7ff f83b 	bl	8001788 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	f241 3288 	movw	r2, #5000	@ 0x1388
 800271c:	4293      	cmp	r3, r2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e113      	b.n	800294c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002724:	4b7f      	ldr	r3, [pc, #508]	@ (8002924 <HAL_RCC_OscConfig+0x780>)
 8002726:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1ed      	bne.n	800270e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002732:	7ffb      	ldrb	r3, [r7, #31]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d105      	bne.n	8002744 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002738:	4b7a      	ldr	r3, [pc, #488]	@ (8002924 <HAL_RCC_OscConfig+0x780>)
 800273a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800273c:	4a79      	ldr	r2, [pc, #484]	@ (8002924 <HAL_RCC_OscConfig+0x780>)
 800273e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002742:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002748:	2b00      	cmp	r3, #0
 800274a:	f000 80fe 	beq.w	800294a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002752:	2b02      	cmp	r3, #2
 8002754:	f040 80d0 	bne.w	80028f8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002758:	4b72      	ldr	r3, [pc, #456]	@ (8002924 <HAL_RCC_OscConfig+0x780>)
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	f003 0203 	and.w	r2, r3, #3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002768:	429a      	cmp	r2, r3
 800276a:	d130      	bne.n	80027ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002776:	3b01      	subs	r3, #1
 8002778:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800277a:	429a      	cmp	r2, r3
 800277c:	d127      	bne.n	80027ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002788:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800278a:	429a      	cmp	r2, r3
 800278c:	d11f      	bne.n	80027ce <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002798:	2a07      	cmp	r2, #7
 800279a:	bf14      	ite	ne
 800279c:	2201      	movne	r2, #1
 800279e:	2200      	moveq	r2, #0
 80027a0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d113      	bne.n	80027ce <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027b0:	085b      	lsrs	r3, r3, #1
 80027b2:	3b01      	subs	r3, #1
 80027b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d109      	bne.n	80027ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c4:	085b      	lsrs	r3, r3, #1
 80027c6:	3b01      	subs	r3, #1
 80027c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d06e      	beq.n	80028ac <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	2b0c      	cmp	r3, #12
 80027d2:	d069      	beq.n	80028a8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80027d4:	4b53      	ldr	r3, [pc, #332]	@ (8002924 <HAL_RCC_OscConfig+0x780>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d105      	bne.n	80027ec <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80027e0:	4b50      	ldr	r3, [pc, #320]	@ (8002924 <HAL_RCC_OscConfig+0x780>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e0ad      	b.n	800294c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80027f0:	4b4c      	ldr	r3, [pc, #304]	@ (8002924 <HAL_RCC_OscConfig+0x780>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a4b      	ldr	r2, [pc, #300]	@ (8002924 <HAL_RCC_OscConfig+0x780>)
 80027f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027fa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027fc:	f7fe ffc4 	bl	8001788 <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002804:	f7fe ffc0 	bl	8001788 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e09a      	b.n	800294c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002816:	4b43      	ldr	r3, [pc, #268]	@ (8002924 <HAL_RCC_OscConfig+0x780>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1f0      	bne.n	8002804 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002822:	4b40      	ldr	r3, [pc, #256]	@ (8002924 <HAL_RCC_OscConfig+0x780>)
 8002824:	68da      	ldr	r2, [r3, #12]
 8002826:	4b40      	ldr	r3, [pc, #256]	@ (8002928 <HAL_RCC_OscConfig+0x784>)
 8002828:	4013      	ands	r3, r2
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002832:	3a01      	subs	r2, #1
 8002834:	0112      	lsls	r2, r2, #4
 8002836:	4311      	orrs	r1, r2
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800283c:	0212      	lsls	r2, r2, #8
 800283e:	4311      	orrs	r1, r2
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002844:	0852      	lsrs	r2, r2, #1
 8002846:	3a01      	subs	r2, #1
 8002848:	0552      	lsls	r2, r2, #21
 800284a:	4311      	orrs	r1, r2
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002850:	0852      	lsrs	r2, r2, #1
 8002852:	3a01      	subs	r2, #1
 8002854:	0652      	lsls	r2, r2, #25
 8002856:	4311      	orrs	r1, r2
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800285c:	0912      	lsrs	r2, r2, #4
 800285e:	0452      	lsls	r2, r2, #17
 8002860:	430a      	orrs	r2, r1
 8002862:	4930      	ldr	r1, [pc, #192]	@ (8002924 <HAL_RCC_OscConfig+0x780>)
 8002864:	4313      	orrs	r3, r2
 8002866:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002868:	4b2e      	ldr	r3, [pc, #184]	@ (8002924 <HAL_RCC_OscConfig+0x780>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a2d      	ldr	r2, [pc, #180]	@ (8002924 <HAL_RCC_OscConfig+0x780>)
 800286e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002872:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002874:	4b2b      	ldr	r3, [pc, #172]	@ (8002924 <HAL_RCC_OscConfig+0x780>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	4a2a      	ldr	r2, [pc, #168]	@ (8002924 <HAL_RCC_OscConfig+0x780>)
 800287a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800287e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002880:	f7fe ff82 	bl	8001788 <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002888:	f7fe ff7e 	bl	8001788 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e058      	b.n	800294c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800289a:	4b22      	ldr	r3, [pc, #136]	@ (8002924 <HAL_RCC_OscConfig+0x780>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d0f0      	beq.n	8002888 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028a6:	e050      	b.n	800294a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e04f      	b.n	800294c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002924 <HAL_RCC_OscConfig+0x780>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d148      	bne.n	800294a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80028b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002924 <HAL_RCC_OscConfig+0x780>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a19      	ldr	r2, [pc, #100]	@ (8002924 <HAL_RCC_OscConfig+0x780>)
 80028be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028c2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028c4:	4b17      	ldr	r3, [pc, #92]	@ (8002924 <HAL_RCC_OscConfig+0x780>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	4a16      	ldr	r2, [pc, #88]	@ (8002924 <HAL_RCC_OscConfig+0x780>)
 80028ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028d0:	f7fe ff5a 	bl	8001788 <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028d8:	f7fe ff56 	bl	8001788 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e030      	b.n	800294c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002924 <HAL_RCC_OscConfig+0x780>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d0f0      	beq.n	80028d8 <HAL_RCC_OscConfig+0x734>
 80028f6:	e028      	b.n	800294a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	2b0c      	cmp	r3, #12
 80028fc:	d023      	beq.n	8002946 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028fe:	4b09      	ldr	r3, [pc, #36]	@ (8002924 <HAL_RCC_OscConfig+0x780>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a08      	ldr	r2, [pc, #32]	@ (8002924 <HAL_RCC_OscConfig+0x780>)
 8002904:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002908:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290a:	f7fe ff3d 	bl	8001788 <HAL_GetTick>
 800290e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002910:	e00c      	b.n	800292c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002912:	f7fe ff39 	bl	8001788 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d905      	bls.n	800292c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e013      	b.n	800294c <HAL_RCC_OscConfig+0x7a8>
 8002924:	40021000 	.word	0x40021000
 8002928:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800292c:	4b09      	ldr	r3, [pc, #36]	@ (8002954 <HAL_RCC_OscConfig+0x7b0>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1ec      	bne.n	8002912 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002938:	4b06      	ldr	r3, [pc, #24]	@ (8002954 <HAL_RCC_OscConfig+0x7b0>)
 800293a:	68da      	ldr	r2, [r3, #12]
 800293c:	4905      	ldr	r1, [pc, #20]	@ (8002954 <HAL_RCC_OscConfig+0x7b0>)
 800293e:	4b06      	ldr	r3, [pc, #24]	@ (8002958 <HAL_RCC_OscConfig+0x7b4>)
 8002940:	4013      	ands	r3, r2
 8002942:	60cb      	str	r3, [r1, #12]
 8002944:	e001      	b.n	800294a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e000      	b.n	800294c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3720      	adds	r7, #32
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40021000 	.word	0x40021000
 8002958:	feeefffc 	.word	0xfeeefffc

0800295c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e0e7      	b.n	8002b40 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002970:	4b75      	ldr	r3, [pc, #468]	@ (8002b48 <HAL_RCC_ClockConfig+0x1ec>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	429a      	cmp	r2, r3
 800297c:	d910      	bls.n	80029a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800297e:	4b72      	ldr	r3, [pc, #456]	@ (8002b48 <HAL_RCC_ClockConfig+0x1ec>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f023 0207 	bic.w	r2, r3, #7
 8002986:	4970      	ldr	r1, [pc, #448]	@ (8002b48 <HAL_RCC_ClockConfig+0x1ec>)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	4313      	orrs	r3, r2
 800298c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800298e:	4b6e      	ldr	r3, [pc, #440]	@ (8002b48 <HAL_RCC_ClockConfig+0x1ec>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	429a      	cmp	r2, r3
 800299a:	d001      	beq.n	80029a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e0cf      	b.n	8002b40 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d010      	beq.n	80029ce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	4b66      	ldr	r3, [pc, #408]	@ (8002b4c <HAL_RCC_ClockConfig+0x1f0>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d908      	bls.n	80029ce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029bc:	4b63      	ldr	r3, [pc, #396]	@ (8002b4c <HAL_RCC_ClockConfig+0x1f0>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	4960      	ldr	r1, [pc, #384]	@ (8002b4c <HAL_RCC_ClockConfig+0x1f0>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d04c      	beq.n	8002a74 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	2b03      	cmp	r3, #3
 80029e0:	d107      	bne.n	80029f2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029e2:	4b5a      	ldr	r3, [pc, #360]	@ (8002b4c <HAL_RCC_ClockConfig+0x1f0>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d121      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e0a6      	b.n	8002b40 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d107      	bne.n	8002a0a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029fa:	4b54      	ldr	r3, [pc, #336]	@ (8002b4c <HAL_RCC_ClockConfig+0x1f0>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d115      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e09a      	b.n	8002b40 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d107      	bne.n	8002a22 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a12:	4b4e      	ldr	r3, [pc, #312]	@ (8002b4c <HAL_RCC_ClockConfig+0x1f0>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d109      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e08e      	b.n	8002b40 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a22:	4b4a      	ldr	r3, [pc, #296]	@ (8002b4c <HAL_RCC_ClockConfig+0x1f0>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e086      	b.n	8002b40 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a32:	4b46      	ldr	r3, [pc, #280]	@ (8002b4c <HAL_RCC_ClockConfig+0x1f0>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f023 0203 	bic.w	r2, r3, #3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	4943      	ldr	r1, [pc, #268]	@ (8002b4c <HAL_RCC_ClockConfig+0x1f0>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a44:	f7fe fea0 	bl	8001788 <HAL_GetTick>
 8002a48:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a4a:	e00a      	b.n	8002a62 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a4c:	f7fe fe9c 	bl	8001788 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e06e      	b.n	8002b40 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a62:	4b3a      	ldr	r3, [pc, #232]	@ (8002b4c <HAL_RCC_ClockConfig+0x1f0>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 020c 	and.w	r2, r3, #12
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d1eb      	bne.n	8002a4c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d010      	beq.n	8002aa2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	4b31      	ldr	r3, [pc, #196]	@ (8002b4c <HAL_RCC_ClockConfig+0x1f0>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d208      	bcs.n	8002aa2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a90:	4b2e      	ldr	r3, [pc, #184]	@ (8002b4c <HAL_RCC_ClockConfig+0x1f0>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	492b      	ldr	r1, [pc, #172]	@ (8002b4c <HAL_RCC_ClockConfig+0x1f0>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002aa2:	4b29      	ldr	r3, [pc, #164]	@ (8002b48 <HAL_RCC_ClockConfig+0x1ec>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0307 	and.w	r3, r3, #7
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d210      	bcs.n	8002ad2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab0:	4b25      	ldr	r3, [pc, #148]	@ (8002b48 <HAL_RCC_ClockConfig+0x1ec>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f023 0207 	bic.w	r2, r3, #7
 8002ab8:	4923      	ldr	r1, [pc, #140]	@ (8002b48 <HAL_RCC_ClockConfig+0x1ec>)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ac0:	4b21      	ldr	r3, [pc, #132]	@ (8002b48 <HAL_RCC_ClockConfig+0x1ec>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d001      	beq.n	8002ad2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e036      	b.n	8002b40 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0304 	and.w	r3, r3, #4
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d008      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ade:	4b1b      	ldr	r3, [pc, #108]	@ (8002b4c <HAL_RCC_ClockConfig+0x1f0>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	4918      	ldr	r1, [pc, #96]	@ (8002b4c <HAL_RCC_ClockConfig+0x1f0>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0308 	and.w	r3, r3, #8
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d009      	beq.n	8002b10 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002afc:	4b13      	ldr	r3, [pc, #76]	@ (8002b4c <HAL_RCC_ClockConfig+0x1f0>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	4910      	ldr	r1, [pc, #64]	@ (8002b4c <HAL_RCC_ClockConfig+0x1f0>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b10:	f000 f824 	bl	8002b5c <HAL_RCC_GetSysClockFreq>
 8002b14:	4602      	mov	r2, r0
 8002b16:	4b0d      	ldr	r3, [pc, #52]	@ (8002b4c <HAL_RCC_ClockConfig+0x1f0>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	091b      	lsrs	r3, r3, #4
 8002b1c:	f003 030f 	and.w	r3, r3, #15
 8002b20:	490b      	ldr	r1, [pc, #44]	@ (8002b50 <HAL_RCC_ClockConfig+0x1f4>)
 8002b22:	5ccb      	ldrb	r3, [r1, r3]
 8002b24:	f003 031f 	and.w	r3, r3, #31
 8002b28:	fa22 f303 	lsr.w	r3, r2, r3
 8002b2c:	4a09      	ldr	r2, [pc, #36]	@ (8002b54 <HAL_RCC_ClockConfig+0x1f8>)
 8002b2e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b30:	4b09      	ldr	r3, [pc, #36]	@ (8002b58 <HAL_RCC_ClockConfig+0x1fc>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7fe fdd7 	bl	80016e8 <HAL_InitTick>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	72fb      	strb	r3, [r7, #11]

  return status;
 8002b3e:	7afb      	ldrb	r3, [r7, #11]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40022000 	.word	0x40022000
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	08008e64 	.word	0x08008e64
 8002b54:	20000000 	.word	0x20000000
 8002b58:	2000000c 	.word	0x2000000c

08002b5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b089      	sub	sp, #36	@ 0x24
 8002b60:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b62:	2300      	movs	r3, #0
 8002b64:	61fb      	str	r3, [r7, #28]
 8002b66:	2300      	movs	r3, #0
 8002b68:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b6a:	4b3e      	ldr	r3, [pc, #248]	@ (8002c64 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 030c 	and.w	r3, r3, #12
 8002b72:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b74:	4b3b      	ldr	r3, [pc, #236]	@ (8002c64 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	f003 0303 	and.w	r3, r3, #3
 8002b7c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d005      	beq.n	8002b90 <HAL_RCC_GetSysClockFreq+0x34>
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	2b0c      	cmp	r3, #12
 8002b88:	d121      	bne.n	8002bce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d11e      	bne.n	8002bce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b90:	4b34      	ldr	r3, [pc, #208]	@ (8002c64 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0308 	and.w	r3, r3, #8
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d107      	bne.n	8002bac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b9c:	4b31      	ldr	r3, [pc, #196]	@ (8002c64 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ba2:	0a1b      	lsrs	r3, r3, #8
 8002ba4:	f003 030f 	and.w	r3, r3, #15
 8002ba8:	61fb      	str	r3, [r7, #28]
 8002baa:	e005      	b.n	8002bb8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002bac:	4b2d      	ldr	r3, [pc, #180]	@ (8002c64 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	091b      	lsrs	r3, r3, #4
 8002bb2:	f003 030f 	and.w	r3, r3, #15
 8002bb6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002bb8:	4a2b      	ldr	r2, [pc, #172]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d10d      	bne.n	8002be4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bcc:	e00a      	b.n	8002be4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	2b04      	cmp	r3, #4
 8002bd2:	d102      	bne.n	8002bda <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002bd4:	4b25      	ldr	r3, [pc, #148]	@ (8002c6c <HAL_RCC_GetSysClockFreq+0x110>)
 8002bd6:	61bb      	str	r3, [r7, #24]
 8002bd8:	e004      	b.n	8002be4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	2b08      	cmp	r3, #8
 8002bde:	d101      	bne.n	8002be4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002be0:	4b23      	ldr	r3, [pc, #140]	@ (8002c70 <HAL_RCC_GetSysClockFreq+0x114>)
 8002be2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	2b0c      	cmp	r3, #12
 8002be8:	d134      	bne.n	8002c54 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002bea:	4b1e      	ldr	r3, [pc, #120]	@ (8002c64 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	f003 0303 	and.w	r3, r3, #3
 8002bf2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d003      	beq.n	8002c02 <HAL_RCC_GetSysClockFreq+0xa6>
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	2b03      	cmp	r3, #3
 8002bfe:	d003      	beq.n	8002c08 <HAL_RCC_GetSysClockFreq+0xac>
 8002c00:	e005      	b.n	8002c0e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c02:	4b1a      	ldr	r3, [pc, #104]	@ (8002c6c <HAL_RCC_GetSysClockFreq+0x110>)
 8002c04:	617b      	str	r3, [r7, #20]
      break;
 8002c06:	e005      	b.n	8002c14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c08:	4b19      	ldr	r3, [pc, #100]	@ (8002c70 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c0a:	617b      	str	r3, [r7, #20]
      break;
 8002c0c:	e002      	b.n	8002c14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	617b      	str	r3, [r7, #20]
      break;
 8002c12:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c14:	4b13      	ldr	r3, [pc, #76]	@ (8002c64 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	091b      	lsrs	r3, r3, #4
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	3301      	adds	r3, #1
 8002c20:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c22:	4b10      	ldr	r3, [pc, #64]	@ (8002c64 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	0a1b      	lsrs	r3, r3, #8
 8002c28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	fb03 f202 	mul.w	r2, r3, r2
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c38:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c64 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	0e5b      	lsrs	r3, r3, #25
 8002c40:	f003 0303 	and.w	r3, r3, #3
 8002c44:	3301      	adds	r3, #1
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c52:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c54:	69bb      	ldr	r3, [r7, #24]
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3724      	adds	r7, #36	@ 0x24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	40021000 	.word	0x40021000
 8002c68:	08008e7c 	.word	0x08008e7c
 8002c6c:	00f42400 	.word	0x00f42400
 8002c70:	007a1200 	.word	0x007a1200

08002c74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c78:	4b03      	ldr	r3, [pc, #12]	@ (8002c88 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	20000000 	.word	0x20000000

08002c8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002c90:	f7ff fff0 	bl	8002c74 <HAL_RCC_GetHCLKFreq>
 8002c94:	4602      	mov	r2, r0
 8002c96:	4b06      	ldr	r3, [pc, #24]	@ (8002cb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	0a1b      	lsrs	r3, r3, #8
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	4904      	ldr	r1, [pc, #16]	@ (8002cb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ca2:	5ccb      	ldrb	r3, [r1, r3]
 8002ca4:	f003 031f 	and.w	r3, r3, #31
 8002ca8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	08008e74 	.word	0x08008e74

08002cb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002cbc:	f7ff ffda 	bl	8002c74 <HAL_RCC_GetHCLKFreq>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	4b06      	ldr	r3, [pc, #24]	@ (8002cdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	0adb      	lsrs	r3, r3, #11
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	4904      	ldr	r1, [pc, #16]	@ (8002ce0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002cce:	5ccb      	ldrb	r3, [r1, r3]
 8002cd0:	f003 031f 	and.w	r3, r3, #31
 8002cd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	08008e74 	.word	0x08008e74

08002ce4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002cec:	2300      	movs	r3, #0
 8002cee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002cf0:	4b2a      	ldr	r3, [pc, #168]	@ (8002d9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d003      	beq.n	8002d04 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002cfc:	f7ff f9ee 	bl	80020dc <HAL_PWREx_GetVoltageRange>
 8002d00:	6178      	str	r0, [r7, #20]
 8002d02:	e014      	b.n	8002d2e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d04:	4b25      	ldr	r3, [pc, #148]	@ (8002d9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d08:	4a24      	ldr	r2, [pc, #144]	@ (8002d9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d10:	4b22      	ldr	r3, [pc, #136]	@ (8002d9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d18:	60fb      	str	r3, [r7, #12]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d1c:	f7ff f9de 	bl	80020dc <HAL_PWREx_GetVoltageRange>
 8002d20:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d22:	4b1e      	ldr	r3, [pc, #120]	@ (8002d9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d26:	4a1d      	ldr	r2, [pc, #116]	@ (8002d9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d2c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d34:	d10b      	bne.n	8002d4e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2b80      	cmp	r3, #128	@ 0x80
 8002d3a:	d919      	bls.n	8002d70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002d40:	d902      	bls.n	8002d48 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d42:	2302      	movs	r3, #2
 8002d44:	613b      	str	r3, [r7, #16]
 8002d46:	e013      	b.n	8002d70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d48:	2301      	movs	r3, #1
 8002d4a:	613b      	str	r3, [r7, #16]
 8002d4c:	e010      	b.n	8002d70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b80      	cmp	r3, #128	@ 0x80
 8002d52:	d902      	bls.n	8002d5a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002d54:	2303      	movs	r3, #3
 8002d56:	613b      	str	r3, [r7, #16]
 8002d58:	e00a      	b.n	8002d70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2b80      	cmp	r3, #128	@ 0x80
 8002d5e:	d102      	bne.n	8002d66 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d60:	2302      	movs	r3, #2
 8002d62:	613b      	str	r3, [r7, #16]
 8002d64:	e004      	b.n	8002d70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2b70      	cmp	r3, #112	@ 0x70
 8002d6a:	d101      	bne.n	8002d70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d70:	4b0b      	ldr	r3, [pc, #44]	@ (8002da0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f023 0207 	bic.w	r2, r3, #7
 8002d78:	4909      	ldr	r1, [pc, #36]	@ (8002da0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d80:	4b07      	ldr	r3, [pc, #28]	@ (8002da0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0307 	and.w	r3, r3, #7
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d001      	beq.n	8002d92 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e000      	b.n	8002d94 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3718      	adds	r7, #24
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	40022000 	.word	0x40022000

08002da4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002dac:	2300      	movs	r3, #0
 8002dae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002db0:	2300      	movs	r3, #0
 8002db2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d041      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002dc4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002dc8:	d02a      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002dca:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002dce:	d824      	bhi.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002dd0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002dd4:	d008      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002dd6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002dda:	d81e      	bhi.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00a      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002de0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002de4:	d010      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002de6:	e018      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002de8:	4b86      	ldr	r3, [pc, #536]	@ (8003004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	4a85      	ldr	r2, [pc, #532]	@ (8003004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002df2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002df4:	e015      	b.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	3304      	adds	r3, #4
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f000 fabb 	bl	8003378 <RCCEx_PLLSAI1_Config>
 8002e02:	4603      	mov	r3, r0
 8002e04:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e06:	e00c      	b.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3320      	adds	r3, #32
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f000 fba6 	bl	8003560 <RCCEx_PLLSAI2_Config>
 8002e14:	4603      	mov	r3, r0
 8002e16:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e18:	e003      	b.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	74fb      	strb	r3, [r7, #19]
      break;
 8002e1e:	e000      	b.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002e20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e22:	7cfb      	ldrb	r3, [r7, #19]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d10b      	bne.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e28:	4b76      	ldr	r3, [pc, #472]	@ (8003004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e2e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e36:	4973      	ldr	r1, [pc, #460]	@ (8003004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002e3e:	e001      	b.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e40:	7cfb      	ldrb	r3, [r7, #19]
 8002e42:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d041      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e54:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002e58:	d02a      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002e5a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002e5e:	d824      	bhi.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002e60:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e64:	d008      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002e66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e6a:	d81e      	bhi.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00a      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002e70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e74:	d010      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002e76:	e018      	b.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e78:	4b62      	ldr	r3, [pc, #392]	@ (8003004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	4a61      	ldr	r2, [pc, #388]	@ (8003004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e82:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e84:	e015      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	3304      	adds	r3, #4
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f000 fa73 	bl	8003378 <RCCEx_PLLSAI1_Config>
 8002e92:	4603      	mov	r3, r0
 8002e94:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e96:	e00c      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	3320      	adds	r3, #32
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f000 fb5e 	bl	8003560 <RCCEx_PLLSAI2_Config>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ea8:	e003      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	74fb      	strb	r3, [r7, #19]
      break;
 8002eae:	e000      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002eb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002eb2:	7cfb      	ldrb	r3, [r7, #19]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10b      	bne.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002eb8:	4b52      	ldr	r3, [pc, #328]	@ (8003004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ebe:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ec6:	494f      	ldr	r1, [pc, #316]	@ (8003004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002ece:	e001      	b.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ed0:	7cfb      	ldrb	r3, [r7, #19]
 8002ed2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f000 80a0 	beq.w	8003022 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ee6:	4b47      	ldr	r3, [pc, #284]	@ (8003004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e000      	b.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00d      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002efc:	4b41      	ldr	r3, [pc, #260]	@ (8003004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002efe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f00:	4a40      	ldr	r2, [pc, #256]	@ (8003004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f06:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f08:	4b3e      	ldr	r3, [pc, #248]	@ (8003004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f10:	60bb      	str	r3, [r7, #8]
 8002f12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f14:	2301      	movs	r3, #1
 8002f16:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f18:	4b3b      	ldr	r3, [pc, #236]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a3a      	ldr	r2, [pc, #232]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f24:	f7fe fc30 	bl	8001788 <HAL_GetTick>
 8002f28:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f2a:	e009      	b.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f2c:	f7fe fc2c 	bl	8001788 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d902      	bls.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	74fb      	strb	r3, [r7, #19]
        break;
 8002f3e:	e005      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f40:	4b31      	ldr	r3, [pc, #196]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d0ef      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002f4c:	7cfb      	ldrb	r3, [r7, #19]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d15c      	bne.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f52:	4b2c      	ldr	r3, [pc, #176]	@ (8003004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f5c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d01f      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d019      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f70:	4b24      	ldr	r3, [pc, #144]	@ (8003004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f7a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f7c:	4b21      	ldr	r3, [pc, #132]	@ (8003004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f82:	4a20      	ldr	r2, [pc, #128]	@ (8003004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f8c:	4b1d      	ldr	r3, [pc, #116]	@ (8003004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f92:	4a1c      	ldr	r2, [pc, #112]	@ (8003004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f9c:	4a19      	ldr	r2, [pc, #100]	@ (8003004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d016      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fae:	f7fe fbeb 	bl	8001788 <HAL_GetTick>
 8002fb2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fb4:	e00b      	b.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fb6:	f7fe fbe7 	bl	8001788 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d902      	bls.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	74fb      	strb	r3, [r7, #19]
            break;
 8002fcc:	e006      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fce:	4b0d      	ldr	r3, [pc, #52]	@ (8003004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d0ec      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002fdc:	7cfb      	ldrb	r3, [r7, #19]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10c      	bne.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fe2:	4b08      	ldr	r3, [pc, #32]	@ (8003004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fe8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ff2:	4904      	ldr	r1, [pc, #16]	@ (8003004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002ffa:	e009      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ffc:	7cfb      	ldrb	r3, [r7, #19]
 8002ffe:	74bb      	strb	r3, [r7, #18]
 8003000:	e006      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003002:	bf00      	nop
 8003004:	40021000 	.word	0x40021000
 8003008:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800300c:	7cfb      	ldrb	r3, [r7, #19]
 800300e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003010:	7c7b      	ldrb	r3, [r7, #17]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d105      	bne.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003016:	4b9e      	ldr	r3, [pc, #632]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800301a:	4a9d      	ldr	r2, [pc, #628]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800301c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003020:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00a      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800302e:	4b98      	ldr	r3, [pc, #608]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003030:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003034:	f023 0203 	bic.w	r2, r3, #3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800303c:	4994      	ldr	r1, [pc, #592]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800303e:	4313      	orrs	r3, r2
 8003040:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00a      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003050:	4b8f      	ldr	r3, [pc, #572]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003056:	f023 020c 	bic.w	r2, r3, #12
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800305e:	498c      	ldr	r1, [pc, #560]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003060:	4313      	orrs	r3, r2
 8003062:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0304 	and.w	r3, r3, #4
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00a      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003072:	4b87      	ldr	r3, [pc, #540]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003074:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003078:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003080:	4983      	ldr	r1, [pc, #524]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003082:	4313      	orrs	r3, r2
 8003084:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0308 	and.w	r3, r3, #8
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00a      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003094:	4b7e      	ldr	r3, [pc, #504]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003096:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800309a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030a2:	497b      	ldr	r1, [pc, #492]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0310 	and.w	r3, r3, #16
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00a      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80030b6:	4b76      	ldr	r3, [pc, #472]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030c4:	4972      	ldr	r1, [pc, #456]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0320 	and.w	r3, r3, #32
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00a      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030d8:	4b6d      	ldr	r3, [pc, #436]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030de:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030e6:	496a      	ldr	r1, [pc, #424]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00a      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030fa:	4b65      	ldr	r3, [pc, #404]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003100:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003108:	4961      	ldr	r1, [pc, #388]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800310a:	4313      	orrs	r3, r2
 800310c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00a      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800311c:	4b5c      	ldr	r3, [pc, #368]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800311e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003122:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800312a:	4959      	ldr	r1, [pc, #356]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800312c:	4313      	orrs	r3, r2
 800312e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00a      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800313e:	4b54      	ldr	r3, [pc, #336]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003140:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003144:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800314c:	4950      	ldr	r1, [pc, #320]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800314e:	4313      	orrs	r3, r2
 8003150:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00a      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003160:	4b4b      	ldr	r3, [pc, #300]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003166:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800316e:	4948      	ldr	r1, [pc, #288]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003170:	4313      	orrs	r3, r2
 8003172:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00a      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003182:	4b43      	ldr	r3, [pc, #268]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003184:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003188:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003190:	493f      	ldr	r1, [pc, #252]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003192:	4313      	orrs	r3, r2
 8003194:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d028      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031a4:	4b3a      	ldr	r3, [pc, #232]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031aa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031b2:	4937      	ldr	r1, [pc, #220]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80031c2:	d106      	bne.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031c4:	4b32      	ldr	r3, [pc, #200]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	4a31      	ldr	r2, [pc, #196]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031ce:	60d3      	str	r3, [r2, #12]
 80031d0:	e011      	b.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031d6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80031da:	d10c      	bne.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	3304      	adds	r3, #4
 80031e0:	2101      	movs	r1, #1
 80031e2:	4618      	mov	r0, r3
 80031e4:	f000 f8c8 	bl	8003378 <RCCEx_PLLSAI1_Config>
 80031e8:	4603      	mov	r3, r0
 80031ea:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80031ec:	7cfb      	ldrb	r3, [r7, #19]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80031f2:	7cfb      	ldrb	r3, [r7, #19]
 80031f4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d028      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003202:	4b23      	ldr	r3, [pc, #140]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003204:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003208:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003210:	491f      	ldr	r1, [pc, #124]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003212:	4313      	orrs	r3, r2
 8003214:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800321c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003220:	d106      	bne.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003222:	4b1b      	ldr	r3, [pc, #108]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	4a1a      	ldr	r2, [pc, #104]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003228:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800322c:	60d3      	str	r3, [r2, #12]
 800322e:	e011      	b.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003234:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003238:	d10c      	bne.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	3304      	adds	r3, #4
 800323e:	2101      	movs	r1, #1
 8003240:	4618      	mov	r0, r3
 8003242:	f000 f899 	bl	8003378 <RCCEx_PLLSAI1_Config>
 8003246:	4603      	mov	r3, r0
 8003248:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800324a:	7cfb      	ldrb	r3, [r7, #19]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003250:	7cfb      	ldrb	r3, [r7, #19]
 8003252:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d02b      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003260:	4b0b      	ldr	r3, [pc, #44]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003262:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003266:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800326e:	4908      	ldr	r1, [pc, #32]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003270:	4313      	orrs	r3, r2
 8003272:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800327a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800327e:	d109      	bne.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003280:	4b03      	ldr	r3, [pc, #12]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	4a02      	ldr	r2, [pc, #8]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003286:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800328a:	60d3      	str	r3, [r2, #12]
 800328c:	e014      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800328e:	bf00      	nop
 8003290:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003298:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800329c:	d10c      	bne.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	3304      	adds	r3, #4
 80032a2:	2101      	movs	r1, #1
 80032a4:	4618      	mov	r0, r3
 80032a6:	f000 f867 	bl	8003378 <RCCEx_PLLSAI1_Config>
 80032aa:	4603      	mov	r3, r0
 80032ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032ae:	7cfb      	ldrb	r3, [r7, #19]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80032b4:	7cfb      	ldrb	r3, [r7, #19]
 80032b6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d02f      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032c4:	4b2b      	ldr	r3, [pc, #172]	@ (8003374 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ca:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80032d2:	4928      	ldr	r1, [pc, #160]	@ (8003374 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80032de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80032e2:	d10d      	bne.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3304      	adds	r3, #4
 80032e8:	2102      	movs	r1, #2
 80032ea:	4618      	mov	r0, r3
 80032ec:	f000 f844 	bl	8003378 <RCCEx_PLLSAI1_Config>
 80032f0:	4603      	mov	r3, r0
 80032f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032f4:	7cfb      	ldrb	r3, [r7, #19]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d014      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80032fa:	7cfb      	ldrb	r3, [r7, #19]
 80032fc:	74bb      	strb	r3, [r7, #18]
 80032fe:	e011      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003304:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003308:	d10c      	bne.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	3320      	adds	r3, #32
 800330e:	2102      	movs	r1, #2
 8003310:	4618      	mov	r0, r3
 8003312:	f000 f925 	bl	8003560 <RCCEx_PLLSAI2_Config>
 8003316:	4603      	mov	r3, r0
 8003318:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800331a:	7cfb      	ldrb	r3, [r7, #19]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003320:	7cfb      	ldrb	r3, [r7, #19]
 8003322:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00a      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003330:	4b10      	ldr	r3, [pc, #64]	@ (8003374 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003336:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800333e:	490d      	ldr	r1, [pc, #52]	@ (8003374 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003340:	4313      	orrs	r3, r2
 8003342:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00b      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003352:	4b08      	ldr	r3, [pc, #32]	@ (8003374 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003354:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003358:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003362:	4904      	ldr	r1, [pc, #16]	@ (8003374 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003364:	4313      	orrs	r3, r2
 8003366:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800336a:	7cbb      	ldrb	r3, [r7, #18]
}
 800336c:	4618      	mov	r0, r3
 800336e:	3718      	adds	r7, #24
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	40021000 	.word	0x40021000

08003378 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003382:	2300      	movs	r3, #0
 8003384:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003386:	4b75      	ldr	r3, [pc, #468]	@ (800355c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d018      	beq.n	80033c4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003392:	4b72      	ldr	r3, [pc, #456]	@ (800355c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	f003 0203 	and.w	r2, r3, #3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d10d      	bne.n	80033be <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
       ||
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d009      	beq.n	80033be <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80033aa:	4b6c      	ldr	r3, [pc, #432]	@ (800355c <RCCEx_PLLSAI1_Config+0x1e4>)
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	091b      	lsrs	r3, r3, #4
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	1c5a      	adds	r2, r3, #1
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
       ||
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d047      	beq.n	800344e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	73fb      	strb	r3, [r7, #15]
 80033c2:	e044      	b.n	800344e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2b03      	cmp	r3, #3
 80033ca:	d018      	beq.n	80033fe <RCCEx_PLLSAI1_Config+0x86>
 80033cc:	2b03      	cmp	r3, #3
 80033ce:	d825      	bhi.n	800341c <RCCEx_PLLSAI1_Config+0xa4>
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d002      	beq.n	80033da <RCCEx_PLLSAI1_Config+0x62>
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d009      	beq.n	80033ec <RCCEx_PLLSAI1_Config+0x74>
 80033d8:	e020      	b.n	800341c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80033da:	4b60      	ldr	r3, [pc, #384]	@ (800355c <RCCEx_PLLSAI1_Config+0x1e4>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d11d      	bne.n	8003422 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033ea:	e01a      	b.n	8003422 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80033ec:	4b5b      	ldr	r3, [pc, #364]	@ (800355c <RCCEx_PLLSAI1_Config+0x1e4>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d116      	bne.n	8003426 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033fc:	e013      	b.n	8003426 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80033fe:	4b57      	ldr	r3, [pc, #348]	@ (800355c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10f      	bne.n	800342a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800340a:	4b54      	ldr	r3, [pc, #336]	@ (800355c <RCCEx_PLLSAI1_Config+0x1e4>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d109      	bne.n	800342a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800341a:	e006      	b.n	800342a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	73fb      	strb	r3, [r7, #15]
      break;
 8003420:	e004      	b.n	800342c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003422:	bf00      	nop
 8003424:	e002      	b.n	800342c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003426:	bf00      	nop
 8003428:	e000      	b.n	800342c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800342a:	bf00      	nop
    }

    if(status == HAL_OK)
 800342c:	7bfb      	ldrb	r3, [r7, #15]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10d      	bne.n	800344e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003432:	4b4a      	ldr	r3, [pc, #296]	@ (800355c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6819      	ldr	r1, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	3b01      	subs	r3, #1
 8003444:	011b      	lsls	r3, r3, #4
 8003446:	430b      	orrs	r3, r1
 8003448:	4944      	ldr	r1, [pc, #272]	@ (800355c <RCCEx_PLLSAI1_Config+0x1e4>)
 800344a:	4313      	orrs	r3, r2
 800344c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800344e:	7bfb      	ldrb	r3, [r7, #15]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d17d      	bne.n	8003550 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003454:	4b41      	ldr	r3, [pc, #260]	@ (800355c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a40      	ldr	r2, [pc, #256]	@ (800355c <RCCEx_PLLSAI1_Config+0x1e4>)
 800345a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800345e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003460:	f7fe f992 	bl	8001788 <HAL_GetTick>
 8003464:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003466:	e009      	b.n	800347c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003468:	f7fe f98e 	bl	8001788 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d902      	bls.n	800347c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	73fb      	strb	r3, [r7, #15]
        break;
 800347a:	e005      	b.n	8003488 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800347c:	4b37      	ldr	r3, [pc, #220]	@ (800355c <RCCEx_PLLSAI1_Config+0x1e4>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1ef      	bne.n	8003468 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003488:	7bfb      	ldrb	r3, [r7, #15]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d160      	bne.n	8003550 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d111      	bne.n	80034b8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003494:	4b31      	ldr	r3, [pc, #196]	@ (800355c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800349c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6892      	ldr	r2, [r2, #8]
 80034a4:	0211      	lsls	r1, r2, #8
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	68d2      	ldr	r2, [r2, #12]
 80034aa:	0912      	lsrs	r2, r2, #4
 80034ac:	0452      	lsls	r2, r2, #17
 80034ae:	430a      	orrs	r2, r1
 80034b0:	492a      	ldr	r1, [pc, #168]	@ (800355c <RCCEx_PLLSAI1_Config+0x1e4>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	610b      	str	r3, [r1, #16]
 80034b6:	e027      	b.n	8003508 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d112      	bne.n	80034e4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034be:	4b27      	ldr	r3, [pc, #156]	@ (800355c <RCCEx_PLLSAI1_Config+0x1e4>)
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80034c6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6892      	ldr	r2, [r2, #8]
 80034ce:	0211      	lsls	r1, r2, #8
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	6912      	ldr	r2, [r2, #16]
 80034d4:	0852      	lsrs	r2, r2, #1
 80034d6:	3a01      	subs	r2, #1
 80034d8:	0552      	lsls	r2, r2, #21
 80034da:	430a      	orrs	r2, r1
 80034dc:	491f      	ldr	r1, [pc, #124]	@ (800355c <RCCEx_PLLSAI1_Config+0x1e4>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	610b      	str	r3, [r1, #16]
 80034e2:	e011      	b.n	8003508 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034e4:	4b1d      	ldr	r3, [pc, #116]	@ (800355c <RCCEx_PLLSAI1_Config+0x1e4>)
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80034ec:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	6892      	ldr	r2, [r2, #8]
 80034f4:	0211      	lsls	r1, r2, #8
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	6952      	ldr	r2, [r2, #20]
 80034fa:	0852      	lsrs	r2, r2, #1
 80034fc:	3a01      	subs	r2, #1
 80034fe:	0652      	lsls	r2, r2, #25
 8003500:	430a      	orrs	r2, r1
 8003502:	4916      	ldr	r1, [pc, #88]	@ (800355c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003504:	4313      	orrs	r3, r2
 8003506:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003508:	4b14      	ldr	r3, [pc, #80]	@ (800355c <RCCEx_PLLSAI1_Config+0x1e4>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a13      	ldr	r2, [pc, #76]	@ (800355c <RCCEx_PLLSAI1_Config+0x1e4>)
 800350e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003512:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003514:	f7fe f938 	bl	8001788 <HAL_GetTick>
 8003518:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800351a:	e009      	b.n	8003530 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800351c:	f7fe f934 	bl	8001788 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d902      	bls.n	8003530 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	73fb      	strb	r3, [r7, #15]
          break;
 800352e:	e005      	b.n	800353c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003530:	4b0a      	ldr	r3, [pc, #40]	@ (800355c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d0ef      	beq.n	800351c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800353c:	7bfb      	ldrb	r3, [r7, #15]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d106      	bne.n	8003550 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003542:	4b06      	ldr	r3, [pc, #24]	@ (800355c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003544:	691a      	ldr	r2, [r3, #16]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	4904      	ldr	r1, [pc, #16]	@ (800355c <RCCEx_PLLSAI1_Config+0x1e4>)
 800354c:	4313      	orrs	r3, r2
 800354e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003550:	7bfb      	ldrb	r3, [r7, #15]
}
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40021000 	.word	0x40021000

08003560 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800356a:	2300      	movs	r3, #0
 800356c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800356e:	4b6a      	ldr	r3, [pc, #424]	@ (8003718 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	f003 0303 	and.w	r3, r3, #3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d018      	beq.n	80035ac <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800357a:	4b67      	ldr	r3, [pc, #412]	@ (8003718 <RCCEx_PLLSAI2_Config+0x1b8>)
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	f003 0203 	and.w	r2, r3, #3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	429a      	cmp	r2, r3
 8003588:	d10d      	bne.n	80035a6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
       ||
 800358e:	2b00      	cmp	r3, #0
 8003590:	d009      	beq.n	80035a6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003592:	4b61      	ldr	r3, [pc, #388]	@ (8003718 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	091b      	lsrs	r3, r3, #4
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	1c5a      	adds	r2, r3, #1
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
       ||
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d047      	beq.n	8003636 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	73fb      	strb	r3, [r7, #15]
 80035aa:	e044      	b.n	8003636 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2b03      	cmp	r3, #3
 80035b2:	d018      	beq.n	80035e6 <RCCEx_PLLSAI2_Config+0x86>
 80035b4:	2b03      	cmp	r3, #3
 80035b6:	d825      	bhi.n	8003604 <RCCEx_PLLSAI2_Config+0xa4>
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d002      	beq.n	80035c2 <RCCEx_PLLSAI2_Config+0x62>
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d009      	beq.n	80035d4 <RCCEx_PLLSAI2_Config+0x74>
 80035c0:	e020      	b.n	8003604 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035c2:	4b55      	ldr	r3, [pc, #340]	@ (8003718 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d11d      	bne.n	800360a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035d2:	e01a      	b.n	800360a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80035d4:	4b50      	ldr	r3, [pc, #320]	@ (8003718 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d116      	bne.n	800360e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035e4:	e013      	b.n	800360e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80035e6:	4b4c      	ldr	r3, [pc, #304]	@ (8003718 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10f      	bne.n	8003612 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80035f2:	4b49      	ldr	r3, [pc, #292]	@ (8003718 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d109      	bne.n	8003612 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003602:	e006      	b.n	8003612 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	73fb      	strb	r3, [r7, #15]
      break;
 8003608:	e004      	b.n	8003614 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800360a:	bf00      	nop
 800360c:	e002      	b.n	8003614 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800360e:	bf00      	nop
 8003610:	e000      	b.n	8003614 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003612:	bf00      	nop
    }

    if(status == HAL_OK)
 8003614:	7bfb      	ldrb	r3, [r7, #15]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10d      	bne.n	8003636 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800361a:	4b3f      	ldr	r3, [pc, #252]	@ (8003718 <RCCEx_PLLSAI2_Config+0x1b8>)
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6819      	ldr	r1, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	3b01      	subs	r3, #1
 800362c:	011b      	lsls	r3, r3, #4
 800362e:	430b      	orrs	r3, r1
 8003630:	4939      	ldr	r1, [pc, #228]	@ (8003718 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003632:	4313      	orrs	r3, r2
 8003634:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003636:	7bfb      	ldrb	r3, [r7, #15]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d167      	bne.n	800370c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800363c:	4b36      	ldr	r3, [pc, #216]	@ (8003718 <RCCEx_PLLSAI2_Config+0x1b8>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a35      	ldr	r2, [pc, #212]	@ (8003718 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003642:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003646:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003648:	f7fe f89e 	bl	8001788 <HAL_GetTick>
 800364c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800364e:	e009      	b.n	8003664 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003650:	f7fe f89a 	bl	8001788 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d902      	bls.n	8003664 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	73fb      	strb	r3, [r7, #15]
        break;
 8003662:	e005      	b.n	8003670 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003664:	4b2c      	ldr	r3, [pc, #176]	@ (8003718 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1ef      	bne.n	8003650 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003670:	7bfb      	ldrb	r3, [r7, #15]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d14a      	bne.n	800370c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d111      	bne.n	80036a0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800367c:	4b26      	ldr	r3, [pc, #152]	@ (8003718 <RCCEx_PLLSAI2_Config+0x1b8>)
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003684:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	6892      	ldr	r2, [r2, #8]
 800368c:	0211      	lsls	r1, r2, #8
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	68d2      	ldr	r2, [r2, #12]
 8003692:	0912      	lsrs	r2, r2, #4
 8003694:	0452      	lsls	r2, r2, #17
 8003696:	430a      	orrs	r2, r1
 8003698:	491f      	ldr	r1, [pc, #124]	@ (8003718 <RCCEx_PLLSAI2_Config+0x1b8>)
 800369a:	4313      	orrs	r3, r2
 800369c:	614b      	str	r3, [r1, #20]
 800369e:	e011      	b.n	80036c4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80036a0:	4b1d      	ldr	r3, [pc, #116]	@ (8003718 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80036a8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	6892      	ldr	r2, [r2, #8]
 80036b0:	0211      	lsls	r1, r2, #8
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	6912      	ldr	r2, [r2, #16]
 80036b6:	0852      	lsrs	r2, r2, #1
 80036b8:	3a01      	subs	r2, #1
 80036ba:	0652      	lsls	r2, r2, #25
 80036bc:	430a      	orrs	r2, r1
 80036be:	4916      	ldr	r1, [pc, #88]	@ (8003718 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80036c4:	4b14      	ldr	r3, [pc, #80]	@ (8003718 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a13      	ldr	r2, [pc, #76]	@ (8003718 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d0:	f7fe f85a 	bl	8001788 <HAL_GetTick>
 80036d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80036d6:	e009      	b.n	80036ec <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80036d8:	f7fe f856 	bl	8001788 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d902      	bls.n	80036ec <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	73fb      	strb	r3, [r7, #15]
          break;
 80036ea:	e005      	b.n	80036f8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80036ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003718 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d0ef      	beq.n	80036d8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80036f8:	7bfb      	ldrb	r3, [r7, #15]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d106      	bne.n	800370c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80036fe:	4b06      	ldr	r3, [pc, #24]	@ (8003718 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003700:	695a      	ldr	r2, [r3, #20]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	4904      	ldr	r1, [pc, #16]	@ (8003718 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003708:	4313      	orrs	r3, r2
 800370a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800370c:	7bfb      	ldrb	r3, [r7, #15]
}
 800370e:	4618      	mov	r0, r3
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	40021000 	.word	0x40021000

0800371c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e095      	b.n	800385a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003732:	2b00      	cmp	r3, #0
 8003734:	d108      	bne.n	8003748 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800373e:	d009      	beq.n	8003754 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	61da      	str	r2, [r3, #28]
 8003746:	e005      	b.n	8003754 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d106      	bne.n	8003774 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f7fd faa6 	bl	8000cc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2202      	movs	r2, #2
 8003778:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800378a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003794:	d902      	bls.n	800379c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003796:	2300      	movs	r3, #0
 8003798:	60fb      	str	r3, [r7, #12]
 800379a:	e002      	b.n	80037a2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800379c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80037a0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80037aa:	d007      	beq.n	80037bc <HAL_SPI_Init+0xa0>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80037b4:	d002      	beq.n	80037bc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80037cc:	431a      	orrs	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	431a      	orrs	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	f003 0301 	and.w	r3, r3, #1
 80037e0:	431a      	orrs	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037ea:	431a      	orrs	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	69db      	ldr	r3, [r3, #28]
 80037f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80037f4:	431a      	orrs	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037fe:	ea42 0103 	orr.w	r1, r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003806:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	430a      	orrs	r2, r1
 8003810:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	0c1b      	lsrs	r3, r3, #16
 8003818:	f003 0204 	and.w	r2, r3, #4
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003820:	f003 0310 	and.w	r3, r3, #16
 8003824:	431a      	orrs	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800382a:	f003 0308 	and.w	r3, r3, #8
 800382e:	431a      	orrs	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003838:	ea42 0103 	orr.w	r1, r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	430a      	orrs	r2, r1
 8003848:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b088      	sub	sp, #32
 8003866:	af00      	add	r7, sp, #0
 8003868:	60f8      	str	r0, [r7, #12]
 800386a:	60b9      	str	r1, [r7, #8]
 800386c:	603b      	str	r3, [r7, #0]
 800386e:	4613      	mov	r3, r2
 8003870:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003872:	f7fd ff89 	bl	8001788 <HAL_GetTick>
 8003876:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003878:	88fb      	ldrh	r3, [r7, #6]
 800387a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003882:	b2db      	uxtb	r3, r3
 8003884:	2b01      	cmp	r3, #1
 8003886:	d001      	beq.n	800388c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003888:	2302      	movs	r3, #2
 800388a:	e15c      	b.n	8003b46 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d002      	beq.n	8003898 <HAL_SPI_Transmit+0x36>
 8003892:	88fb      	ldrh	r3, [r7, #6]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d101      	bne.n	800389c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e154      	b.n	8003b46 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d101      	bne.n	80038aa <HAL_SPI_Transmit+0x48>
 80038a6:	2302      	movs	r3, #2
 80038a8:	e14d      	b.n	8003b46 <HAL_SPI_Transmit+0x2e4>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2203      	movs	r2, #3
 80038b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	68ba      	ldr	r2, [r7, #8]
 80038c4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	88fa      	ldrh	r2, [r7, #6]
 80038ca:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	88fa      	ldrh	r2, [r7, #6]
 80038d0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038fc:	d10f      	bne.n	800391e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800390c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800391c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003928:	2b40      	cmp	r3, #64	@ 0x40
 800392a:	d007      	beq.n	800393c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800393a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003944:	d952      	bls.n	80039ec <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d002      	beq.n	8003954 <HAL_SPI_Transmit+0xf2>
 800394e:	8b7b      	ldrh	r3, [r7, #26]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d145      	bne.n	80039e0 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003958:	881a      	ldrh	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003964:	1c9a      	adds	r2, r3, #2
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800396e:	b29b      	uxth	r3, r3
 8003970:	3b01      	subs	r3, #1
 8003972:	b29a      	uxth	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003978:	e032      	b.n	80039e0 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	2b02      	cmp	r3, #2
 8003986:	d112      	bne.n	80039ae <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800398c:	881a      	ldrh	r2, [r3, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003998:	1c9a      	adds	r2, r3, #2
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	3b01      	subs	r3, #1
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80039ac:	e018      	b.n	80039e0 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039ae:	f7fd feeb 	bl	8001788 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d803      	bhi.n	80039c6 <HAL_SPI_Transmit+0x164>
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039c4:	d102      	bne.n	80039cc <HAL_SPI_Transmit+0x16a>
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d109      	bne.n	80039e0 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e0b2      	b.n	8003b46 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1c7      	bne.n	800397a <HAL_SPI_Transmit+0x118>
 80039ea:	e083      	b.n	8003af4 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d002      	beq.n	80039fa <HAL_SPI_Transmit+0x198>
 80039f4:	8b7b      	ldrh	r3, [r7, #26]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d177      	bne.n	8003aea <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d912      	bls.n	8003a2a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a08:	881a      	ldrh	r2, [r3, #0]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a14:	1c9a      	adds	r2, r3, #2
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	3b02      	subs	r3, #2
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003a28:	e05f      	b.n	8003aea <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	330c      	adds	r3, #12
 8003a34:	7812      	ldrb	r2, [r2, #0]
 8003a36:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a3c:	1c5a      	adds	r2, r3, #1
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003a50:	e04b      	b.n	8003aea <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d12b      	bne.n	8003ab8 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d912      	bls.n	8003a90 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a6e:	881a      	ldrh	r2, [r3, #0]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a7a:	1c9a      	adds	r2, r3, #2
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	3b02      	subs	r3, #2
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003a8e:	e02c      	b.n	8003aea <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	330c      	adds	r3, #12
 8003a9a:	7812      	ldrb	r2, [r2, #0]
 8003a9c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aa2:	1c5a      	adds	r2, r3, #1
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	b29a      	uxth	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003ab6:	e018      	b.n	8003aea <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ab8:	f7fd fe66 	bl	8001788 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d803      	bhi.n	8003ad0 <HAL_SPI_Transmit+0x26e>
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ace:	d102      	bne.n	8003ad6 <HAL_SPI_Transmit+0x274>
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d109      	bne.n	8003aea <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e02d      	b.n	8003b46 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1ae      	bne.n	8003a52 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003af4:	69fa      	ldr	r2, [r7, #28]
 8003af6:	6839      	ldr	r1, [r7, #0]
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f000 fa5b 	bl	8003fb4 <SPI_EndRxTxTransaction>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d002      	beq.n	8003b0a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2220      	movs	r2, #32
 8003b08:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10a      	bne.n	8003b28 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b12:	2300      	movs	r3, #0
 8003b14:	617b      	str	r3, [r7, #20]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	617b      	str	r3, [r7, #20]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	617b      	str	r3, [r7, #20]
 8003b26:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d001      	beq.n	8003b44 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e000      	b.n	8003b46 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003b44:	2300      	movs	r3, #0
  }
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3720      	adds	r7, #32
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
	...

08003b50 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b088      	sub	sp, #32
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10e      	bne.n	8003b90 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d009      	beq.n	8003b90 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d004      	beq.n	8003b90 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	4798      	blx	r3
    return;
 8003b8e:	e0ce      	b.n	8003d2e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d009      	beq.n	8003bae <HAL_SPI_IRQHandler+0x5e>
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d004      	beq.n	8003bae <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	4798      	blx	r3
    return;
 8003bac:	e0bf      	b.n	8003d2e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	f003 0320 	and.w	r3, r3, #32
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d10a      	bne.n	8003bce <HAL_SPI_IRQHandler+0x7e>
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d105      	bne.n	8003bce <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f000 80b0 	beq.w	8003d2e <HAL_SPI_IRQHandler+0x1de>
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	f003 0320 	and.w	r3, r3, #32
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 80aa 	beq.w	8003d2e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d023      	beq.n	8003c2c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	2b03      	cmp	r3, #3
 8003bee:	d011      	beq.n	8003c14 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bf4:	f043 0204 	orr.w	r2, r3, #4
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	617b      	str	r3, [r7, #20]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	617b      	str	r3, [r7, #20]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	617b      	str	r3, [r7, #20]
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	e00b      	b.n	8003c2c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c14:	2300      	movs	r3, #0
 8003c16:	613b      	str	r3, [r7, #16]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	613b      	str	r3, [r7, #16]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	613b      	str	r3, [r7, #16]
 8003c28:	693b      	ldr	r3, [r7, #16]
        return;
 8003c2a:	e080      	b.n	8003d2e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	f003 0320 	and.w	r3, r3, #32
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d014      	beq.n	8003c60 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c3a:	f043 0201 	orr.w	r2, r3, #1
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003c42:	2300      	movs	r3, #0
 8003c44:	60fb      	str	r3, [r7, #12]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	60fb      	str	r3, [r7, #12]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c5c:	601a      	str	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00c      	beq.n	8003c84 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c6e:	f043 0208 	orr.w	r2, r3, #8
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003c76:	2300      	movs	r3, #0
 8003c78:	60bb      	str	r3, [r7, #8]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	60bb      	str	r3, [r7, #8]
 8003c82:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d04f      	beq.n	8003d2c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685a      	ldr	r2, [r3, #4]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003c9a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d104      	bne.n	8003cb8 <HAL_SPI_IRQHandler+0x168>
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	f003 0301 	and.w	r3, r3, #1
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d034      	beq.n	8003d22 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f022 0203 	bic.w	r2, r2, #3
 8003cc6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d011      	beq.n	8003cf4 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cd4:	4a17      	ldr	r2, [pc, #92]	@ (8003d34 <HAL_SPI_IRQHandler+0x1e4>)
 8003cd6:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7fd feae 	bl	8001a3e <HAL_DMA_Abort_IT>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d005      	beq.n	8003cf4 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cec:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d016      	beq.n	8003d2a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d00:	4a0c      	ldr	r2, [pc, #48]	@ (8003d34 <HAL_SPI_IRQHandler+0x1e4>)
 8003d02:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7fd fe98 	bl	8001a3e <HAL_DMA_Abort_IT>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00a      	beq.n	8003d2a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d18:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8003d20:	e003      	b.n	8003d2a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f808 	bl	8003d38 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003d28:	e000      	b.n	8003d2c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8003d2a:	bf00      	nop
    return;
 8003d2c:	bf00      	nop
  }
}
 8003d2e:	3720      	adds	r7, #32
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	08003d4d 	.word	0x08003d4d

08003d38 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d58:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f7ff ffe5 	bl	8003d38 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003d6e:	bf00      	nop
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
	...

08003d78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b088      	sub	sp, #32
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	603b      	str	r3, [r7, #0]
 8003d84:	4613      	mov	r3, r2
 8003d86:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d88:	f7fd fcfe 	bl	8001788 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d90:	1a9b      	subs	r3, r3, r2
 8003d92:	683a      	ldr	r2, [r7, #0]
 8003d94:	4413      	add	r3, r2
 8003d96:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d98:	f7fd fcf6 	bl	8001788 <HAL_GetTick>
 8003d9c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d9e:	4b39      	ldr	r3, [pc, #228]	@ (8003e84 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	015b      	lsls	r3, r3, #5
 8003da4:	0d1b      	lsrs	r3, r3, #20
 8003da6:	69fa      	ldr	r2, [r7, #28]
 8003da8:	fb02 f303 	mul.w	r3, r2, r3
 8003dac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dae:	e054      	b.n	8003e5a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003db6:	d050      	beq.n	8003e5a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003db8:	f7fd fce6 	bl	8001788 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	69fa      	ldr	r2, [r7, #28]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d902      	bls.n	8003dce <SPI_WaitFlagStateUntilTimeout+0x56>
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d13d      	bne.n	8003e4a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003ddc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003de6:	d111      	bne.n	8003e0c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003df0:	d004      	beq.n	8003dfc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dfa:	d107      	bne.n	8003e0c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e0a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e14:	d10f      	bne.n	8003e36 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e24:	601a      	str	r2, [r3, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e017      	b.n	8003e7a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d101      	bne.n	8003e54 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e50:	2300      	movs	r3, #0
 8003e52:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	3b01      	subs	r3, #1
 8003e58:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	689a      	ldr	r2, [r3, #8]
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	4013      	ands	r3, r2
 8003e64:	68ba      	ldr	r2, [r7, #8]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	bf0c      	ite	eq
 8003e6a:	2301      	moveq	r3, #1
 8003e6c:	2300      	movne	r3, #0
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	461a      	mov	r2, r3
 8003e72:	79fb      	ldrb	r3, [r7, #7]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d19b      	bne.n	8003db0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3720      	adds	r7, #32
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	20000000 	.word	0x20000000

08003e88 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b08a      	sub	sp, #40	@ 0x28
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
 8003e94:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003e96:	2300      	movs	r3, #0
 8003e98:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003e9a:	f7fd fc75 	bl	8001788 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ea2:	1a9b      	subs	r3, r3, r2
 8003ea4:	683a      	ldr	r2, [r7, #0]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003eaa:	f7fd fc6d 	bl	8001788 <HAL_GetTick>
 8003eae:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	330c      	adds	r3, #12
 8003eb6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003eb8:	4b3d      	ldr	r3, [pc, #244]	@ (8003fb0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4413      	add	r3, r2
 8003ec2:	00da      	lsls	r2, r3, #3
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	0d1b      	lsrs	r3, r3, #20
 8003ec8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eca:	fb02 f303 	mul.w	r3, r2, r3
 8003ece:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003ed0:	e060      	b.n	8003f94 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003ed8:	d107      	bne.n	8003eea <SPI_WaitFifoStateUntilTimeout+0x62>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d104      	bne.n	8003eea <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003ee8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ef0:	d050      	beq.n	8003f94 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ef2:	f7fd fc49 	bl	8001788 <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	6a3b      	ldr	r3, [r7, #32]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d902      	bls.n	8003f08 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d13d      	bne.n	8003f84 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	685a      	ldr	r2, [r3, #4]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003f16:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f20:	d111      	bne.n	8003f46 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f2a:	d004      	beq.n	8003f36 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f34:	d107      	bne.n	8003f46 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f44:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f4e:	d10f      	bne.n	8003f70 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f5e:	601a      	str	r2, [r3, #0]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f6e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e010      	b.n	8003fa6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	3b01      	subs	r3, #1
 8003f92:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689a      	ldr	r2, [r3, #8]
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d196      	bne.n	8003ed2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3728      	adds	r7, #40	@ 0x28
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	20000000 	.word	0x20000000

08003fb4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af02      	add	r7, sp, #8
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	9300      	str	r3, [sp, #0]
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f7ff ff5b 	bl	8003e88 <SPI_WaitFifoStateUntilTimeout>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d007      	beq.n	8003fe8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fdc:	f043 0220 	orr.w	r2, r3, #32
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e027      	b.n	8004038 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	9300      	str	r3, [sp, #0]
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	2180      	movs	r1, #128	@ 0x80
 8003ff2:	68f8      	ldr	r0, [r7, #12]
 8003ff4:	f7ff fec0 	bl	8003d78 <SPI_WaitFlagStateUntilTimeout>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d007      	beq.n	800400e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004002:	f043 0220 	orr.w	r2, r3, #32
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e014      	b.n	8004038 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	9300      	str	r3, [sp, #0]
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	2200      	movs	r2, #0
 8004016:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f7ff ff34 	bl	8003e88 <SPI_WaitFifoStateUntilTimeout>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d007      	beq.n	8004036 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800402a:	f043 0220 	orr.w	r2, r3, #32
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e000      	b.n	8004038 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e040      	b.n	80040d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004056:	2b00      	cmp	r3, #0
 8004058:	d106      	bne.n	8004068 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7fc ffe0 	bl	8001028 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2224      	movs	r2, #36	@ 0x24
 800406c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f022 0201 	bic.w	r2, r2, #1
 800407c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004082:	2b00      	cmp	r3, #0
 8004084:	d002      	beq.n	800408c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 fedc 	bl	8004e44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 fc21 	bl	80048d4 <UART_SetConfig>
 8004092:	4603      	mov	r3, r0
 8004094:	2b01      	cmp	r3, #1
 8004096:	d101      	bne.n	800409c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e01b      	b.n	80040d4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80040aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	689a      	ldr	r2, [r3, #8]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80040ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f042 0201 	orr.w	r2, r2, #1
 80040ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 ff5b 	bl	8004f88 <UART_CheckIdleState>
 80040d2:	4603      	mov	r3, r0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3708      	adds	r7, #8
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b08a      	sub	sp, #40	@ 0x28
 80040e0:	af02      	add	r7, sp, #8
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	603b      	str	r3, [r7, #0]
 80040e8:	4613      	mov	r3, r2
 80040ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040f0:	2b20      	cmp	r3, #32
 80040f2:	d177      	bne.n	80041e4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d002      	beq.n	8004100 <HAL_UART_Transmit+0x24>
 80040fa:	88fb      	ldrh	r3, [r7, #6]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d101      	bne.n	8004104 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e070      	b.n	80041e6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2221      	movs	r2, #33	@ 0x21
 8004110:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004112:	f7fd fb39 	bl	8001788 <HAL_GetTick>
 8004116:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	88fa      	ldrh	r2, [r7, #6]
 800411c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	88fa      	ldrh	r2, [r7, #6]
 8004124:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004130:	d108      	bne.n	8004144 <HAL_UART_Transmit+0x68>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d104      	bne.n	8004144 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800413a:	2300      	movs	r3, #0
 800413c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	61bb      	str	r3, [r7, #24]
 8004142:	e003      	b.n	800414c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004148:	2300      	movs	r3, #0
 800414a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800414c:	e02f      	b.n	80041ae <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	9300      	str	r3, [sp, #0]
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	2200      	movs	r2, #0
 8004156:	2180      	movs	r1, #128	@ 0x80
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f000 ffbd 	bl	80050d8 <UART_WaitOnFlagUntilTimeout>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d004      	beq.n	800416e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2220      	movs	r2, #32
 8004168:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e03b      	b.n	80041e6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10b      	bne.n	800418c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	881a      	ldrh	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004180:	b292      	uxth	r2, r2
 8004182:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	3302      	adds	r3, #2
 8004188:	61bb      	str	r3, [r7, #24]
 800418a:	e007      	b.n	800419c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	781a      	ldrb	r2, [r3, #0]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	3301      	adds	r3, #1
 800419a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	3b01      	subs	r3, #1
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1c9      	bne.n	800414e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	9300      	str	r3, [sp, #0]
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	2200      	movs	r2, #0
 80041c2:	2140      	movs	r1, #64	@ 0x40
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f000 ff87 	bl	80050d8 <UART_WaitOnFlagUntilTimeout>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d004      	beq.n	80041da <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2220      	movs	r2, #32
 80041d4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e005      	b.n	80041e6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2220      	movs	r2, #32
 80041de:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80041e0:	2300      	movs	r3, #0
 80041e2:	e000      	b.n	80041e6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80041e4:	2302      	movs	r3, #2
  }
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3720      	adds	r7, #32
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
	...

080041f0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b08a      	sub	sp, #40	@ 0x28
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	4613      	mov	r3, r2
 80041fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004204:	2b20      	cmp	r3, #32
 8004206:	d137      	bne.n	8004278 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d002      	beq.n	8004214 <HAL_UART_Receive_IT+0x24>
 800420e:	88fb      	ldrh	r3, [r7, #6]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d101      	bne.n	8004218 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e030      	b.n	800427a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a18      	ldr	r2, [pc, #96]	@ (8004284 <HAL_UART_Receive_IT+0x94>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d01f      	beq.n	8004268 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d018      	beq.n	8004268 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	e853 3f00 	ldrex	r3, [r3]
 8004242:	613b      	str	r3, [r7, #16]
   return(result);
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800424a:	627b      	str	r3, [r7, #36]	@ 0x24
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	461a      	mov	r2, r3
 8004252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004254:	623b      	str	r3, [r7, #32]
 8004256:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004258:	69f9      	ldr	r1, [r7, #28]
 800425a:	6a3a      	ldr	r2, [r7, #32]
 800425c:	e841 2300 	strex	r3, r2, [r1]
 8004260:	61bb      	str	r3, [r7, #24]
   return(result);
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1e6      	bne.n	8004236 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004268:	88fb      	ldrh	r3, [r7, #6]
 800426a:	461a      	mov	r2, r3
 800426c:	68b9      	ldr	r1, [r7, #8]
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f000 ffa0 	bl	80051b4 <UART_Start_Receive_IT>
 8004274:	4603      	mov	r3, r0
 8004276:	e000      	b.n	800427a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004278:	2302      	movs	r3, #2
  }
}
 800427a:	4618      	mov	r0, r3
 800427c:	3728      	adds	r7, #40	@ 0x28
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	40008000 	.word	0x40008000

08004288 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b0ba      	sub	sp, #232	@ 0xe8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80042ae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80042b2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80042b6:	4013      	ands	r3, r2
 80042b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80042bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d115      	bne.n	80042f0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80042c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042c8:	f003 0320 	and.w	r3, r3, #32
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00f      	beq.n	80042f0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80042d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042d4:	f003 0320 	and.w	r3, r3, #32
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d009      	beq.n	80042f0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f000 82ca 	beq.w	800487a <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	4798      	blx	r3
      }
      return;
 80042ee:	e2c4      	b.n	800487a <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80042f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f000 8117 	beq.w	8004528 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80042fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b00      	cmp	r3, #0
 8004304:	d106      	bne.n	8004314 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004306:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800430a:	4b85      	ldr	r3, [pc, #532]	@ (8004520 <HAL_UART_IRQHandler+0x298>)
 800430c:	4013      	ands	r3, r2
 800430e:	2b00      	cmp	r3, #0
 8004310:	f000 810a 	beq.w	8004528 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	2b00      	cmp	r3, #0
 800431e:	d011      	beq.n	8004344 <HAL_UART_IRQHandler+0xbc>
 8004320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004324:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00b      	beq.n	8004344 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2201      	movs	r2, #1
 8004332:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800433a:	f043 0201 	orr.w	r2, r3, #1
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004348:	f003 0302 	and.w	r3, r3, #2
 800434c:	2b00      	cmp	r3, #0
 800434e:	d011      	beq.n	8004374 <HAL_UART_IRQHandler+0xec>
 8004350:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00b      	beq.n	8004374 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2202      	movs	r2, #2
 8004362:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800436a:	f043 0204 	orr.w	r2, r3, #4
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004378:	f003 0304 	and.w	r3, r3, #4
 800437c:	2b00      	cmp	r3, #0
 800437e:	d011      	beq.n	80043a4 <HAL_UART_IRQHandler+0x11c>
 8004380:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004384:	f003 0301 	and.w	r3, r3, #1
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00b      	beq.n	80043a4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2204      	movs	r2, #4
 8004392:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800439a:	f043 0202 	orr.w	r2, r3, #2
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80043a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043a8:	f003 0308 	and.w	r3, r3, #8
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d017      	beq.n	80043e0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80043b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043b4:	f003 0320 	and.w	r3, r3, #32
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d105      	bne.n	80043c8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80043bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043c0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00b      	beq.n	80043e0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2208      	movs	r2, #8
 80043ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043d6:	f043 0208 	orr.w	r2, r3, #8
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80043e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d012      	beq.n	8004412 <HAL_UART_IRQHandler+0x18a>
 80043ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00c      	beq.n	8004412 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004400:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004408:	f043 0220 	orr.w	r2, r3, #32
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004418:	2b00      	cmp	r3, #0
 800441a:	f000 8230 	beq.w	800487e <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800441e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004422:	f003 0320 	and.w	r3, r3, #32
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00d      	beq.n	8004446 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800442a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800442e:	f003 0320 	and.w	r3, r3, #32
 8004432:	2b00      	cmp	r3, #0
 8004434:	d007      	beq.n	8004446 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800443a:	2b00      	cmp	r3, #0
 800443c:	d003      	beq.n	8004446 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800444c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800445a:	2b40      	cmp	r3, #64	@ 0x40
 800445c:	d005      	beq.n	800446a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800445e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004462:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004466:	2b00      	cmp	r3, #0
 8004468:	d04f      	beq.n	800450a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 ff68 	bl	8005340 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800447a:	2b40      	cmp	r3, #64	@ 0x40
 800447c:	d141      	bne.n	8004502 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	3308      	adds	r3, #8
 8004484:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004488:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800448c:	e853 3f00 	ldrex	r3, [r3]
 8004490:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004494:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004498:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800449c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	3308      	adds	r3, #8
 80044a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80044aa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80044ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80044b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80044ba:	e841 2300 	strex	r3, r2, [r1]
 80044be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80044c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1d9      	bne.n	800447e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d013      	beq.n	80044fa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044d6:	4a13      	ldr	r2, [pc, #76]	@ (8004524 <HAL_UART_IRQHandler+0x29c>)
 80044d8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044de:	4618      	mov	r0, r3
 80044e0:	f7fd faad 	bl	8001a3e <HAL_DMA_Abort_IT>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d017      	beq.n	800451a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80044f4:	4610      	mov	r0, r2
 80044f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044f8:	e00f      	b.n	800451a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 f9d4 	bl	80048a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004500:	e00b      	b.n	800451a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 f9d0 	bl	80048a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004508:	e007      	b.n	800451a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f9cc 	bl	80048a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004518:	e1b1      	b.n	800487e <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800451a:	bf00      	nop
    return;
 800451c:	e1af      	b.n	800487e <HAL_UART_IRQHandler+0x5f6>
 800451e:	bf00      	nop
 8004520:	04000120 	.word	0x04000120
 8004524:	08005409 	.word	0x08005409

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800452c:	2b01      	cmp	r3, #1
 800452e:	f040 816a 	bne.w	8004806 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004536:	f003 0310 	and.w	r3, r3, #16
 800453a:	2b00      	cmp	r3, #0
 800453c:	f000 8163 	beq.w	8004806 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004544:	f003 0310 	and.w	r3, r3, #16
 8004548:	2b00      	cmp	r3, #0
 800454a:	f000 815c 	beq.w	8004806 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2210      	movs	r2, #16
 8004554:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004560:	2b40      	cmp	r3, #64	@ 0x40
 8004562:	f040 80d4 	bne.w	800470e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004572:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004576:	2b00      	cmp	r3, #0
 8004578:	f000 80ad 	beq.w	80046d6 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004582:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004586:	429a      	cmp	r2, r3
 8004588:	f080 80a5 	bcs.w	80046d6 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004592:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0320 	and.w	r3, r3, #32
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	f040 8086 	bne.w	80046b4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80045b4:	e853 3f00 	ldrex	r3, [r3]
 80045b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80045bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80045c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	461a      	mov	r2, r3
 80045ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80045d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80045d6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045da:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80045de:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80045e2:	e841 2300 	strex	r3, r2, [r1]
 80045e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80045ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d1da      	bne.n	80045a8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	3308      	adds	r3, #8
 80045f8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045fc:	e853 3f00 	ldrex	r3, [r3]
 8004600:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004602:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004604:	f023 0301 	bic.w	r3, r3, #1
 8004608:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	3308      	adds	r3, #8
 8004612:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004616:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800461a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800461c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800461e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004622:	e841 2300 	strex	r3, r2, [r1]
 8004626:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004628:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1e1      	bne.n	80045f2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	3308      	adds	r3, #8
 8004634:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004636:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004638:	e853 3f00 	ldrex	r3, [r3]
 800463c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800463e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004640:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004644:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	3308      	adds	r3, #8
 800464e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004652:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004654:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004656:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004658:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800465a:	e841 2300 	strex	r3, r2, [r1]
 800465e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004660:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1e3      	bne.n	800462e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2220      	movs	r2, #32
 800466a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800467c:	e853 3f00 	ldrex	r3, [r3]
 8004680:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004682:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004684:	f023 0310 	bic.w	r3, r3, #16
 8004688:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	461a      	mov	r2, r3
 8004692:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004696:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004698:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800469c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800469e:	e841 2300 	strex	r3, r2, [r1]
 80046a2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80046a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1e4      	bne.n	8004674 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7fd f987 	bl	80019c2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2202      	movs	r2, #2
 80046b8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	4619      	mov	r1, r3
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f8f4 	bl	80048bc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80046d4:	e0d5      	b.n	8004882 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80046dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80046e0:	429a      	cmp	r2, r3
 80046e2:	f040 80ce 	bne.w	8004882 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0320 	and.w	r3, r3, #32
 80046f2:	2b20      	cmp	r3, #32
 80046f4:	f040 80c5 	bne.w	8004882 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2202      	movs	r2, #2
 80046fc:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004704:	4619      	mov	r1, r3
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 f8d8 	bl	80048bc <HAL_UARTEx_RxEventCallback>
      return;
 800470c:	e0b9      	b.n	8004882 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800471a:	b29b      	uxth	r3, r3
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004728:	b29b      	uxth	r3, r3
 800472a:	2b00      	cmp	r3, #0
 800472c:	f000 80ab 	beq.w	8004886 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8004730:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004734:	2b00      	cmp	r3, #0
 8004736:	f000 80a6 	beq.w	8004886 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004742:	e853 3f00 	ldrex	r3, [r3]
 8004746:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800474a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800474e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	461a      	mov	r2, r3
 8004758:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800475c:	647b      	str	r3, [r7, #68]	@ 0x44
 800475e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004760:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004762:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004764:	e841 2300 	strex	r3, r2, [r1]
 8004768:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800476a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1e4      	bne.n	800473a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	3308      	adds	r3, #8
 8004776:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800477a:	e853 3f00 	ldrex	r3, [r3]
 800477e:	623b      	str	r3, [r7, #32]
   return(result);
 8004780:	6a3b      	ldr	r3, [r7, #32]
 8004782:	f023 0301 	bic.w	r3, r3, #1
 8004786:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	3308      	adds	r3, #8
 8004790:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004794:	633a      	str	r2, [r7, #48]	@ 0x30
 8004796:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004798:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800479a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800479c:	e841 2300 	strex	r3, r2, [r1]
 80047a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80047a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1e3      	bne.n	8004770 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2220      	movs	r2, #32
 80047ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	e853 3f00 	ldrex	r3, [r3]
 80047c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f023 0310 	bic.w	r3, r3, #16
 80047d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	461a      	mov	r2, r3
 80047da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80047de:	61fb      	str	r3, [r7, #28]
 80047e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e2:	69b9      	ldr	r1, [r7, #24]
 80047e4:	69fa      	ldr	r2, [r7, #28]
 80047e6:	e841 2300 	strex	r3, r2, [r1]
 80047ea:	617b      	str	r3, [r7, #20]
   return(result);
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1e4      	bne.n	80047bc <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2202      	movs	r2, #2
 80047f6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80047f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80047fc:	4619      	mov	r1, r3
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 f85c 	bl	80048bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004804:	e03f      	b.n	8004886 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800480a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00e      	beq.n	8004830 <HAL_UART_IRQHandler+0x5a8>
 8004812:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004816:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d008      	beq.n	8004830 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004826:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 ffe9 	bl	8005800 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800482e:	e02d      	b.n	800488c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004834:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004838:	2b00      	cmp	r3, #0
 800483a:	d00e      	beq.n	800485a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800483c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004840:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004844:	2b00      	cmp	r3, #0
 8004846:	d008      	beq.n	800485a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800484c:	2b00      	cmp	r3, #0
 800484e:	d01c      	beq.n	800488a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	4798      	blx	r3
    }
    return;
 8004858:	e017      	b.n	800488a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800485a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800485e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004862:	2b00      	cmp	r3, #0
 8004864:	d012      	beq.n	800488c <HAL_UART_IRQHandler+0x604>
 8004866:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800486a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00c      	beq.n	800488c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 fdde 	bl	8005434 <UART_EndTransmit_IT>
    return;
 8004878:	e008      	b.n	800488c <HAL_UART_IRQHandler+0x604>
      return;
 800487a:	bf00      	nop
 800487c:	e006      	b.n	800488c <HAL_UART_IRQHandler+0x604>
    return;
 800487e:	bf00      	nop
 8004880:	e004      	b.n	800488c <HAL_UART_IRQHandler+0x604>
      return;
 8004882:	bf00      	nop
 8004884:	e002      	b.n	800488c <HAL_UART_IRQHandler+0x604>
      return;
 8004886:	bf00      	nop
 8004888:	e000      	b.n	800488c <HAL_UART_IRQHandler+0x604>
    return;
 800488a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800488c:	37e8      	adds	r7, #232	@ 0xe8
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop

08004894 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	460b      	mov	r3, r1
 80048c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048d8:	b08a      	sub	sp, #40	@ 0x28
 80048da:	af00      	add	r7, sp, #0
 80048dc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048de:	2300      	movs	r3, #0
 80048e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	689a      	ldr	r2, [r3, #8]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	431a      	orrs	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	431a      	orrs	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	69db      	ldr	r3, [r3, #28]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	4ba4      	ldr	r3, [pc, #656]	@ (8004b94 <UART_SetConfig+0x2c0>)
 8004904:	4013      	ands	r3, r2
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	6812      	ldr	r2, [r2, #0]
 800490a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800490c:	430b      	orrs	r3, r1
 800490e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	68da      	ldr	r2, [r3, #12]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	430a      	orrs	r2, r1
 8004924:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a99      	ldr	r2, [pc, #612]	@ (8004b98 <UART_SetConfig+0x2c4>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d004      	beq.n	8004940 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800493c:	4313      	orrs	r3, r2
 800493e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004950:	430a      	orrs	r2, r1
 8004952:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a90      	ldr	r2, [pc, #576]	@ (8004b9c <UART_SetConfig+0x2c8>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d126      	bne.n	80049ac <UART_SetConfig+0xd8>
 800495e:	4b90      	ldr	r3, [pc, #576]	@ (8004ba0 <UART_SetConfig+0x2cc>)
 8004960:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004964:	f003 0303 	and.w	r3, r3, #3
 8004968:	2b03      	cmp	r3, #3
 800496a:	d81b      	bhi.n	80049a4 <UART_SetConfig+0xd0>
 800496c:	a201      	add	r2, pc, #4	@ (adr r2, 8004974 <UART_SetConfig+0xa0>)
 800496e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004972:	bf00      	nop
 8004974:	08004985 	.word	0x08004985
 8004978:	08004995 	.word	0x08004995
 800497c:	0800498d 	.word	0x0800498d
 8004980:	0800499d 	.word	0x0800499d
 8004984:	2301      	movs	r3, #1
 8004986:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800498a:	e116      	b.n	8004bba <UART_SetConfig+0x2e6>
 800498c:	2302      	movs	r3, #2
 800498e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004992:	e112      	b.n	8004bba <UART_SetConfig+0x2e6>
 8004994:	2304      	movs	r3, #4
 8004996:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800499a:	e10e      	b.n	8004bba <UART_SetConfig+0x2e6>
 800499c:	2308      	movs	r3, #8
 800499e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049a2:	e10a      	b.n	8004bba <UART_SetConfig+0x2e6>
 80049a4:	2310      	movs	r3, #16
 80049a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049aa:	e106      	b.n	8004bba <UART_SetConfig+0x2e6>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a7c      	ldr	r2, [pc, #496]	@ (8004ba4 <UART_SetConfig+0x2d0>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d138      	bne.n	8004a28 <UART_SetConfig+0x154>
 80049b6:	4b7a      	ldr	r3, [pc, #488]	@ (8004ba0 <UART_SetConfig+0x2cc>)
 80049b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049bc:	f003 030c 	and.w	r3, r3, #12
 80049c0:	2b0c      	cmp	r3, #12
 80049c2:	d82d      	bhi.n	8004a20 <UART_SetConfig+0x14c>
 80049c4:	a201      	add	r2, pc, #4	@ (adr r2, 80049cc <UART_SetConfig+0xf8>)
 80049c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ca:	bf00      	nop
 80049cc:	08004a01 	.word	0x08004a01
 80049d0:	08004a21 	.word	0x08004a21
 80049d4:	08004a21 	.word	0x08004a21
 80049d8:	08004a21 	.word	0x08004a21
 80049dc:	08004a11 	.word	0x08004a11
 80049e0:	08004a21 	.word	0x08004a21
 80049e4:	08004a21 	.word	0x08004a21
 80049e8:	08004a21 	.word	0x08004a21
 80049ec:	08004a09 	.word	0x08004a09
 80049f0:	08004a21 	.word	0x08004a21
 80049f4:	08004a21 	.word	0x08004a21
 80049f8:	08004a21 	.word	0x08004a21
 80049fc:	08004a19 	.word	0x08004a19
 8004a00:	2300      	movs	r3, #0
 8004a02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a06:	e0d8      	b.n	8004bba <UART_SetConfig+0x2e6>
 8004a08:	2302      	movs	r3, #2
 8004a0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a0e:	e0d4      	b.n	8004bba <UART_SetConfig+0x2e6>
 8004a10:	2304      	movs	r3, #4
 8004a12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a16:	e0d0      	b.n	8004bba <UART_SetConfig+0x2e6>
 8004a18:	2308      	movs	r3, #8
 8004a1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a1e:	e0cc      	b.n	8004bba <UART_SetConfig+0x2e6>
 8004a20:	2310      	movs	r3, #16
 8004a22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a26:	e0c8      	b.n	8004bba <UART_SetConfig+0x2e6>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a5e      	ldr	r2, [pc, #376]	@ (8004ba8 <UART_SetConfig+0x2d4>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d125      	bne.n	8004a7e <UART_SetConfig+0x1aa>
 8004a32:	4b5b      	ldr	r3, [pc, #364]	@ (8004ba0 <UART_SetConfig+0x2cc>)
 8004a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a38:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004a3c:	2b30      	cmp	r3, #48	@ 0x30
 8004a3e:	d016      	beq.n	8004a6e <UART_SetConfig+0x19a>
 8004a40:	2b30      	cmp	r3, #48	@ 0x30
 8004a42:	d818      	bhi.n	8004a76 <UART_SetConfig+0x1a2>
 8004a44:	2b20      	cmp	r3, #32
 8004a46:	d00a      	beq.n	8004a5e <UART_SetConfig+0x18a>
 8004a48:	2b20      	cmp	r3, #32
 8004a4a:	d814      	bhi.n	8004a76 <UART_SetConfig+0x1a2>
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d002      	beq.n	8004a56 <UART_SetConfig+0x182>
 8004a50:	2b10      	cmp	r3, #16
 8004a52:	d008      	beq.n	8004a66 <UART_SetConfig+0x192>
 8004a54:	e00f      	b.n	8004a76 <UART_SetConfig+0x1a2>
 8004a56:	2300      	movs	r3, #0
 8004a58:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a5c:	e0ad      	b.n	8004bba <UART_SetConfig+0x2e6>
 8004a5e:	2302      	movs	r3, #2
 8004a60:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a64:	e0a9      	b.n	8004bba <UART_SetConfig+0x2e6>
 8004a66:	2304      	movs	r3, #4
 8004a68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a6c:	e0a5      	b.n	8004bba <UART_SetConfig+0x2e6>
 8004a6e:	2308      	movs	r3, #8
 8004a70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a74:	e0a1      	b.n	8004bba <UART_SetConfig+0x2e6>
 8004a76:	2310      	movs	r3, #16
 8004a78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a7c:	e09d      	b.n	8004bba <UART_SetConfig+0x2e6>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a4a      	ldr	r2, [pc, #296]	@ (8004bac <UART_SetConfig+0x2d8>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d125      	bne.n	8004ad4 <UART_SetConfig+0x200>
 8004a88:	4b45      	ldr	r3, [pc, #276]	@ (8004ba0 <UART_SetConfig+0x2cc>)
 8004a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a8e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004a92:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a94:	d016      	beq.n	8004ac4 <UART_SetConfig+0x1f0>
 8004a96:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a98:	d818      	bhi.n	8004acc <UART_SetConfig+0x1f8>
 8004a9a:	2b80      	cmp	r3, #128	@ 0x80
 8004a9c:	d00a      	beq.n	8004ab4 <UART_SetConfig+0x1e0>
 8004a9e:	2b80      	cmp	r3, #128	@ 0x80
 8004aa0:	d814      	bhi.n	8004acc <UART_SetConfig+0x1f8>
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d002      	beq.n	8004aac <UART_SetConfig+0x1d8>
 8004aa6:	2b40      	cmp	r3, #64	@ 0x40
 8004aa8:	d008      	beq.n	8004abc <UART_SetConfig+0x1e8>
 8004aaa:	e00f      	b.n	8004acc <UART_SetConfig+0x1f8>
 8004aac:	2300      	movs	r3, #0
 8004aae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ab2:	e082      	b.n	8004bba <UART_SetConfig+0x2e6>
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004aba:	e07e      	b.n	8004bba <UART_SetConfig+0x2e6>
 8004abc:	2304      	movs	r3, #4
 8004abe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ac2:	e07a      	b.n	8004bba <UART_SetConfig+0x2e6>
 8004ac4:	2308      	movs	r3, #8
 8004ac6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004aca:	e076      	b.n	8004bba <UART_SetConfig+0x2e6>
 8004acc:	2310      	movs	r3, #16
 8004ace:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ad2:	e072      	b.n	8004bba <UART_SetConfig+0x2e6>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a35      	ldr	r2, [pc, #212]	@ (8004bb0 <UART_SetConfig+0x2dc>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d12a      	bne.n	8004b34 <UART_SetConfig+0x260>
 8004ade:	4b30      	ldr	r3, [pc, #192]	@ (8004ba0 <UART_SetConfig+0x2cc>)
 8004ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ae4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ae8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004aec:	d01a      	beq.n	8004b24 <UART_SetConfig+0x250>
 8004aee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004af2:	d81b      	bhi.n	8004b2c <UART_SetConfig+0x258>
 8004af4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004af8:	d00c      	beq.n	8004b14 <UART_SetConfig+0x240>
 8004afa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004afe:	d815      	bhi.n	8004b2c <UART_SetConfig+0x258>
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d003      	beq.n	8004b0c <UART_SetConfig+0x238>
 8004b04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b08:	d008      	beq.n	8004b1c <UART_SetConfig+0x248>
 8004b0a:	e00f      	b.n	8004b2c <UART_SetConfig+0x258>
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b12:	e052      	b.n	8004bba <UART_SetConfig+0x2e6>
 8004b14:	2302      	movs	r3, #2
 8004b16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b1a:	e04e      	b.n	8004bba <UART_SetConfig+0x2e6>
 8004b1c:	2304      	movs	r3, #4
 8004b1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b22:	e04a      	b.n	8004bba <UART_SetConfig+0x2e6>
 8004b24:	2308      	movs	r3, #8
 8004b26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b2a:	e046      	b.n	8004bba <UART_SetConfig+0x2e6>
 8004b2c:	2310      	movs	r3, #16
 8004b2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b32:	e042      	b.n	8004bba <UART_SetConfig+0x2e6>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a17      	ldr	r2, [pc, #92]	@ (8004b98 <UART_SetConfig+0x2c4>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d13a      	bne.n	8004bb4 <UART_SetConfig+0x2e0>
 8004b3e:	4b18      	ldr	r3, [pc, #96]	@ (8004ba0 <UART_SetConfig+0x2cc>)
 8004b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b44:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004b48:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b4c:	d01a      	beq.n	8004b84 <UART_SetConfig+0x2b0>
 8004b4e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b52:	d81b      	bhi.n	8004b8c <UART_SetConfig+0x2b8>
 8004b54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b58:	d00c      	beq.n	8004b74 <UART_SetConfig+0x2a0>
 8004b5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b5e:	d815      	bhi.n	8004b8c <UART_SetConfig+0x2b8>
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d003      	beq.n	8004b6c <UART_SetConfig+0x298>
 8004b64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b68:	d008      	beq.n	8004b7c <UART_SetConfig+0x2a8>
 8004b6a:	e00f      	b.n	8004b8c <UART_SetConfig+0x2b8>
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b72:	e022      	b.n	8004bba <UART_SetConfig+0x2e6>
 8004b74:	2302      	movs	r3, #2
 8004b76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b7a:	e01e      	b.n	8004bba <UART_SetConfig+0x2e6>
 8004b7c:	2304      	movs	r3, #4
 8004b7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b82:	e01a      	b.n	8004bba <UART_SetConfig+0x2e6>
 8004b84:	2308      	movs	r3, #8
 8004b86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b8a:	e016      	b.n	8004bba <UART_SetConfig+0x2e6>
 8004b8c:	2310      	movs	r3, #16
 8004b8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b92:	e012      	b.n	8004bba <UART_SetConfig+0x2e6>
 8004b94:	efff69f3 	.word	0xefff69f3
 8004b98:	40008000 	.word	0x40008000
 8004b9c:	40013800 	.word	0x40013800
 8004ba0:	40021000 	.word	0x40021000
 8004ba4:	40004400 	.word	0x40004400
 8004ba8:	40004800 	.word	0x40004800
 8004bac:	40004c00 	.word	0x40004c00
 8004bb0:	40005000 	.word	0x40005000
 8004bb4:	2310      	movs	r3, #16
 8004bb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a9f      	ldr	r2, [pc, #636]	@ (8004e3c <UART_SetConfig+0x568>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d17a      	bne.n	8004cba <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004bc4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004bc8:	2b08      	cmp	r3, #8
 8004bca:	d824      	bhi.n	8004c16 <UART_SetConfig+0x342>
 8004bcc:	a201      	add	r2, pc, #4	@ (adr r2, 8004bd4 <UART_SetConfig+0x300>)
 8004bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd2:	bf00      	nop
 8004bd4:	08004bf9 	.word	0x08004bf9
 8004bd8:	08004c17 	.word	0x08004c17
 8004bdc:	08004c01 	.word	0x08004c01
 8004be0:	08004c17 	.word	0x08004c17
 8004be4:	08004c07 	.word	0x08004c07
 8004be8:	08004c17 	.word	0x08004c17
 8004bec:	08004c17 	.word	0x08004c17
 8004bf0:	08004c17 	.word	0x08004c17
 8004bf4:	08004c0f 	.word	0x08004c0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bf8:	f7fe f848 	bl	8002c8c <HAL_RCC_GetPCLK1Freq>
 8004bfc:	61f8      	str	r0, [r7, #28]
        break;
 8004bfe:	e010      	b.n	8004c22 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c00:	4b8f      	ldr	r3, [pc, #572]	@ (8004e40 <UART_SetConfig+0x56c>)
 8004c02:	61fb      	str	r3, [r7, #28]
        break;
 8004c04:	e00d      	b.n	8004c22 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c06:	f7fd ffa9 	bl	8002b5c <HAL_RCC_GetSysClockFreq>
 8004c0a:	61f8      	str	r0, [r7, #28]
        break;
 8004c0c:	e009      	b.n	8004c22 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c12:	61fb      	str	r3, [r7, #28]
        break;
 8004c14:	e005      	b.n	8004c22 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004c16:	2300      	movs	r3, #0
 8004c18:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004c20:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f000 80fb 	beq.w	8004e20 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	685a      	ldr	r2, [r3, #4]
 8004c2e:	4613      	mov	r3, r2
 8004c30:	005b      	lsls	r3, r3, #1
 8004c32:	4413      	add	r3, r2
 8004c34:	69fa      	ldr	r2, [r7, #28]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d305      	bcc.n	8004c46 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c40:	69fa      	ldr	r2, [r7, #28]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d903      	bls.n	8004c4e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004c4c:	e0e8      	b.n	8004e20 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	2200      	movs	r2, #0
 8004c52:	461c      	mov	r4, r3
 8004c54:	4615      	mov	r5, r2
 8004c56:	f04f 0200 	mov.w	r2, #0
 8004c5a:	f04f 0300 	mov.w	r3, #0
 8004c5e:	022b      	lsls	r3, r5, #8
 8004c60:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004c64:	0222      	lsls	r2, r4, #8
 8004c66:	68f9      	ldr	r1, [r7, #12]
 8004c68:	6849      	ldr	r1, [r1, #4]
 8004c6a:	0849      	lsrs	r1, r1, #1
 8004c6c:	2000      	movs	r0, #0
 8004c6e:	4688      	mov	r8, r1
 8004c70:	4681      	mov	r9, r0
 8004c72:	eb12 0a08 	adds.w	sl, r2, r8
 8004c76:	eb43 0b09 	adc.w	fp, r3, r9
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	603b      	str	r3, [r7, #0]
 8004c82:	607a      	str	r2, [r7, #4]
 8004c84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c88:	4650      	mov	r0, sl
 8004c8a:	4659      	mov	r1, fp
 8004c8c:	f7fb faf0 	bl	8000270 <__aeabi_uldivmod>
 8004c90:	4602      	mov	r2, r0
 8004c92:	460b      	mov	r3, r1
 8004c94:	4613      	mov	r3, r2
 8004c96:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c9e:	d308      	bcc.n	8004cb2 <UART_SetConfig+0x3de>
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ca6:	d204      	bcs.n	8004cb2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	69ba      	ldr	r2, [r7, #24]
 8004cae:	60da      	str	r2, [r3, #12]
 8004cb0:	e0b6      	b.n	8004e20 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004cb8:	e0b2      	b.n	8004e20 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cc2:	d15e      	bne.n	8004d82 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004cc4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004cc8:	2b08      	cmp	r3, #8
 8004cca:	d828      	bhi.n	8004d1e <UART_SetConfig+0x44a>
 8004ccc:	a201      	add	r2, pc, #4	@ (adr r2, 8004cd4 <UART_SetConfig+0x400>)
 8004cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd2:	bf00      	nop
 8004cd4:	08004cf9 	.word	0x08004cf9
 8004cd8:	08004d01 	.word	0x08004d01
 8004cdc:	08004d09 	.word	0x08004d09
 8004ce0:	08004d1f 	.word	0x08004d1f
 8004ce4:	08004d0f 	.word	0x08004d0f
 8004ce8:	08004d1f 	.word	0x08004d1f
 8004cec:	08004d1f 	.word	0x08004d1f
 8004cf0:	08004d1f 	.word	0x08004d1f
 8004cf4:	08004d17 	.word	0x08004d17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cf8:	f7fd ffc8 	bl	8002c8c <HAL_RCC_GetPCLK1Freq>
 8004cfc:	61f8      	str	r0, [r7, #28]
        break;
 8004cfe:	e014      	b.n	8004d2a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d00:	f7fd ffda 	bl	8002cb8 <HAL_RCC_GetPCLK2Freq>
 8004d04:	61f8      	str	r0, [r7, #28]
        break;
 8004d06:	e010      	b.n	8004d2a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d08:	4b4d      	ldr	r3, [pc, #308]	@ (8004e40 <UART_SetConfig+0x56c>)
 8004d0a:	61fb      	str	r3, [r7, #28]
        break;
 8004d0c:	e00d      	b.n	8004d2a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d0e:	f7fd ff25 	bl	8002b5c <HAL_RCC_GetSysClockFreq>
 8004d12:	61f8      	str	r0, [r7, #28]
        break;
 8004d14:	e009      	b.n	8004d2a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d1a:	61fb      	str	r3, [r7, #28]
        break;
 8004d1c:	e005      	b.n	8004d2a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004d28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d077      	beq.n	8004e20 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	005a      	lsls	r2, r3, #1
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	085b      	lsrs	r3, r3, #1
 8004d3a:	441a      	add	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d44:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	2b0f      	cmp	r3, #15
 8004d4a:	d916      	bls.n	8004d7a <UART_SetConfig+0x4a6>
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d52:	d212      	bcs.n	8004d7a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	f023 030f 	bic.w	r3, r3, #15
 8004d5c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	085b      	lsrs	r3, r3, #1
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	f003 0307 	and.w	r3, r3, #7
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	8afb      	ldrh	r3, [r7, #22]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	8afa      	ldrh	r2, [r7, #22]
 8004d76:	60da      	str	r2, [r3, #12]
 8004d78:	e052      	b.n	8004e20 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004d80:	e04e      	b.n	8004e20 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d82:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004d86:	2b08      	cmp	r3, #8
 8004d88:	d827      	bhi.n	8004dda <UART_SetConfig+0x506>
 8004d8a:	a201      	add	r2, pc, #4	@ (adr r2, 8004d90 <UART_SetConfig+0x4bc>)
 8004d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d90:	08004db5 	.word	0x08004db5
 8004d94:	08004dbd 	.word	0x08004dbd
 8004d98:	08004dc5 	.word	0x08004dc5
 8004d9c:	08004ddb 	.word	0x08004ddb
 8004da0:	08004dcb 	.word	0x08004dcb
 8004da4:	08004ddb 	.word	0x08004ddb
 8004da8:	08004ddb 	.word	0x08004ddb
 8004dac:	08004ddb 	.word	0x08004ddb
 8004db0:	08004dd3 	.word	0x08004dd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004db4:	f7fd ff6a 	bl	8002c8c <HAL_RCC_GetPCLK1Freq>
 8004db8:	61f8      	str	r0, [r7, #28]
        break;
 8004dba:	e014      	b.n	8004de6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dbc:	f7fd ff7c 	bl	8002cb8 <HAL_RCC_GetPCLK2Freq>
 8004dc0:	61f8      	str	r0, [r7, #28]
        break;
 8004dc2:	e010      	b.n	8004de6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dc4:	4b1e      	ldr	r3, [pc, #120]	@ (8004e40 <UART_SetConfig+0x56c>)
 8004dc6:	61fb      	str	r3, [r7, #28]
        break;
 8004dc8:	e00d      	b.n	8004de6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dca:	f7fd fec7 	bl	8002b5c <HAL_RCC_GetSysClockFreq>
 8004dce:	61f8      	str	r0, [r7, #28]
        break;
 8004dd0:	e009      	b.n	8004de6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dd6:	61fb      	str	r3, [r7, #28]
        break;
 8004dd8:	e005      	b.n	8004de6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004de4:	bf00      	nop
    }

    if (pclk != 0U)
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d019      	beq.n	8004e20 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	085a      	lsrs	r2, r3, #1
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	441a      	add	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dfe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	2b0f      	cmp	r3, #15
 8004e04:	d909      	bls.n	8004e1a <UART_SetConfig+0x546>
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e0c:	d205      	bcs.n	8004e1a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	60da      	str	r2, [r3, #12]
 8004e18:	e002      	b.n	8004e20 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004e2c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3728      	adds	r7, #40	@ 0x28
 8004e34:	46bd      	mov	sp, r7
 8004e36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e3a:	bf00      	nop
 8004e3c:	40008000 	.word	0x40008000
 8004e40:	00f42400 	.word	0x00f42400

08004e44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e50:	f003 0308 	and.w	r3, r3, #8
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00a      	beq.n	8004e6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	430a      	orrs	r2, r1
 8004e6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00a      	beq.n	8004e90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	430a      	orrs	r2, r1
 8004e8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e94:	f003 0302 	and.w	r3, r3, #2
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d00a      	beq.n	8004eb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb6:	f003 0304 	and.w	r3, r3, #4
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00a      	beq.n	8004ed4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed8:	f003 0310 	and.w	r3, r3, #16
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00a      	beq.n	8004ef6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004efa:	f003 0320 	and.w	r3, r3, #32
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00a      	beq.n	8004f18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	430a      	orrs	r2, r1
 8004f16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d01a      	beq.n	8004f5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	430a      	orrs	r2, r1
 8004f38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f42:	d10a      	bne.n	8004f5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	430a      	orrs	r2, r1
 8004f58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00a      	beq.n	8004f7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	605a      	str	r2, [r3, #4]
  }
}
 8004f7c:	bf00      	nop
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b098      	sub	sp, #96	@ 0x60
 8004f8c:	af02      	add	r7, sp, #8
 8004f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f98:	f7fc fbf6 	bl	8001788 <HAL_GetTick>
 8004f9c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0308 	and.w	r3, r3, #8
 8004fa8:	2b08      	cmp	r3, #8
 8004faa:	d12e      	bne.n	800500a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004fb0:	9300      	str	r3, [sp, #0]
 8004fb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f88c 	bl	80050d8 <UART_WaitOnFlagUntilTimeout>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d021      	beq.n	800500a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fce:	e853 3f00 	ldrex	r3, [r3]
 8004fd2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004fd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fda:	653b      	str	r3, [r7, #80]	@ 0x50
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fe4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fe6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004fea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004fec:	e841 2300 	strex	r3, r2, [r1]
 8004ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ff2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1e6      	bne.n	8004fc6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e062      	b.n	80050d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0304 	and.w	r3, r3, #4
 8005014:	2b04      	cmp	r3, #4
 8005016:	d149      	bne.n	80050ac <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005018:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800501c:	9300      	str	r3, [sp, #0]
 800501e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005020:	2200      	movs	r2, #0
 8005022:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 f856 	bl	80050d8 <UART_WaitOnFlagUntilTimeout>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d03c      	beq.n	80050ac <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503a:	e853 3f00 	ldrex	r3, [r3]
 800503e:	623b      	str	r3, [r7, #32]
   return(result);
 8005040:	6a3b      	ldr	r3, [r7, #32]
 8005042:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005046:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	461a      	mov	r2, r3
 800504e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005050:	633b      	str	r3, [r7, #48]	@ 0x30
 8005052:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005054:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005056:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005058:	e841 2300 	strex	r3, r2, [r1]
 800505c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800505e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005060:	2b00      	cmp	r3, #0
 8005062:	d1e6      	bne.n	8005032 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	3308      	adds	r3, #8
 800506a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	e853 3f00 	ldrex	r3, [r3]
 8005072:	60fb      	str	r3, [r7, #12]
   return(result);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f023 0301 	bic.w	r3, r3, #1
 800507a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	3308      	adds	r3, #8
 8005082:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005084:	61fa      	str	r2, [r7, #28]
 8005086:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005088:	69b9      	ldr	r1, [r7, #24]
 800508a:	69fa      	ldr	r2, [r7, #28]
 800508c:	e841 2300 	strex	r3, r2, [r1]
 8005090:	617b      	str	r3, [r7, #20]
   return(result);
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1e5      	bne.n	8005064 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2220      	movs	r2, #32
 800509c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e011      	b.n	80050d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2220      	movs	r2, #32
 80050b0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2220      	movs	r2, #32
 80050b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3758      	adds	r7, #88	@ 0x58
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	603b      	str	r3, [r7, #0]
 80050e4:	4613      	mov	r3, r2
 80050e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050e8:	e04f      	b.n	800518a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80050f0:	d04b      	beq.n	800518a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050f2:	f7fc fb49 	bl	8001788 <HAL_GetTick>
 80050f6:	4602      	mov	r2, r0
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	69ba      	ldr	r2, [r7, #24]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d302      	bcc.n	8005108 <UART_WaitOnFlagUntilTimeout+0x30>
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d101      	bne.n	800510c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005108:	2303      	movs	r3, #3
 800510a:	e04e      	b.n	80051aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0304 	and.w	r3, r3, #4
 8005116:	2b00      	cmp	r3, #0
 8005118:	d037      	beq.n	800518a <UART_WaitOnFlagUntilTimeout+0xb2>
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	2b80      	cmp	r3, #128	@ 0x80
 800511e:	d034      	beq.n	800518a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	2b40      	cmp	r3, #64	@ 0x40
 8005124:	d031      	beq.n	800518a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	69db      	ldr	r3, [r3, #28]
 800512c:	f003 0308 	and.w	r3, r3, #8
 8005130:	2b08      	cmp	r3, #8
 8005132:	d110      	bne.n	8005156 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2208      	movs	r2, #8
 800513a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800513c:	68f8      	ldr	r0, [r7, #12]
 800513e:	f000 f8ff 	bl	8005340 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2208      	movs	r2, #8
 8005146:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e029      	b.n	80051aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	69db      	ldr	r3, [r3, #28]
 800515c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005160:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005164:	d111      	bne.n	800518a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800516e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	f000 f8e5 	bl	8005340 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2220      	movs	r2, #32
 800517a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e00f      	b.n	80051aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	69da      	ldr	r2, [r3, #28]
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	4013      	ands	r3, r2
 8005194:	68ba      	ldr	r2, [r7, #8]
 8005196:	429a      	cmp	r2, r3
 8005198:	bf0c      	ite	eq
 800519a:	2301      	moveq	r3, #1
 800519c:	2300      	movne	r3, #0
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	461a      	mov	r2, r3
 80051a2:	79fb      	ldrb	r3, [r7, #7]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d0a0      	beq.n	80050ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
	...

080051b4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b097      	sub	sp, #92	@ 0x5c
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	4613      	mov	r3, r2
 80051c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	68ba      	ldr	r2, [r7, #8]
 80051c6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	88fa      	ldrh	r2, [r7, #6]
 80051cc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	88fa      	ldrh	r2, [r7, #6]
 80051d4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051e6:	d10e      	bne.n	8005206 <UART_Start_Receive_IT+0x52>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d105      	bne.n	80051fc <UART_Start_Receive_IT+0x48>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80051f6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80051fa:	e02d      	b.n	8005258 <UART_Start_Receive_IT+0xa4>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	22ff      	movs	r2, #255	@ 0xff
 8005200:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005204:	e028      	b.n	8005258 <UART_Start_Receive_IT+0xa4>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d10d      	bne.n	800522a <UART_Start_Receive_IT+0x76>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d104      	bne.n	8005220 <UART_Start_Receive_IT+0x6c>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	22ff      	movs	r2, #255	@ 0xff
 800521a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800521e:	e01b      	b.n	8005258 <UART_Start_Receive_IT+0xa4>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	227f      	movs	r2, #127	@ 0x7f
 8005224:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005228:	e016      	b.n	8005258 <UART_Start_Receive_IT+0xa4>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005232:	d10d      	bne.n	8005250 <UART_Start_Receive_IT+0x9c>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	691b      	ldr	r3, [r3, #16]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d104      	bne.n	8005246 <UART_Start_Receive_IT+0x92>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	227f      	movs	r2, #127	@ 0x7f
 8005240:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005244:	e008      	b.n	8005258 <UART_Start_Receive_IT+0xa4>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	223f      	movs	r2, #63	@ 0x3f
 800524a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800524e:	e003      	b.n	8005258 <UART_Start_Receive_IT+0xa4>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2222      	movs	r2, #34	@ 0x22
 8005264:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	3308      	adds	r3, #8
 800526e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005270:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005272:	e853 3f00 	ldrex	r3, [r3]
 8005276:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800527a:	f043 0301 	orr.w	r3, r3, #1
 800527e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	3308      	adds	r3, #8
 8005286:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005288:	64ba      	str	r2, [r7, #72]	@ 0x48
 800528a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800528e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005290:	e841 2300 	strex	r3, r2, [r1]
 8005294:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005296:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005298:	2b00      	cmp	r3, #0
 800529a:	d1e5      	bne.n	8005268 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052a4:	d107      	bne.n	80052b6 <UART_Start_Receive_IT+0x102>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d103      	bne.n	80052b6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	4a21      	ldr	r2, [pc, #132]	@ (8005338 <UART_Start_Receive_IT+0x184>)
 80052b2:	669a      	str	r2, [r3, #104]	@ 0x68
 80052b4:	e002      	b.n	80052bc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	4a20      	ldr	r2, [pc, #128]	@ (800533c <UART_Start_Receive_IT+0x188>)
 80052ba:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d019      	beq.n	80052f8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052cc:	e853 3f00 	ldrex	r3, [r3]
 80052d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80052d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d4:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80052d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	461a      	mov	r2, r3
 80052e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80052e4:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80052e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80052ea:	e841 2300 	strex	r3, r2, [r1]
 80052ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80052f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1e6      	bne.n	80052c4 <UART_Start_Receive_IT+0x110>
 80052f6:	e018      	b.n	800532a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	e853 3f00 	ldrex	r3, [r3]
 8005304:	613b      	str	r3, [r7, #16]
   return(result);
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	f043 0320 	orr.w	r3, r3, #32
 800530c:	653b      	str	r3, [r7, #80]	@ 0x50
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	461a      	mov	r2, r3
 8005314:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005316:	623b      	str	r3, [r7, #32]
 8005318:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531a:	69f9      	ldr	r1, [r7, #28]
 800531c:	6a3a      	ldr	r2, [r7, #32]
 800531e:	e841 2300 	strex	r3, r2, [r1]
 8005322:	61bb      	str	r3, [r7, #24]
   return(result);
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d1e6      	bne.n	80052f8 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	375c      	adds	r7, #92	@ 0x5c
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr
 8005338:	08005645 	.word	0x08005645
 800533c:	08005489 	.word	0x08005489

08005340 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005340:	b480      	push	{r7}
 8005342:	b095      	sub	sp, #84	@ 0x54
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005350:	e853 3f00 	ldrex	r3, [r3]
 8005354:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005358:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800535c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	461a      	mov	r2, r3
 8005364:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005366:	643b      	str	r3, [r7, #64]	@ 0x40
 8005368:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800536c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800536e:	e841 2300 	strex	r3, r2, [r1]
 8005372:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005376:	2b00      	cmp	r3, #0
 8005378:	d1e6      	bne.n	8005348 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	3308      	adds	r3, #8
 8005380:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005382:	6a3b      	ldr	r3, [r7, #32]
 8005384:	e853 3f00 	ldrex	r3, [r3]
 8005388:	61fb      	str	r3, [r7, #28]
   return(result);
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	f023 0301 	bic.w	r3, r3, #1
 8005390:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	3308      	adds	r3, #8
 8005398:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800539a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800539c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053a2:	e841 2300 	strex	r3, r2, [r1]
 80053a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80053a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1e5      	bne.n	800537a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d118      	bne.n	80053e8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	e853 3f00 	ldrex	r3, [r3]
 80053c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	f023 0310 	bic.w	r3, r3, #16
 80053ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	461a      	mov	r2, r3
 80053d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053d4:	61bb      	str	r3, [r7, #24]
 80053d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d8:	6979      	ldr	r1, [r7, #20]
 80053da:	69ba      	ldr	r2, [r7, #24]
 80053dc:	e841 2300 	strex	r3, r2, [r1]
 80053e0:	613b      	str	r3, [r7, #16]
   return(result);
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d1e6      	bne.n	80053b6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2220      	movs	r2, #32
 80053ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80053fc:	bf00      	nop
 80053fe:	3754      	adds	r7, #84	@ 0x54
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005414:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2200      	movs	r2, #0
 800541a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2200      	movs	r2, #0
 8005422:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f7ff fa3e 	bl	80048a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800542c:	bf00      	nop
 800542e:	3710      	adds	r7, #16
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b088      	sub	sp, #32
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	e853 3f00 	ldrex	r3, [r3]
 8005448:	60bb      	str	r3, [r7, #8]
   return(result);
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005450:	61fb      	str	r3, [r7, #28]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	461a      	mov	r2, r3
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	61bb      	str	r3, [r7, #24]
 800545c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545e:	6979      	ldr	r1, [r7, #20]
 8005460:	69ba      	ldr	r2, [r7, #24]
 8005462:	e841 2300 	strex	r3, r2, [r1]
 8005466:	613b      	str	r3, [r7, #16]
   return(result);
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1e6      	bne.n	800543c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2220      	movs	r2, #32
 8005472:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f7ff fa0a 	bl	8004894 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005480:	bf00      	nop
 8005482:	3720      	adds	r7, #32
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b09c      	sub	sp, #112	@ 0x70
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005496:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054a0:	2b22      	cmp	r3, #34	@ 0x22
 80054a2:	f040 80be 	bne.w	8005622 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80054ac:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80054b0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80054b4:	b2d9      	uxtb	r1, r3
 80054b6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80054ba:	b2da      	uxtb	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054c0:	400a      	ands	r2, r1
 80054c2:	b2d2      	uxtb	r2, r2
 80054c4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054ca:	1c5a      	adds	r2, r3, #1
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	3b01      	subs	r3, #1
 80054da:	b29a      	uxth	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	f040 80a3 	bne.w	8005636 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054f8:	e853 3f00 	ldrex	r3, [r3]
 80054fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80054fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005500:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005504:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	461a      	mov	r2, r3
 800550c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800550e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005510:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005512:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005514:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005516:	e841 2300 	strex	r3, r2, [r1]
 800551a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800551c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1e6      	bne.n	80054f0 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	3308      	adds	r3, #8
 8005528:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800552c:	e853 3f00 	ldrex	r3, [r3]
 8005530:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005534:	f023 0301 	bic.w	r3, r3, #1
 8005538:	667b      	str	r3, [r7, #100]	@ 0x64
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	3308      	adds	r3, #8
 8005540:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005542:	647a      	str	r2, [r7, #68]	@ 0x44
 8005544:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005546:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005548:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800554a:	e841 2300 	strex	r3, r2, [r1]
 800554e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005550:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1e5      	bne.n	8005522 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2220      	movs	r2, #32
 800555a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a34      	ldr	r2, [pc, #208]	@ (8005640 <UART_RxISR_8BIT+0x1b8>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d01f      	beq.n	80055b4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d018      	beq.n	80055b4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800558a:	e853 3f00 	ldrex	r3, [r3]
 800558e:	623b      	str	r3, [r7, #32]
   return(result);
 8005590:	6a3b      	ldr	r3, [r7, #32]
 8005592:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005596:	663b      	str	r3, [r7, #96]	@ 0x60
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	461a      	mov	r2, r3
 800559e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80055a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80055a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055a8:	e841 2300 	strex	r3, r2, [r1]
 80055ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d1e6      	bne.n	8005582 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d12e      	bne.n	800561a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	e853 3f00 	ldrex	r3, [r3]
 80055ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f023 0310 	bic.w	r3, r3, #16
 80055d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	461a      	mov	r2, r3
 80055de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055e0:	61fb      	str	r3, [r7, #28]
 80055e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e4:	69b9      	ldr	r1, [r7, #24]
 80055e6:	69fa      	ldr	r2, [r7, #28]
 80055e8:	e841 2300 	strex	r3, r2, [r1]
 80055ec:	617b      	str	r3, [r7, #20]
   return(result);
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d1e6      	bne.n	80055c2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	69db      	ldr	r3, [r3, #28]
 80055fa:	f003 0310 	and.w	r3, r3, #16
 80055fe:	2b10      	cmp	r3, #16
 8005600:	d103      	bne.n	800560a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2210      	movs	r2, #16
 8005608:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005610:	4619      	mov	r1, r3
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f7ff f952 	bl	80048bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005618:	e00d      	b.n	8005636 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f7fb f940 	bl	80008a0 <HAL_UART_RxCpltCallback>
}
 8005620:	e009      	b.n	8005636 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	8b1b      	ldrh	r3, [r3, #24]
 8005628:	b29a      	uxth	r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f042 0208 	orr.w	r2, r2, #8
 8005632:	b292      	uxth	r2, r2
 8005634:	831a      	strh	r2, [r3, #24]
}
 8005636:	bf00      	nop
 8005638:	3770      	adds	r7, #112	@ 0x70
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	40008000 	.word	0x40008000

08005644 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b09c      	sub	sp, #112	@ 0x70
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005652:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800565c:	2b22      	cmp	r3, #34	@ 0x22
 800565e:	f040 80be 	bne.w	80057de <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005668:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005670:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005672:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005676:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800567a:	4013      	ands	r3, r2
 800567c:	b29a      	uxth	r2, r3
 800567e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005680:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005686:	1c9a      	adds	r2, r3, #2
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005692:	b29b      	uxth	r3, r3
 8005694:	3b01      	subs	r3, #1
 8005696:	b29a      	uxth	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	f040 80a3 	bne.w	80057f2 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056b4:	e853 3f00 	ldrex	r3, [r3]
 80056b8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80056ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056c0:	667b      	str	r3, [r7, #100]	@ 0x64
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	461a      	mov	r2, r3
 80056c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80056cc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ce:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80056d0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80056d2:	e841 2300 	strex	r3, r2, [r1]
 80056d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80056d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1e6      	bne.n	80056ac <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	3308      	adds	r3, #8
 80056e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056e8:	e853 3f00 	ldrex	r3, [r3]
 80056ec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80056ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f0:	f023 0301 	bic.w	r3, r3, #1
 80056f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	3308      	adds	r3, #8
 80056fc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80056fe:	643a      	str	r2, [r7, #64]	@ 0x40
 8005700:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005702:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005704:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005706:	e841 2300 	strex	r3, r2, [r1]
 800570a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800570c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1e5      	bne.n	80056de <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2220      	movs	r2, #32
 8005716:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a34      	ldr	r2, [pc, #208]	@ (80057fc <UART_RxISR_16BIT+0x1b8>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d01f      	beq.n	8005770 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d018      	beq.n	8005770 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005744:	6a3b      	ldr	r3, [r7, #32]
 8005746:	e853 3f00 	ldrex	r3, [r3]
 800574a:	61fb      	str	r3, [r7, #28]
   return(result);
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005752:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	461a      	mov	r2, r3
 800575a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800575c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800575e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005760:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005762:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005764:	e841 2300 	strex	r3, r2, [r1]
 8005768:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800576a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1e6      	bne.n	800573e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005774:	2b01      	cmp	r3, #1
 8005776:	d12e      	bne.n	80057d6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	e853 3f00 	ldrex	r3, [r3]
 800578a:	60bb      	str	r3, [r7, #8]
   return(result);
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	f023 0310 	bic.w	r3, r3, #16
 8005792:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	461a      	mov	r2, r3
 800579a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800579c:	61bb      	str	r3, [r7, #24]
 800579e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a0:	6979      	ldr	r1, [r7, #20]
 80057a2:	69ba      	ldr	r2, [r7, #24]
 80057a4:	e841 2300 	strex	r3, r2, [r1]
 80057a8:	613b      	str	r3, [r7, #16]
   return(result);
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d1e6      	bne.n	800577e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	69db      	ldr	r3, [r3, #28]
 80057b6:	f003 0310 	and.w	r3, r3, #16
 80057ba:	2b10      	cmp	r3, #16
 80057bc:	d103      	bne.n	80057c6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2210      	movs	r2, #16
 80057c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80057cc:	4619      	mov	r1, r3
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f7ff f874 	bl	80048bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80057d4:	e00d      	b.n	80057f2 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f7fb f862 	bl	80008a0 <HAL_UART_RxCpltCallback>
}
 80057dc:	e009      	b.n	80057f2 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	8b1b      	ldrh	r3, [r3, #24]
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f042 0208 	orr.w	r2, r2, #8
 80057ee:	b292      	uxth	r2, r2
 80057f0:	831a      	strh	r2, [r3, #24]
}
 80057f2:	bf00      	nop
 80057f4:	3770      	adds	r7, #112	@ 0x70
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	40008000 	.word	0x40008000

08005800 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005808:	bf00      	nop
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	4603      	mov	r3, r0
 800581c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800581e:	2300      	movs	r3, #0
 8005820:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005822:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005826:	2b84      	cmp	r3, #132	@ 0x84
 8005828:	d005      	beq.n	8005836 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800582a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	4413      	add	r3, r2
 8005832:	3303      	adds	r3, #3
 8005834:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005836:	68fb      	ldr	r3, [r7, #12]
}
 8005838:	4618      	mov	r0, r3
 800583a:	3714      	adds	r7, #20
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005848:	f000 fdca 	bl	80063e0 <vTaskStartScheduler>
  
  return osOK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	bd80      	pop	{r7, pc}

08005852 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005852:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005854:	b089      	sub	sp, #36	@ 0x24
 8005856:	af04      	add	r7, sp, #16
 8005858:	6078      	str	r0, [r7, #4]
 800585a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	695b      	ldr	r3, [r3, #20]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d020      	beq.n	80058a6 <osThreadCreate+0x54>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d01c      	beq.n	80058a6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	685c      	ldr	r4, [r3, #4]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	691e      	ldr	r6, [r3, #16]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800587e:	4618      	mov	r0, r3
 8005880:	f7ff ffc8 	bl	8005814 <makeFreeRtosPriority>
 8005884:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800588e:	9202      	str	r2, [sp, #8]
 8005890:	9301      	str	r3, [sp, #4]
 8005892:	9100      	str	r1, [sp, #0]
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	4632      	mov	r2, r6
 8005898:	4629      	mov	r1, r5
 800589a:	4620      	mov	r0, r4
 800589c:	f000 fbd2 	bl	8006044 <xTaskCreateStatic>
 80058a0:	4603      	mov	r3, r0
 80058a2:	60fb      	str	r3, [r7, #12]
 80058a4:	e01c      	b.n	80058e0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685c      	ldr	r4, [r3, #4]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80058b2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80058ba:	4618      	mov	r0, r3
 80058bc:	f7ff ffaa 	bl	8005814 <makeFreeRtosPriority>
 80058c0:	4602      	mov	r2, r0
 80058c2:	f107 030c 	add.w	r3, r7, #12
 80058c6:	9301      	str	r3, [sp, #4]
 80058c8:	9200      	str	r2, [sp, #0]
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	4632      	mov	r2, r6
 80058ce:	4629      	mov	r1, r5
 80058d0:	4620      	mov	r0, r4
 80058d2:	f000 fc17 	bl	8006104 <xTaskCreate>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d001      	beq.n	80058e0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80058dc:	2300      	movs	r3, #0
 80058de:	e000      	b.n	80058e2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80058e0:	68fb      	ldr	r3, [r7, #12]
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3714      	adds	r7, #20
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080058ea <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b084      	sub	sp, #16
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d001      	beq.n	8005900 <osDelay+0x16>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	e000      	b.n	8005902 <osDelay+0x18>
 8005900:	2301      	movs	r3, #1
 8005902:	4618      	mov	r0, r3
 8005904:	f000 fd36 	bl	8006374 <vTaskDelay>
  
  return osOK;
 8005908:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800590a:	4618      	mov	r0, r3
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}

08005912 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005912:	b480      	push	{r7}
 8005914:	b083      	sub	sp, #12
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f103 0208 	add.w	r2, r3, #8
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800592a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f103 0208 	add.w	r2, r3, #8
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f103 0208 	add.w	r2, r3, #8
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005946:	bf00      	nop
 8005948:	370c      	adds	r7, #12
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr

08005952 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005952:	b480      	push	{r7}
 8005954:	b083      	sub	sp, #12
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800596c:	b480      	push	{r7}
 800596e:	b085      	sub	sp, #20
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	689a      	ldr	r2, [r3, #8]
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	683a      	ldr	r2, [r7, #0]
 8005990:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	683a      	ldr	r2, [r7, #0]
 8005996:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	1c5a      	adds	r2, r3, #1
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	601a      	str	r2, [r3, #0]
}
 80059a8:	bf00      	nop
 80059aa:	3714      	adds	r7, #20
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80059ca:	d103      	bne.n	80059d4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	60fb      	str	r3, [r7, #12]
 80059d2:	e00c      	b.n	80059ee <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	3308      	adds	r3, #8
 80059d8:	60fb      	str	r3, [r7, #12]
 80059da:	e002      	b.n	80059e2 <vListInsert+0x2e>
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	60fb      	str	r3, [r7, #12]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68ba      	ldr	r2, [r7, #8]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d2f6      	bcs.n	80059dc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	685a      	ldr	r2, [r3, #4]
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	683a      	ldr	r2, [r7, #0]
 80059fc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	683a      	ldr	r2, [r7, #0]
 8005a08:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	1c5a      	adds	r2, r3, #1
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	601a      	str	r2, [r3, #0]
}
 8005a1a:	bf00      	nop
 8005a1c:	3714      	adds	r7, #20
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr

08005a26 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005a26:	b480      	push	{r7}
 8005a28:	b085      	sub	sp, #20
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	6892      	ldr	r2, [r2, #8]
 8005a3c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	6852      	ldr	r2, [r2, #4]
 8005a46:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d103      	bne.n	8005a5a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	689a      	ldr	r2, [r3, #8]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	1e5a      	subs	r2, r3, #1
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3714      	adds	r7, #20
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
	...

08005a7c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d10b      	bne.n	8005aa8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a94:	f383 8811 	msr	BASEPRI, r3
 8005a98:	f3bf 8f6f 	isb	sy
 8005a9c:	f3bf 8f4f 	dsb	sy
 8005aa0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005aa2:	bf00      	nop
 8005aa4:	bf00      	nop
 8005aa6:	e7fd      	b.n	8005aa4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005aa8:	f001 fb76 	bl	8007198 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ab4:	68f9      	ldr	r1, [r7, #12]
 8005ab6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005ab8:	fb01 f303 	mul.w	r3, r1, r3
 8005abc:	441a      	add	r2, r3
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ad8:	3b01      	subs	r3, #1
 8005ada:	68f9      	ldr	r1, [r7, #12]
 8005adc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005ade:	fb01 f303 	mul.w	r3, r1, r3
 8005ae2:	441a      	add	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	22ff      	movs	r2, #255	@ 0xff
 8005aec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	22ff      	movs	r2, #255	@ 0xff
 8005af4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d114      	bne.n	8005b28 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d01a      	beq.n	8005b3c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	3310      	adds	r3, #16
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f000 feb2 	bl	8006874 <xTaskRemoveFromEventList>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d012      	beq.n	8005b3c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005b16:	4b0d      	ldr	r3, [pc, #52]	@ (8005b4c <xQueueGenericReset+0xd0>)
 8005b18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b1c:	601a      	str	r2, [r3, #0]
 8005b1e:	f3bf 8f4f 	dsb	sy
 8005b22:	f3bf 8f6f 	isb	sy
 8005b26:	e009      	b.n	8005b3c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	3310      	adds	r3, #16
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f7ff fef0 	bl	8005912 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	3324      	adds	r3, #36	@ 0x24
 8005b36:	4618      	mov	r0, r3
 8005b38:	f7ff feeb 	bl	8005912 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005b3c:	f001 fb5e 	bl	80071fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005b40:	2301      	movs	r3, #1
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3710      	adds	r7, #16
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	e000ed04 	.word	0xe000ed04

08005b50 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b08a      	sub	sp, #40	@ 0x28
 8005b54:	af02      	add	r7, sp, #8
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d10b      	bne.n	8005b7c <xQueueGenericCreate+0x2c>
	__asm volatile
 8005b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b68:	f383 8811 	msr	BASEPRI, r3
 8005b6c:	f3bf 8f6f 	isb	sy
 8005b70:	f3bf 8f4f 	dsb	sy
 8005b74:	613b      	str	r3, [r7, #16]
}
 8005b76:	bf00      	nop
 8005b78:	bf00      	nop
 8005b7a:	e7fd      	b.n	8005b78 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	68ba      	ldr	r2, [r7, #8]
 8005b80:	fb02 f303 	mul.w	r3, r2, r3
 8005b84:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	3348      	adds	r3, #72	@ 0x48
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f001 fc26 	bl	80073dc <pvPortMalloc>
 8005b90:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d011      	beq.n	8005bbc <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	3348      	adds	r3, #72	@ 0x48
 8005ba0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005baa:	79fa      	ldrb	r2, [r7, #7]
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	9300      	str	r3, [sp, #0]
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	68b9      	ldr	r1, [r7, #8]
 8005bb6:	68f8      	ldr	r0, [r7, #12]
 8005bb8:	f000 f805 	bl	8005bc6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005bbc:	69bb      	ldr	r3, [r7, #24]
	}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3720      	adds	r7, #32
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b084      	sub	sp, #16
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	60f8      	str	r0, [r7, #12]
 8005bce:	60b9      	str	r1, [r7, #8]
 8005bd0:	607a      	str	r2, [r7, #4]
 8005bd2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d103      	bne.n	8005be2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	69ba      	ldr	r2, [r7, #24]
 8005bde:	601a      	str	r2, [r3, #0]
 8005be0:	e002      	b.n	8005be8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	68ba      	ldr	r2, [r7, #8]
 8005bf2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005bf4:	2101      	movs	r1, #1
 8005bf6:	69b8      	ldr	r0, [r7, #24]
 8005bf8:	f7ff ff40 	bl	8005a7c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005bfc:	bf00      	nop
 8005bfe:	3710      	adds	r7, #16
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b08e      	sub	sp, #56	@ 0x38
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d10b      	bne.n	8005c30 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8005c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c1c:	f383 8811 	msr	BASEPRI, r3
 8005c20:	f3bf 8f6f 	isb	sy
 8005c24:	f3bf 8f4f 	dsb	sy
 8005c28:	623b      	str	r3, [r7, #32]
}
 8005c2a:	bf00      	nop
 8005c2c:	bf00      	nop
 8005c2e:	e7fd      	b.n	8005c2c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00b      	beq.n	8005c50 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8005c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c3c:	f383 8811 	msr	BASEPRI, r3
 8005c40:	f3bf 8f6f 	isb	sy
 8005c44:	f3bf 8f4f 	dsb	sy
 8005c48:	61fb      	str	r3, [r7, #28]
}
 8005c4a:	bf00      	nop
 8005c4c:	bf00      	nop
 8005c4e:	e7fd      	b.n	8005c4c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d103      	bne.n	8005c60 <xQueueGiveFromISR+0x5c>
 8005c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d101      	bne.n	8005c64 <xQueueGiveFromISR+0x60>
 8005c60:	2301      	movs	r3, #1
 8005c62:	e000      	b.n	8005c66 <xQueueGiveFromISR+0x62>
 8005c64:	2300      	movs	r3, #0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d10b      	bne.n	8005c82 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8005c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c6e:	f383 8811 	msr	BASEPRI, r3
 8005c72:	f3bf 8f6f 	isb	sy
 8005c76:	f3bf 8f4f 	dsb	sy
 8005c7a:	61bb      	str	r3, [r7, #24]
}
 8005c7c:	bf00      	nop
 8005c7e:	bf00      	nop
 8005c80:	e7fd      	b.n	8005c7e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c82:	f001 fb69 	bl	8007358 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005c86:	f3ef 8211 	mrs	r2, BASEPRI
 8005c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c8e:	f383 8811 	msr	BASEPRI, r3
 8005c92:	f3bf 8f6f 	isb	sy
 8005c96:	f3bf 8f4f 	dsb	sy
 8005c9a:	617a      	str	r2, [r7, #20]
 8005c9c:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005c9e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ca6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005caa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d22b      	bcs.n	8005d0a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cb4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005cb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cbe:	1c5a      	adds	r2, r3, #1
 8005cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cc2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005cc4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005cc8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ccc:	d112      	bne.n	8005cf4 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d016      	beq.n	8005d04 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd8:	3324      	adds	r3, #36	@ 0x24
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f000 fdca 	bl	8006874 <xTaskRemoveFromEventList>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00e      	beq.n	8005d04 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00b      	beq.n	8005d04 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	601a      	str	r2, [r3, #0]
 8005cf2:	e007      	b.n	8005d04 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005cf4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	b25a      	sxtb	r2, r3
 8005cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005d04:	2301      	movs	r3, #1
 8005d06:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d08:	e001      	b.n	8005d0e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d10:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005d18:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005d1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3738      	adds	r7, #56	@ 0x38
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b08e      	sub	sp, #56	@ 0x38
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005d36:	2300      	movs	r3, #0
 8005d38:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d10b      	bne.n	8005d58 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8005d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d44:	f383 8811 	msr	BASEPRI, r3
 8005d48:	f3bf 8f6f 	isb	sy
 8005d4c:	f3bf 8f4f 	dsb	sy
 8005d50:	623b      	str	r3, [r7, #32]
}
 8005d52:	bf00      	nop
 8005d54:	bf00      	nop
 8005d56:	e7fd      	b.n	8005d54 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00b      	beq.n	8005d78 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8005d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d64:	f383 8811 	msr	BASEPRI, r3
 8005d68:	f3bf 8f6f 	isb	sy
 8005d6c:	f3bf 8f4f 	dsb	sy
 8005d70:	61fb      	str	r3, [r7, #28]
}
 8005d72:	bf00      	nop
 8005d74:	bf00      	nop
 8005d76:	e7fd      	b.n	8005d74 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d78:	f000 ff3c 	bl	8006bf4 <xTaskGetSchedulerState>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d102      	bne.n	8005d88 <xQueueSemaphoreTake+0x64>
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d101      	bne.n	8005d8c <xQueueSemaphoreTake+0x68>
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e000      	b.n	8005d8e <xQueueSemaphoreTake+0x6a>
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d10b      	bne.n	8005daa <xQueueSemaphoreTake+0x86>
	__asm volatile
 8005d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d96:	f383 8811 	msr	BASEPRI, r3
 8005d9a:	f3bf 8f6f 	isb	sy
 8005d9e:	f3bf 8f4f 	dsb	sy
 8005da2:	61bb      	str	r3, [r7, #24]
}
 8005da4:	bf00      	nop
 8005da6:	bf00      	nop
 8005da8:	e7fd      	b.n	8005da6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005daa:	f001 f9f5 	bl	8007198 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005db2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d024      	beq.n	8005e04 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dbc:	1e5a      	subs	r2, r3, #1
 8005dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dc0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d104      	bne.n	8005dd4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005dca:	f001 f837 	bl	8006e3c <pvTaskIncrementMutexHeldCount>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dd2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00f      	beq.n	8005dfc <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dde:	3310      	adds	r3, #16
 8005de0:	4618      	mov	r0, r3
 8005de2:	f000 fd47 	bl	8006874 <xTaskRemoveFromEventList>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d007      	beq.n	8005dfc <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005dec:	4b54      	ldr	r3, [pc, #336]	@ (8005f40 <xQueueSemaphoreTake+0x21c>)
 8005dee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005df2:	601a      	str	r2, [r3, #0]
 8005df4:	f3bf 8f4f 	dsb	sy
 8005df8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005dfc:	f001 f9fe 	bl	80071fc <vPortExitCritical>
				return pdPASS;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e098      	b.n	8005f36 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d112      	bne.n	8005e30 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00b      	beq.n	8005e28 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8005e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e14:	f383 8811 	msr	BASEPRI, r3
 8005e18:	f3bf 8f6f 	isb	sy
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	617b      	str	r3, [r7, #20]
}
 8005e22:	bf00      	nop
 8005e24:	bf00      	nop
 8005e26:	e7fd      	b.n	8005e24 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005e28:	f001 f9e8 	bl	80071fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	e082      	b.n	8005f36 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d106      	bne.n	8005e44 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e36:	f107 030c 	add.w	r3, r7, #12
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f000 fd7e 	bl	800693c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e40:	2301      	movs	r3, #1
 8005e42:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e44:	f001 f9da 	bl	80071fc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e48:	f000 fb2c 	bl	80064a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e4c:	f001 f9a4 	bl	8007198 <vPortEnterCritical>
 8005e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e52:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005e56:	b25b      	sxtb	r3, r3
 8005e58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e5c:	d103      	bne.n	8005e66 <xQueueSemaphoreTake+0x142>
 8005e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e68:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e6c:	b25b      	sxtb	r3, r3
 8005e6e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e72:	d103      	bne.n	8005e7c <xQueueSemaphoreTake+0x158>
 8005e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e7c:	f001 f9be 	bl	80071fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e80:	463a      	mov	r2, r7
 8005e82:	f107 030c 	add.w	r3, r7, #12
 8005e86:	4611      	mov	r1, r2
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f000 fd6d 	bl	8006968 <xTaskCheckForTimeOut>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d132      	bne.n	8005efa <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e94:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005e96:	f000 f8bf 	bl	8006018 <prvIsQueueEmpty>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d026      	beq.n	8005eee <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d109      	bne.n	8005ebc <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005ea8:	f001 f976 	bl	8007198 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f000 febd 	bl	8006c30 <xTaskPriorityInherit>
 8005eb6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005eb8:	f001 f9a0 	bl	80071fc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ebe:	3324      	adds	r3, #36	@ 0x24
 8005ec0:	683a      	ldr	r2, [r7, #0]
 8005ec2:	4611      	mov	r1, r2
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f000 fcaf 	bl	8006828 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005eca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005ecc:	f000 f852 	bl	8005f74 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005ed0:	f000 faf6 	bl	80064c0 <xTaskResumeAll>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	f47f af67 	bne.w	8005daa <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005edc:	4b18      	ldr	r3, [pc, #96]	@ (8005f40 <xQueueSemaphoreTake+0x21c>)
 8005ede:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ee2:	601a      	str	r2, [r3, #0]
 8005ee4:	f3bf 8f4f 	dsb	sy
 8005ee8:	f3bf 8f6f 	isb	sy
 8005eec:	e75d      	b.n	8005daa <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005eee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005ef0:	f000 f840 	bl	8005f74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ef4:	f000 fae4 	bl	80064c0 <xTaskResumeAll>
 8005ef8:	e757      	b.n	8005daa <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005efa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005efc:	f000 f83a 	bl	8005f74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f00:	f000 fade 	bl	80064c0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f04:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005f06:	f000 f887 	bl	8006018 <prvIsQueueEmpty>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f43f af4c 	beq.w	8005daa <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d00d      	beq.n	8005f34 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8005f18:	f001 f93e 	bl	8007198 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005f1c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005f1e:	f000 f811 	bl	8005f44 <prvGetDisinheritPriorityAfterTimeout>
 8005f22:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f000 fef6 	bl	8006d1c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005f30:	f001 f964 	bl	80071fc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005f34:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3738      	adds	r7, #56	@ 0x38
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	e000ed04 	.word	0xe000ed04

08005f44 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d006      	beq.n	8005f62 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f1c3 0307 	rsb	r3, r3, #7
 8005f5e:	60fb      	str	r3, [r7, #12]
 8005f60:	e001      	b.n	8005f66 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005f62:	2300      	movs	r3, #0
 8005f64:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005f66:	68fb      	ldr	r3, [r7, #12]
	}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3714      	adds	r7, #20
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005f7c:	f001 f90c 	bl	8007198 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f86:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f88:	e011      	b.n	8005fae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d012      	beq.n	8005fb8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	3324      	adds	r3, #36	@ 0x24
 8005f96:	4618      	mov	r0, r3
 8005f98:	f000 fc6c 	bl	8006874 <xTaskRemoveFromEventList>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d001      	beq.n	8005fa6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005fa2:	f000 fd45 	bl	8006a30 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005fa6:	7bfb      	ldrb	r3, [r7, #15]
 8005fa8:	3b01      	subs	r3, #1
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	dce9      	bgt.n	8005f8a <prvUnlockQueue+0x16>
 8005fb6:	e000      	b.n	8005fba <prvUnlockQueue+0x46>
					break;
 8005fb8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	22ff      	movs	r2, #255	@ 0xff
 8005fbe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005fc2:	f001 f91b 	bl	80071fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005fc6:	f001 f8e7 	bl	8007198 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005fd0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005fd2:	e011      	b.n	8005ff8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d012      	beq.n	8006002 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	3310      	adds	r3, #16
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f000 fc47 	bl	8006874 <xTaskRemoveFromEventList>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d001      	beq.n	8005ff0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005fec:	f000 fd20 	bl	8006a30 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005ff0:	7bbb      	ldrb	r3, [r7, #14]
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ff8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	dce9      	bgt.n	8005fd4 <prvUnlockQueue+0x60>
 8006000:	e000      	b.n	8006004 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006002:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	22ff      	movs	r2, #255	@ 0xff
 8006008:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800600c:	f001 f8f6 	bl	80071fc <vPortExitCritical>
}
 8006010:	bf00      	nop
 8006012:	3710      	adds	r7, #16
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006020:	f001 f8ba 	bl	8007198 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006028:	2b00      	cmp	r3, #0
 800602a:	d102      	bne.n	8006032 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800602c:	2301      	movs	r3, #1
 800602e:	60fb      	str	r3, [r7, #12]
 8006030:	e001      	b.n	8006036 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006032:	2300      	movs	r3, #0
 8006034:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006036:	f001 f8e1 	bl	80071fc <vPortExitCritical>

	return xReturn;
 800603a:	68fb      	ldr	r3, [r7, #12]
}
 800603c:	4618      	mov	r0, r3
 800603e:	3710      	adds	r7, #16
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006044:	b580      	push	{r7, lr}
 8006046:	b08e      	sub	sp, #56	@ 0x38
 8006048:	af04      	add	r7, sp, #16
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
 8006050:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006054:	2b00      	cmp	r3, #0
 8006056:	d10b      	bne.n	8006070 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800605c:	f383 8811 	msr	BASEPRI, r3
 8006060:	f3bf 8f6f 	isb	sy
 8006064:	f3bf 8f4f 	dsb	sy
 8006068:	623b      	str	r3, [r7, #32]
}
 800606a:	bf00      	nop
 800606c:	bf00      	nop
 800606e:	e7fd      	b.n	800606c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006072:	2b00      	cmp	r3, #0
 8006074:	d10b      	bne.n	800608e <xTaskCreateStatic+0x4a>
	__asm volatile
 8006076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800607a:	f383 8811 	msr	BASEPRI, r3
 800607e:	f3bf 8f6f 	isb	sy
 8006082:	f3bf 8f4f 	dsb	sy
 8006086:	61fb      	str	r3, [r7, #28]
}
 8006088:	bf00      	nop
 800608a:	bf00      	nop
 800608c:	e7fd      	b.n	800608a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800608e:	2354      	movs	r3, #84	@ 0x54
 8006090:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	2b54      	cmp	r3, #84	@ 0x54
 8006096:	d00b      	beq.n	80060b0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800609c:	f383 8811 	msr	BASEPRI, r3
 80060a0:	f3bf 8f6f 	isb	sy
 80060a4:	f3bf 8f4f 	dsb	sy
 80060a8:	61bb      	str	r3, [r7, #24]
}
 80060aa:	bf00      	nop
 80060ac:	bf00      	nop
 80060ae:	e7fd      	b.n	80060ac <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80060b0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80060b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d01e      	beq.n	80060f6 <xTaskCreateStatic+0xb2>
 80060b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d01b      	beq.n	80060f6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80060be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060c0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80060c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80060c6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80060c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ca:	2202      	movs	r2, #2
 80060cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80060d0:	2300      	movs	r3, #0
 80060d2:	9303      	str	r3, [sp, #12]
 80060d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d6:	9302      	str	r3, [sp, #8]
 80060d8:	f107 0314 	add.w	r3, r7, #20
 80060dc:	9301      	str	r3, [sp, #4]
 80060de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e0:	9300      	str	r3, [sp, #0]
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	68b9      	ldr	r1, [r7, #8]
 80060e8:	68f8      	ldr	r0, [r7, #12]
 80060ea:	f000 f850 	bl	800618e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80060ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80060f0:	f000 f8d6 	bl	80062a0 <prvAddNewTaskToReadyList>
 80060f4:	e001      	b.n	80060fa <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80060f6:	2300      	movs	r3, #0
 80060f8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80060fa:	697b      	ldr	r3, [r7, #20]
	}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3728      	adds	r7, #40	@ 0x28
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006104:	b580      	push	{r7, lr}
 8006106:	b08c      	sub	sp, #48	@ 0x30
 8006108:	af04      	add	r7, sp, #16
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	603b      	str	r3, [r7, #0]
 8006110:	4613      	mov	r3, r2
 8006112:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006114:	88fb      	ldrh	r3, [r7, #6]
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	4618      	mov	r0, r3
 800611a:	f001 f95f 	bl	80073dc <pvPortMalloc>
 800611e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00e      	beq.n	8006144 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006126:	2054      	movs	r0, #84	@ 0x54
 8006128:	f001 f958 	bl	80073dc <pvPortMalloc>
 800612c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d003      	beq.n	800613c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	631a      	str	r2, [r3, #48]	@ 0x30
 800613a:	e005      	b.n	8006148 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800613c:	6978      	ldr	r0, [r7, #20]
 800613e:	f001 fa1b 	bl	8007578 <vPortFree>
 8006142:	e001      	b.n	8006148 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006144:	2300      	movs	r3, #0
 8006146:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d017      	beq.n	800617e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006156:	88fa      	ldrh	r2, [r7, #6]
 8006158:	2300      	movs	r3, #0
 800615a:	9303      	str	r3, [sp, #12]
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	9302      	str	r3, [sp, #8]
 8006160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006162:	9301      	str	r3, [sp, #4]
 8006164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006166:	9300      	str	r3, [sp, #0]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	68b9      	ldr	r1, [r7, #8]
 800616c:	68f8      	ldr	r0, [r7, #12]
 800616e:	f000 f80e 	bl	800618e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006172:	69f8      	ldr	r0, [r7, #28]
 8006174:	f000 f894 	bl	80062a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006178:	2301      	movs	r3, #1
 800617a:	61bb      	str	r3, [r7, #24]
 800617c:	e002      	b.n	8006184 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800617e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006182:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006184:	69bb      	ldr	r3, [r7, #24]
	}
 8006186:	4618      	mov	r0, r3
 8006188:	3720      	adds	r7, #32
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800618e:	b580      	push	{r7, lr}
 8006190:	b088      	sub	sp, #32
 8006192:	af00      	add	r7, sp, #0
 8006194:	60f8      	str	r0, [r7, #12]
 8006196:	60b9      	str	r1, [r7, #8]
 8006198:	607a      	str	r2, [r7, #4]
 800619a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800619c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800619e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80061a6:	3b01      	subs	r3, #1
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	4413      	add	r3, r2
 80061ac:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	f023 0307 	bic.w	r3, r3, #7
 80061b4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	f003 0307 	and.w	r3, r3, #7
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00b      	beq.n	80061d8 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80061c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061c4:	f383 8811 	msr	BASEPRI, r3
 80061c8:	f3bf 8f6f 	isb	sy
 80061cc:	f3bf 8f4f 	dsb	sy
 80061d0:	617b      	str	r3, [r7, #20]
}
 80061d2:	bf00      	nop
 80061d4:	bf00      	nop
 80061d6:	e7fd      	b.n	80061d4 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d01f      	beq.n	800621e <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80061de:	2300      	movs	r3, #0
 80061e0:	61fb      	str	r3, [r7, #28]
 80061e2:	e012      	b.n	800620a <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80061e4:	68ba      	ldr	r2, [r7, #8]
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	4413      	add	r3, r2
 80061ea:	7819      	ldrb	r1, [r3, #0]
 80061ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	4413      	add	r3, r2
 80061f2:	3334      	adds	r3, #52	@ 0x34
 80061f4:	460a      	mov	r2, r1
 80061f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80061f8:	68ba      	ldr	r2, [r7, #8]
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	4413      	add	r3, r2
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d006      	beq.n	8006212 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	3301      	adds	r3, #1
 8006208:	61fb      	str	r3, [r7, #28]
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	2b0f      	cmp	r3, #15
 800620e:	d9e9      	bls.n	80061e4 <prvInitialiseNewTask+0x56>
 8006210:	e000      	b.n	8006214 <prvInitialiseNewTask+0x86>
			{
				break;
 8006212:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006216:	2200      	movs	r2, #0
 8006218:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800621c:	e003      	b.n	8006226 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800621e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006220:	2200      	movs	r2, #0
 8006222:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006228:	2b06      	cmp	r3, #6
 800622a:	d901      	bls.n	8006230 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800622c:	2306      	movs	r3, #6
 800622e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006232:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006234:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006238:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800623a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800623c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800623e:	2200      	movs	r2, #0
 8006240:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006244:	3304      	adds	r3, #4
 8006246:	4618      	mov	r0, r3
 8006248:	f7ff fb83 	bl	8005952 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800624c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800624e:	3318      	adds	r3, #24
 8006250:	4618      	mov	r0, r3
 8006252:	f7ff fb7e 	bl	8005952 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006258:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800625a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800625c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800625e:	f1c3 0207 	rsb	r2, r3, #7
 8006262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006264:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006268:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800626a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800626c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800626e:	2200      	movs	r2, #0
 8006270:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006274:	2200      	movs	r2, #0
 8006276:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800627a:	683a      	ldr	r2, [r7, #0]
 800627c:	68f9      	ldr	r1, [r7, #12]
 800627e:	69b8      	ldr	r0, [r7, #24]
 8006280:	f000 fe56 	bl	8006f30 <pxPortInitialiseStack>
 8006284:	4602      	mov	r2, r0
 8006286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006288:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800628a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800628c:	2b00      	cmp	r3, #0
 800628e:	d002      	beq.n	8006296 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006292:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006294:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006296:	bf00      	nop
 8006298:	3720      	adds	r7, #32
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
	...

080062a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80062a8:	f000 ff76 	bl	8007198 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80062ac:	4b2a      	ldr	r3, [pc, #168]	@ (8006358 <prvAddNewTaskToReadyList+0xb8>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	3301      	adds	r3, #1
 80062b2:	4a29      	ldr	r2, [pc, #164]	@ (8006358 <prvAddNewTaskToReadyList+0xb8>)
 80062b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80062b6:	4b29      	ldr	r3, [pc, #164]	@ (800635c <prvAddNewTaskToReadyList+0xbc>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d109      	bne.n	80062d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80062be:	4a27      	ldr	r2, [pc, #156]	@ (800635c <prvAddNewTaskToReadyList+0xbc>)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80062c4:	4b24      	ldr	r3, [pc, #144]	@ (8006358 <prvAddNewTaskToReadyList+0xb8>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d110      	bne.n	80062ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80062cc:	f000 fbd4 	bl	8006a78 <prvInitialiseTaskLists>
 80062d0:	e00d      	b.n	80062ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80062d2:	4b23      	ldr	r3, [pc, #140]	@ (8006360 <prvAddNewTaskToReadyList+0xc0>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d109      	bne.n	80062ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80062da:	4b20      	ldr	r3, [pc, #128]	@ (800635c <prvAddNewTaskToReadyList+0xbc>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d802      	bhi.n	80062ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80062e8:	4a1c      	ldr	r2, [pc, #112]	@ (800635c <prvAddNewTaskToReadyList+0xbc>)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80062ee:	4b1d      	ldr	r3, [pc, #116]	@ (8006364 <prvAddNewTaskToReadyList+0xc4>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	3301      	adds	r3, #1
 80062f4:	4a1b      	ldr	r2, [pc, #108]	@ (8006364 <prvAddNewTaskToReadyList+0xc4>)
 80062f6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062fc:	2201      	movs	r2, #1
 80062fe:	409a      	lsls	r2, r3
 8006300:	4b19      	ldr	r3, [pc, #100]	@ (8006368 <prvAddNewTaskToReadyList+0xc8>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4313      	orrs	r3, r2
 8006306:	4a18      	ldr	r2, [pc, #96]	@ (8006368 <prvAddNewTaskToReadyList+0xc8>)
 8006308:	6013      	str	r3, [r2, #0]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800630e:	4613      	mov	r3, r2
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	4413      	add	r3, r2
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	4a15      	ldr	r2, [pc, #84]	@ (800636c <prvAddNewTaskToReadyList+0xcc>)
 8006318:	441a      	add	r2, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	3304      	adds	r3, #4
 800631e:	4619      	mov	r1, r3
 8006320:	4610      	mov	r0, r2
 8006322:	f7ff fb23 	bl	800596c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006326:	f000 ff69 	bl	80071fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800632a:	4b0d      	ldr	r3, [pc, #52]	@ (8006360 <prvAddNewTaskToReadyList+0xc0>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d00e      	beq.n	8006350 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006332:	4b0a      	ldr	r3, [pc, #40]	@ (800635c <prvAddNewTaskToReadyList+0xbc>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800633c:	429a      	cmp	r2, r3
 800633e:	d207      	bcs.n	8006350 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006340:	4b0b      	ldr	r3, [pc, #44]	@ (8006370 <prvAddNewTaskToReadyList+0xd0>)
 8006342:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006346:	601a      	str	r2, [r3, #0]
 8006348:	f3bf 8f4f 	dsb	sy
 800634c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006350:	bf00      	nop
 8006352:	3708      	adds	r7, #8
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	20000894 	.word	0x20000894
 800635c:	20000794 	.word	0x20000794
 8006360:	200008a0 	.word	0x200008a0
 8006364:	200008b0 	.word	0x200008b0
 8006368:	2000089c 	.word	0x2000089c
 800636c:	20000798 	.word	0x20000798
 8006370:	e000ed04 	.word	0xe000ed04

08006374 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800637c:	2300      	movs	r3, #0
 800637e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d018      	beq.n	80063b8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006386:	4b14      	ldr	r3, [pc, #80]	@ (80063d8 <vTaskDelay+0x64>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00b      	beq.n	80063a6 <vTaskDelay+0x32>
	__asm volatile
 800638e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006392:	f383 8811 	msr	BASEPRI, r3
 8006396:	f3bf 8f6f 	isb	sy
 800639a:	f3bf 8f4f 	dsb	sy
 800639e:	60bb      	str	r3, [r7, #8]
}
 80063a0:	bf00      	nop
 80063a2:	bf00      	nop
 80063a4:	e7fd      	b.n	80063a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80063a6:	f000 f87d 	bl	80064a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80063aa:	2100      	movs	r1, #0
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 fd59 	bl	8006e64 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80063b2:	f000 f885 	bl	80064c0 <xTaskResumeAll>
 80063b6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d107      	bne.n	80063ce <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80063be:	4b07      	ldr	r3, [pc, #28]	@ (80063dc <vTaskDelay+0x68>)
 80063c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063c4:	601a      	str	r2, [r3, #0]
 80063c6:	f3bf 8f4f 	dsb	sy
 80063ca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80063ce:	bf00      	nop
 80063d0:	3710      	adds	r7, #16
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	200008bc 	.word	0x200008bc
 80063dc:	e000ed04 	.word	0xe000ed04

080063e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b08a      	sub	sp, #40	@ 0x28
 80063e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80063e6:	2300      	movs	r3, #0
 80063e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80063ea:	2300      	movs	r3, #0
 80063ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80063ee:	463a      	mov	r2, r7
 80063f0:	1d39      	adds	r1, r7, #4
 80063f2:	f107 0308 	add.w	r3, r7, #8
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7fa f8b2 	bl	8000560 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80063fc:	6839      	ldr	r1, [r7, #0]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	68ba      	ldr	r2, [r7, #8]
 8006402:	9202      	str	r2, [sp, #8]
 8006404:	9301      	str	r3, [sp, #4]
 8006406:	2300      	movs	r3, #0
 8006408:	9300      	str	r3, [sp, #0]
 800640a:	2300      	movs	r3, #0
 800640c:	460a      	mov	r2, r1
 800640e:	491f      	ldr	r1, [pc, #124]	@ (800648c <vTaskStartScheduler+0xac>)
 8006410:	481f      	ldr	r0, [pc, #124]	@ (8006490 <vTaskStartScheduler+0xb0>)
 8006412:	f7ff fe17 	bl	8006044 <xTaskCreateStatic>
 8006416:	4603      	mov	r3, r0
 8006418:	4a1e      	ldr	r2, [pc, #120]	@ (8006494 <vTaskStartScheduler+0xb4>)
 800641a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800641c:	4b1d      	ldr	r3, [pc, #116]	@ (8006494 <vTaskStartScheduler+0xb4>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d002      	beq.n	800642a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006424:	2301      	movs	r3, #1
 8006426:	617b      	str	r3, [r7, #20]
 8006428:	e001      	b.n	800642e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800642a:	2300      	movs	r3, #0
 800642c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	2b01      	cmp	r3, #1
 8006432:	d116      	bne.n	8006462 <vTaskStartScheduler+0x82>
	__asm volatile
 8006434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006438:	f383 8811 	msr	BASEPRI, r3
 800643c:	f3bf 8f6f 	isb	sy
 8006440:	f3bf 8f4f 	dsb	sy
 8006444:	613b      	str	r3, [r7, #16]
}
 8006446:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006448:	4b13      	ldr	r3, [pc, #76]	@ (8006498 <vTaskStartScheduler+0xb8>)
 800644a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800644e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006450:	4b12      	ldr	r3, [pc, #72]	@ (800649c <vTaskStartScheduler+0xbc>)
 8006452:	2201      	movs	r2, #1
 8006454:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006456:	4b12      	ldr	r3, [pc, #72]	@ (80064a0 <vTaskStartScheduler+0xc0>)
 8006458:	2200      	movs	r2, #0
 800645a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800645c:	f000 fdf8 	bl	8007050 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006460:	e00f      	b.n	8006482 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006468:	d10b      	bne.n	8006482 <vTaskStartScheduler+0xa2>
	__asm volatile
 800646a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800646e:	f383 8811 	msr	BASEPRI, r3
 8006472:	f3bf 8f6f 	isb	sy
 8006476:	f3bf 8f4f 	dsb	sy
 800647a:	60fb      	str	r3, [r7, #12]
}
 800647c:	bf00      	nop
 800647e:	bf00      	nop
 8006480:	e7fd      	b.n	800647e <vTaskStartScheduler+0x9e>
}
 8006482:	bf00      	nop
 8006484:	3718      	adds	r7, #24
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	08008e5c 	.word	0x08008e5c
 8006490:	08006a49 	.word	0x08006a49
 8006494:	200008b8 	.word	0x200008b8
 8006498:	200008b4 	.word	0x200008b4
 800649c:	200008a0 	.word	0x200008a0
 80064a0:	20000898 	.word	0x20000898

080064a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80064a4:	b480      	push	{r7}
 80064a6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80064a8:	4b04      	ldr	r3, [pc, #16]	@ (80064bc <vTaskSuspendAll+0x18>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	3301      	adds	r3, #1
 80064ae:	4a03      	ldr	r2, [pc, #12]	@ (80064bc <vTaskSuspendAll+0x18>)
 80064b0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80064b2:	bf00      	nop
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr
 80064bc:	200008bc 	.word	0x200008bc

080064c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80064c6:	2300      	movs	r3, #0
 80064c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80064ca:	2300      	movs	r3, #0
 80064cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80064ce:	4b42      	ldr	r3, [pc, #264]	@ (80065d8 <xTaskResumeAll+0x118>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d10b      	bne.n	80064ee <xTaskResumeAll+0x2e>
	__asm volatile
 80064d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064da:	f383 8811 	msr	BASEPRI, r3
 80064de:	f3bf 8f6f 	isb	sy
 80064e2:	f3bf 8f4f 	dsb	sy
 80064e6:	603b      	str	r3, [r7, #0]
}
 80064e8:	bf00      	nop
 80064ea:	bf00      	nop
 80064ec:	e7fd      	b.n	80064ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80064ee:	f000 fe53 	bl	8007198 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80064f2:	4b39      	ldr	r3, [pc, #228]	@ (80065d8 <xTaskResumeAll+0x118>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	3b01      	subs	r3, #1
 80064f8:	4a37      	ldr	r2, [pc, #220]	@ (80065d8 <xTaskResumeAll+0x118>)
 80064fa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064fc:	4b36      	ldr	r3, [pc, #216]	@ (80065d8 <xTaskResumeAll+0x118>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d161      	bne.n	80065c8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006504:	4b35      	ldr	r3, [pc, #212]	@ (80065dc <xTaskResumeAll+0x11c>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d05d      	beq.n	80065c8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800650c:	e02e      	b.n	800656c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800650e:	4b34      	ldr	r3, [pc, #208]	@ (80065e0 <xTaskResumeAll+0x120>)
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	3318      	adds	r3, #24
 800651a:	4618      	mov	r0, r3
 800651c:	f7ff fa83 	bl	8005a26 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	3304      	adds	r3, #4
 8006524:	4618      	mov	r0, r3
 8006526:	f7ff fa7e 	bl	8005a26 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800652e:	2201      	movs	r2, #1
 8006530:	409a      	lsls	r2, r3
 8006532:	4b2c      	ldr	r3, [pc, #176]	@ (80065e4 <xTaskResumeAll+0x124>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4313      	orrs	r3, r2
 8006538:	4a2a      	ldr	r2, [pc, #168]	@ (80065e4 <xTaskResumeAll+0x124>)
 800653a:	6013      	str	r3, [r2, #0]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006540:	4613      	mov	r3, r2
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	4413      	add	r3, r2
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	4a27      	ldr	r2, [pc, #156]	@ (80065e8 <xTaskResumeAll+0x128>)
 800654a:	441a      	add	r2, r3
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	3304      	adds	r3, #4
 8006550:	4619      	mov	r1, r3
 8006552:	4610      	mov	r0, r2
 8006554:	f7ff fa0a 	bl	800596c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800655c:	4b23      	ldr	r3, [pc, #140]	@ (80065ec <xTaskResumeAll+0x12c>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006562:	429a      	cmp	r2, r3
 8006564:	d302      	bcc.n	800656c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006566:	4b22      	ldr	r3, [pc, #136]	@ (80065f0 <xTaskResumeAll+0x130>)
 8006568:	2201      	movs	r2, #1
 800656a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800656c:	4b1c      	ldr	r3, [pc, #112]	@ (80065e0 <xTaskResumeAll+0x120>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1cc      	bne.n	800650e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d001      	beq.n	800657e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800657a:	f000 fb1b 	bl	8006bb4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800657e:	4b1d      	ldr	r3, [pc, #116]	@ (80065f4 <xTaskResumeAll+0x134>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d010      	beq.n	80065ac <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800658a:	f000 f837 	bl	80065fc <xTaskIncrementTick>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d002      	beq.n	800659a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006594:	4b16      	ldr	r3, [pc, #88]	@ (80065f0 <xTaskResumeAll+0x130>)
 8006596:	2201      	movs	r2, #1
 8006598:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	3b01      	subs	r3, #1
 800659e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1f1      	bne.n	800658a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80065a6:	4b13      	ldr	r3, [pc, #76]	@ (80065f4 <xTaskResumeAll+0x134>)
 80065a8:	2200      	movs	r2, #0
 80065aa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80065ac:	4b10      	ldr	r3, [pc, #64]	@ (80065f0 <xTaskResumeAll+0x130>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d009      	beq.n	80065c8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80065b4:	2301      	movs	r3, #1
 80065b6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80065b8:	4b0f      	ldr	r3, [pc, #60]	@ (80065f8 <xTaskResumeAll+0x138>)
 80065ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065be:	601a      	str	r2, [r3, #0]
 80065c0:	f3bf 8f4f 	dsb	sy
 80065c4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80065c8:	f000 fe18 	bl	80071fc <vPortExitCritical>

	return xAlreadyYielded;
 80065cc:	68bb      	ldr	r3, [r7, #8]
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	200008bc 	.word	0x200008bc
 80065dc:	20000894 	.word	0x20000894
 80065e0:	20000854 	.word	0x20000854
 80065e4:	2000089c 	.word	0x2000089c
 80065e8:	20000798 	.word	0x20000798
 80065ec:	20000794 	.word	0x20000794
 80065f0:	200008a8 	.word	0x200008a8
 80065f4:	200008a4 	.word	0x200008a4
 80065f8:	e000ed04 	.word	0xe000ed04

080065fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b086      	sub	sp, #24
 8006600:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006602:	2300      	movs	r3, #0
 8006604:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006606:	4b4f      	ldr	r3, [pc, #316]	@ (8006744 <xTaskIncrementTick+0x148>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2b00      	cmp	r3, #0
 800660c:	f040 808f 	bne.w	800672e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006610:	4b4d      	ldr	r3, [pc, #308]	@ (8006748 <xTaskIncrementTick+0x14c>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	3301      	adds	r3, #1
 8006616:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006618:	4a4b      	ldr	r2, [pc, #300]	@ (8006748 <xTaskIncrementTick+0x14c>)
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d121      	bne.n	8006668 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006624:	4b49      	ldr	r3, [pc, #292]	@ (800674c <xTaskIncrementTick+0x150>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00b      	beq.n	8006646 <xTaskIncrementTick+0x4a>
	__asm volatile
 800662e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006632:	f383 8811 	msr	BASEPRI, r3
 8006636:	f3bf 8f6f 	isb	sy
 800663a:	f3bf 8f4f 	dsb	sy
 800663e:	603b      	str	r3, [r7, #0]
}
 8006640:	bf00      	nop
 8006642:	bf00      	nop
 8006644:	e7fd      	b.n	8006642 <xTaskIncrementTick+0x46>
 8006646:	4b41      	ldr	r3, [pc, #260]	@ (800674c <xTaskIncrementTick+0x150>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	60fb      	str	r3, [r7, #12]
 800664c:	4b40      	ldr	r3, [pc, #256]	@ (8006750 <xTaskIncrementTick+0x154>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a3e      	ldr	r2, [pc, #248]	@ (800674c <xTaskIncrementTick+0x150>)
 8006652:	6013      	str	r3, [r2, #0]
 8006654:	4a3e      	ldr	r2, [pc, #248]	@ (8006750 <xTaskIncrementTick+0x154>)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6013      	str	r3, [r2, #0]
 800665a:	4b3e      	ldr	r3, [pc, #248]	@ (8006754 <xTaskIncrementTick+0x158>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	3301      	adds	r3, #1
 8006660:	4a3c      	ldr	r2, [pc, #240]	@ (8006754 <xTaskIncrementTick+0x158>)
 8006662:	6013      	str	r3, [r2, #0]
 8006664:	f000 faa6 	bl	8006bb4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006668:	4b3b      	ldr	r3, [pc, #236]	@ (8006758 <xTaskIncrementTick+0x15c>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	693a      	ldr	r2, [r7, #16]
 800666e:	429a      	cmp	r2, r3
 8006670:	d348      	bcc.n	8006704 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006672:	4b36      	ldr	r3, [pc, #216]	@ (800674c <xTaskIncrementTick+0x150>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d104      	bne.n	8006686 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800667c:	4b36      	ldr	r3, [pc, #216]	@ (8006758 <xTaskIncrementTick+0x15c>)
 800667e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006682:	601a      	str	r2, [r3, #0]
					break;
 8006684:	e03e      	b.n	8006704 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006686:	4b31      	ldr	r3, [pc, #196]	@ (800674c <xTaskIncrementTick+0x150>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006696:	693a      	ldr	r2, [r7, #16]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	429a      	cmp	r2, r3
 800669c:	d203      	bcs.n	80066a6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800669e:	4a2e      	ldr	r2, [pc, #184]	@ (8006758 <xTaskIncrementTick+0x15c>)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80066a4:	e02e      	b.n	8006704 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	3304      	adds	r3, #4
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7ff f9bb 	bl	8005a26 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d004      	beq.n	80066c2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	3318      	adds	r3, #24
 80066bc:	4618      	mov	r0, r3
 80066be:	f7ff f9b2 	bl	8005a26 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066c6:	2201      	movs	r2, #1
 80066c8:	409a      	lsls	r2, r3
 80066ca:	4b24      	ldr	r3, [pc, #144]	@ (800675c <xTaskIncrementTick+0x160>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	4a22      	ldr	r2, [pc, #136]	@ (800675c <xTaskIncrementTick+0x160>)
 80066d2:	6013      	str	r3, [r2, #0]
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066d8:	4613      	mov	r3, r2
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	4413      	add	r3, r2
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	4a1f      	ldr	r2, [pc, #124]	@ (8006760 <xTaskIncrementTick+0x164>)
 80066e2:	441a      	add	r2, r3
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	3304      	adds	r3, #4
 80066e8:	4619      	mov	r1, r3
 80066ea:	4610      	mov	r0, r2
 80066ec:	f7ff f93e 	bl	800596c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066f4:	4b1b      	ldr	r3, [pc, #108]	@ (8006764 <xTaskIncrementTick+0x168>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d3b9      	bcc.n	8006672 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80066fe:	2301      	movs	r3, #1
 8006700:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006702:	e7b6      	b.n	8006672 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006704:	4b17      	ldr	r3, [pc, #92]	@ (8006764 <xTaskIncrementTick+0x168>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800670a:	4915      	ldr	r1, [pc, #84]	@ (8006760 <xTaskIncrementTick+0x164>)
 800670c:	4613      	mov	r3, r2
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	4413      	add	r3, r2
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	440b      	add	r3, r1
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2b01      	cmp	r3, #1
 800671a:	d901      	bls.n	8006720 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800671c:	2301      	movs	r3, #1
 800671e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006720:	4b11      	ldr	r3, [pc, #68]	@ (8006768 <xTaskIncrementTick+0x16c>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d007      	beq.n	8006738 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006728:	2301      	movs	r3, #1
 800672a:	617b      	str	r3, [r7, #20]
 800672c:	e004      	b.n	8006738 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800672e:	4b0f      	ldr	r3, [pc, #60]	@ (800676c <xTaskIncrementTick+0x170>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	3301      	adds	r3, #1
 8006734:	4a0d      	ldr	r2, [pc, #52]	@ (800676c <xTaskIncrementTick+0x170>)
 8006736:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006738:	697b      	ldr	r3, [r7, #20]
}
 800673a:	4618      	mov	r0, r3
 800673c:	3718      	adds	r7, #24
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	200008bc 	.word	0x200008bc
 8006748:	20000898 	.word	0x20000898
 800674c:	2000084c 	.word	0x2000084c
 8006750:	20000850 	.word	0x20000850
 8006754:	200008ac 	.word	0x200008ac
 8006758:	200008b4 	.word	0x200008b4
 800675c:	2000089c 	.word	0x2000089c
 8006760:	20000798 	.word	0x20000798
 8006764:	20000794 	.word	0x20000794
 8006768:	200008a8 	.word	0x200008a8
 800676c:	200008a4 	.word	0x200008a4

08006770 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006770:	b480      	push	{r7}
 8006772:	b087      	sub	sp, #28
 8006774:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006776:	4b27      	ldr	r3, [pc, #156]	@ (8006814 <vTaskSwitchContext+0xa4>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d003      	beq.n	8006786 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800677e:	4b26      	ldr	r3, [pc, #152]	@ (8006818 <vTaskSwitchContext+0xa8>)
 8006780:	2201      	movs	r2, #1
 8006782:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006784:	e040      	b.n	8006808 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006786:	4b24      	ldr	r3, [pc, #144]	@ (8006818 <vTaskSwitchContext+0xa8>)
 8006788:	2200      	movs	r2, #0
 800678a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800678c:	4b23      	ldr	r3, [pc, #140]	@ (800681c <vTaskSwitchContext+0xac>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	fab3 f383 	clz	r3, r3
 8006798:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800679a:	7afb      	ldrb	r3, [r7, #11]
 800679c:	f1c3 031f 	rsb	r3, r3, #31
 80067a0:	617b      	str	r3, [r7, #20]
 80067a2:	491f      	ldr	r1, [pc, #124]	@ (8006820 <vTaskSwitchContext+0xb0>)
 80067a4:	697a      	ldr	r2, [r7, #20]
 80067a6:	4613      	mov	r3, r2
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	4413      	add	r3, r2
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	440b      	add	r3, r1
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d10b      	bne.n	80067ce <vTaskSwitchContext+0x5e>
	__asm volatile
 80067b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ba:	f383 8811 	msr	BASEPRI, r3
 80067be:	f3bf 8f6f 	isb	sy
 80067c2:	f3bf 8f4f 	dsb	sy
 80067c6:	607b      	str	r3, [r7, #4]
}
 80067c8:	bf00      	nop
 80067ca:	bf00      	nop
 80067cc:	e7fd      	b.n	80067ca <vTaskSwitchContext+0x5a>
 80067ce:	697a      	ldr	r2, [r7, #20]
 80067d0:	4613      	mov	r3, r2
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	4413      	add	r3, r2
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	4a11      	ldr	r2, [pc, #68]	@ (8006820 <vTaskSwitchContext+0xb0>)
 80067da:	4413      	add	r3, r2
 80067dc:	613b      	str	r3, [r7, #16]
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	685a      	ldr	r2, [r3, #4]
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	605a      	str	r2, [r3, #4]
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	685a      	ldr	r2, [r3, #4]
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	3308      	adds	r3, #8
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d104      	bne.n	80067fe <vTaskSwitchContext+0x8e>
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	685a      	ldr	r2, [r3, #4]
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	605a      	str	r2, [r3, #4]
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	4a07      	ldr	r2, [pc, #28]	@ (8006824 <vTaskSwitchContext+0xb4>)
 8006806:	6013      	str	r3, [r2, #0]
}
 8006808:	bf00      	nop
 800680a:	371c      	adds	r7, #28
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr
 8006814:	200008bc 	.word	0x200008bc
 8006818:	200008a8 	.word	0x200008a8
 800681c:	2000089c 	.word	0x2000089c
 8006820:	20000798 	.word	0x20000798
 8006824:	20000794 	.word	0x20000794

08006828 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d10b      	bne.n	8006850 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800683c:	f383 8811 	msr	BASEPRI, r3
 8006840:	f3bf 8f6f 	isb	sy
 8006844:	f3bf 8f4f 	dsb	sy
 8006848:	60fb      	str	r3, [r7, #12]
}
 800684a:	bf00      	nop
 800684c:	bf00      	nop
 800684e:	e7fd      	b.n	800684c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006850:	4b07      	ldr	r3, [pc, #28]	@ (8006870 <vTaskPlaceOnEventList+0x48>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	3318      	adds	r3, #24
 8006856:	4619      	mov	r1, r3
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f7ff f8ab 	bl	80059b4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800685e:	2101      	movs	r1, #1
 8006860:	6838      	ldr	r0, [r7, #0]
 8006862:	f000 faff 	bl	8006e64 <prvAddCurrentTaskToDelayedList>
}
 8006866:	bf00      	nop
 8006868:	3710      	adds	r7, #16
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	20000794 	.word	0x20000794

08006874 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b086      	sub	sp, #24
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d10b      	bne.n	80068a2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800688a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800688e:	f383 8811 	msr	BASEPRI, r3
 8006892:	f3bf 8f6f 	isb	sy
 8006896:	f3bf 8f4f 	dsb	sy
 800689a:	60fb      	str	r3, [r7, #12]
}
 800689c:	bf00      	nop
 800689e:	bf00      	nop
 80068a0:	e7fd      	b.n	800689e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	3318      	adds	r3, #24
 80068a6:	4618      	mov	r0, r3
 80068a8:	f7ff f8bd 	bl	8005a26 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068ac:	4b1d      	ldr	r3, [pc, #116]	@ (8006924 <xTaskRemoveFromEventList+0xb0>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d11c      	bne.n	80068ee <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	3304      	adds	r3, #4
 80068b8:	4618      	mov	r0, r3
 80068ba:	f7ff f8b4 	bl	8005a26 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068c2:	2201      	movs	r2, #1
 80068c4:	409a      	lsls	r2, r3
 80068c6:	4b18      	ldr	r3, [pc, #96]	@ (8006928 <xTaskRemoveFromEventList+0xb4>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	4a16      	ldr	r2, [pc, #88]	@ (8006928 <xTaskRemoveFromEventList+0xb4>)
 80068ce:	6013      	str	r3, [r2, #0]
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068d4:	4613      	mov	r3, r2
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	4413      	add	r3, r2
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	4a13      	ldr	r2, [pc, #76]	@ (800692c <xTaskRemoveFromEventList+0xb8>)
 80068de:	441a      	add	r2, r3
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	3304      	adds	r3, #4
 80068e4:	4619      	mov	r1, r3
 80068e6:	4610      	mov	r0, r2
 80068e8:	f7ff f840 	bl	800596c <vListInsertEnd>
 80068ec:	e005      	b.n	80068fa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	3318      	adds	r3, #24
 80068f2:	4619      	mov	r1, r3
 80068f4:	480e      	ldr	r0, [pc, #56]	@ (8006930 <xTaskRemoveFromEventList+0xbc>)
 80068f6:	f7ff f839 	bl	800596c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006934 <xTaskRemoveFromEventList+0xc0>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006904:	429a      	cmp	r2, r3
 8006906:	d905      	bls.n	8006914 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006908:	2301      	movs	r3, #1
 800690a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800690c:	4b0a      	ldr	r3, [pc, #40]	@ (8006938 <xTaskRemoveFromEventList+0xc4>)
 800690e:	2201      	movs	r2, #1
 8006910:	601a      	str	r2, [r3, #0]
 8006912:	e001      	b.n	8006918 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006914:	2300      	movs	r3, #0
 8006916:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006918:	697b      	ldr	r3, [r7, #20]
}
 800691a:	4618      	mov	r0, r3
 800691c:	3718      	adds	r7, #24
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	200008bc 	.word	0x200008bc
 8006928:	2000089c 	.word	0x2000089c
 800692c:	20000798 	.word	0x20000798
 8006930:	20000854 	.word	0x20000854
 8006934:	20000794 	.word	0x20000794
 8006938:	200008a8 	.word	0x200008a8

0800693c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006944:	4b06      	ldr	r3, [pc, #24]	@ (8006960 <vTaskInternalSetTimeOutState+0x24>)
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800694c:	4b05      	ldr	r3, [pc, #20]	@ (8006964 <vTaskInternalSetTimeOutState+0x28>)
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	605a      	str	r2, [r3, #4]
}
 8006954:	bf00      	nop
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr
 8006960:	200008ac 	.word	0x200008ac
 8006964:	20000898 	.word	0x20000898

08006968 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b088      	sub	sp, #32
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d10b      	bne.n	8006990 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800697c:	f383 8811 	msr	BASEPRI, r3
 8006980:	f3bf 8f6f 	isb	sy
 8006984:	f3bf 8f4f 	dsb	sy
 8006988:	613b      	str	r3, [r7, #16]
}
 800698a:	bf00      	nop
 800698c:	bf00      	nop
 800698e:	e7fd      	b.n	800698c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d10b      	bne.n	80069ae <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800699a:	f383 8811 	msr	BASEPRI, r3
 800699e:	f3bf 8f6f 	isb	sy
 80069a2:	f3bf 8f4f 	dsb	sy
 80069a6:	60fb      	str	r3, [r7, #12]
}
 80069a8:	bf00      	nop
 80069aa:	bf00      	nop
 80069ac:	e7fd      	b.n	80069aa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80069ae:	f000 fbf3 	bl	8007198 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80069b2:	4b1d      	ldr	r3, [pc, #116]	@ (8006a28 <xTaskCheckForTimeOut+0xc0>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	69ba      	ldr	r2, [r7, #24]
 80069be:	1ad3      	subs	r3, r2, r3
 80069c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80069ca:	d102      	bne.n	80069d2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80069cc:	2300      	movs	r3, #0
 80069ce:	61fb      	str	r3, [r7, #28]
 80069d0:	e023      	b.n	8006a1a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	4b15      	ldr	r3, [pc, #84]	@ (8006a2c <xTaskCheckForTimeOut+0xc4>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	429a      	cmp	r2, r3
 80069dc:	d007      	beq.n	80069ee <xTaskCheckForTimeOut+0x86>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	69ba      	ldr	r2, [r7, #24]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d302      	bcc.n	80069ee <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80069e8:	2301      	movs	r3, #1
 80069ea:	61fb      	str	r3, [r7, #28]
 80069ec:	e015      	b.n	8006a1a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	697a      	ldr	r2, [r7, #20]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d20b      	bcs.n	8006a10 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	1ad2      	subs	r2, r2, r3
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f7ff ff99 	bl	800693c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	61fb      	str	r3, [r7, #28]
 8006a0e:	e004      	b.n	8006a1a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	2200      	movs	r2, #0
 8006a14:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006a16:	2301      	movs	r3, #1
 8006a18:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006a1a:	f000 fbef 	bl	80071fc <vPortExitCritical>

	return xReturn;
 8006a1e:	69fb      	ldr	r3, [r7, #28]
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3720      	adds	r7, #32
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}
 8006a28:	20000898 	.word	0x20000898
 8006a2c:	200008ac 	.word	0x200008ac

08006a30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006a30:	b480      	push	{r7}
 8006a32:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006a34:	4b03      	ldr	r3, [pc, #12]	@ (8006a44 <vTaskMissedYield+0x14>)
 8006a36:	2201      	movs	r2, #1
 8006a38:	601a      	str	r2, [r3, #0]
}
 8006a3a:	bf00      	nop
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr
 8006a44:	200008a8 	.word	0x200008a8

08006a48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006a50:	f000 f852 	bl	8006af8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006a54:	4b06      	ldr	r3, [pc, #24]	@ (8006a70 <prvIdleTask+0x28>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d9f9      	bls.n	8006a50 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006a5c:	4b05      	ldr	r3, [pc, #20]	@ (8006a74 <prvIdleTask+0x2c>)
 8006a5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a62:	601a      	str	r2, [r3, #0]
 8006a64:	f3bf 8f4f 	dsb	sy
 8006a68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006a6c:	e7f0      	b.n	8006a50 <prvIdleTask+0x8>
 8006a6e:	bf00      	nop
 8006a70:	20000798 	.word	0x20000798
 8006a74:	e000ed04 	.word	0xe000ed04

08006a78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a7e:	2300      	movs	r3, #0
 8006a80:	607b      	str	r3, [r7, #4]
 8006a82:	e00c      	b.n	8006a9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	4613      	mov	r3, r2
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	4413      	add	r3, r2
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	4a12      	ldr	r2, [pc, #72]	@ (8006ad8 <prvInitialiseTaskLists+0x60>)
 8006a90:	4413      	add	r3, r2
 8006a92:	4618      	mov	r0, r3
 8006a94:	f7fe ff3d 	bl	8005912 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	607b      	str	r3, [r7, #4]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2b06      	cmp	r3, #6
 8006aa2:	d9ef      	bls.n	8006a84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006aa4:	480d      	ldr	r0, [pc, #52]	@ (8006adc <prvInitialiseTaskLists+0x64>)
 8006aa6:	f7fe ff34 	bl	8005912 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006aaa:	480d      	ldr	r0, [pc, #52]	@ (8006ae0 <prvInitialiseTaskLists+0x68>)
 8006aac:	f7fe ff31 	bl	8005912 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006ab0:	480c      	ldr	r0, [pc, #48]	@ (8006ae4 <prvInitialiseTaskLists+0x6c>)
 8006ab2:	f7fe ff2e 	bl	8005912 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006ab6:	480c      	ldr	r0, [pc, #48]	@ (8006ae8 <prvInitialiseTaskLists+0x70>)
 8006ab8:	f7fe ff2b 	bl	8005912 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006abc:	480b      	ldr	r0, [pc, #44]	@ (8006aec <prvInitialiseTaskLists+0x74>)
 8006abe:	f7fe ff28 	bl	8005912 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8006af0 <prvInitialiseTaskLists+0x78>)
 8006ac4:	4a05      	ldr	r2, [pc, #20]	@ (8006adc <prvInitialiseTaskLists+0x64>)
 8006ac6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8006af4 <prvInitialiseTaskLists+0x7c>)
 8006aca:	4a05      	ldr	r2, [pc, #20]	@ (8006ae0 <prvInitialiseTaskLists+0x68>)
 8006acc:	601a      	str	r2, [r3, #0]
}
 8006ace:	bf00      	nop
 8006ad0:	3708      	adds	r7, #8
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	20000798 	.word	0x20000798
 8006adc:	20000824 	.word	0x20000824
 8006ae0:	20000838 	.word	0x20000838
 8006ae4:	20000854 	.word	0x20000854
 8006ae8:	20000868 	.word	0x20000868
 8006aec:	20000880 	.word	0x20000880
 8006af0:	2000084c 	.word	0x2000084c
 8006af4:	20000850 	.word	0x20000850

08006af8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006afe:	e019      	b.n	8006b34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006b00:	f000 fb4a 	bl	8007198 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b04:	4b10      	ldr	r3, [pc, #64]	@ (8006b48 <prvCheckTasksWaitingTermination+0x50>)
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	3304      	adds	r3, #4
 8006b10:	4618      	mov	r0, r3
 8006b12:	f7fe ff88 	bl	8005a26 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006b16:	4b0d      	ldr	r3, [pc, #52]	@ (8006b4c <prvCheckTasksWaitingTermination+0x54>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	4a0b      	ldr	r2, [pc, #44]	@ (8006b4c <prvCheckTasksWaitingTermination+0x54>)
 8006b1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006b20:	4b0b      	ldr	r3, [pc, #44]	@ (8006b50 <prvCheckTasksWaitingTermination+0x58>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	3b01      	subs	r3, #1
 8006b26:	4a0a      	ldr	r2, [pc, #40]	@ (8006b50 <prvCheckTasksWaitingTermination+0x58>)
 8006b28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006b2a:	f000 fb67 	bl	80071fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 f810 	bl	8006b54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b34:	4b06      	ldr	r3, [pc, #24]	@ (8006b50 <prvCheckTasksWaitingTermination+0x58>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d1e1      	bne.n	8006b00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006b3c:	bf00      	nop
 8006b3e:	bf00      	nop
 8006b40:	3708      	adds	r7, #8
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	20000868 	.word	0x20000868
 8006b4c:	20000894 	.word	0x20000894
 8006b50:	2000087c 	.word	0x2000087c

08006b54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d108      	bne.n	8006b78 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f000 fd04 	bl	8007578 <vPortFree>
				vPortFree( pxTCB );
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 fd01 	bl	8007578 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006b76:	e019      	b.n	8006bac <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d103      	bne.n	8006b8a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 fcf8 	bl	8007578 <vPortFree>
	}
 8006b88:	e010      	b.n	8006bac <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	d00b      	beq.n	8006bac <prvDeleteTCB+0x58>
	__asm volatile
 8006b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b98:	f383 8811 	msr	BASEPRI, r3
 8006b9c:	f3bf 8f6f 	isb	sy
 8006ba0:	f3bf 8f4f 	dsb	sy
 8006ba4:	60fb      	str	r3, [r7, #12]
}
 8006ba6:	bf00      	nop
 8006ba8:	bf00      	nop
 8006baa:	e7fd      	b.n	8006ba8 <prvDeleteTCB+0x54>
	}
 8006bac:	bf00      	nop
 8006bae:	3710      	adds	r7, #16
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bba:	4b0c      	ldr	r3, [pc, #48]	@ (8006bec <prvResetNextTaskUnblockTime+0x38>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d104      	bne.n	8006bce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006bc4:	4b0a      	ldr	r3, [pc, #40]	@ (8006bf0 <prvResetNextTaskUnblockTime+0x3c>)
 8006bc6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006bca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006bcc:	e008      	b.n	8006be0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bce:	4b07      	ldr	r3, [pc, #28]	@ (8006bec <prvResetNextTaskUnblockTime+0x38>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	4a04      	ldr	r2, [pc, #16]	@ (8006bf0 <prvResetNextTaskUnblockTime+0x3c>)
 8006bde:	6013      	str	r3, [r2, #0]
}
 8006be0:	bf00      	nop
 8006be2:	370c      	adds	r7, #12
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr
 8006bec:	2000084c 	.word	0x2000084c
 8006bf0:	200008b4 	.word	0x200008b4

08006bf4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8006c28 <xTaskGetSchedulerState+0x34>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d102      	bne.n	8006c08 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006c02:	2301      	movs	r3, #1
 8006c04:	607b      	str	r3, [r7, #4]
 8006c06:	e008      	b.n	8006c1a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c08:	4b08      	ldr	r3, [pc, #32]	@ (8006c2c <xTaskGetSchedulerState+0x38>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d102      	bne.n	8006c16 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006c10:	2302      	movs	r3, #2
 8006c12:	607b      	str	r3, [r7, #4]
 8006c14:	e001      	b.n	8006c1a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006c16:	2300      	movs	r3, #0
 8006c18:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006c1a:	687b      	ldr	r3, [r7, #4]
	}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	370c      	adds	r7, #12
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr
 8006c28:	200008a0 	.word	0x200008a0
 8006c2c:	200008bc 	.word	0x200008bc

08006c30 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d05e      	beq.n	8006d04 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c4a:	4b31      	ldr	r3, [pc, #196]	@ (8006d10 <xTaskPriorityInherit+0xe0>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d24e      	bcs.n	8006cf2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	699b      	ldr	r3, [r3, #24]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	db06      	blt.n	8006c6a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c5c:	4b2c      	ldr	r3, [pc, #176]	@ (8006d10 <xTaskPriorityInherit+0xe0>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c62:	f1c3 0207 	rsb	r2, r3, #7
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	6959      	ldr	r1, [r3, #20]
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c72:	4613      	mov	r3, r2
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	4413      	add	r3, r2
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	4a26      	ldr	r2, [pc, #152]	@ (8006d14 <xTaskPriorityInherit+0xe4>)
 8006c7c:	4413      	add	r3, r2
 8006c7e:	4299      	cmp	r1, r3
 8006c80:	d12f      	bne.n	8006ce2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	3304      	adds	r3, #4
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7fe fecd 	bl	8005a26 <uxListRemove>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d10a      	bne.n	8006ca8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c96:	2201      	movs	r2, #1
 8006c98:	fa02 f303 	lsl.w	r3, r2, r3
 8006c9c:	43da      	mvns	r2, r3
 8006c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8006d18 <xTaskPriorityInherit+0xe8>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	4a1c      	ldr	r2, [pc, #112]	@ (8006d18 <xTaskPriorityInherit+0xe8>)
 8006ca6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006ca8:	4b19      	ldr	r3, [pc, #100]	@ (8006d10 <xTaskPriorityInherit+0xe0>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	409a      	lsls	r2, r3
 8006cba:	4b17      	ldr	r3, [pc, #92]	@ (8006d18 <xTaskPriorityInherit+0xe8>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	4a15      	ldr	r2, [pc, #84]	@ (8006d18 <xTaskPriorityInherit+0xe8>)
 8006cc2:	6013      	str	r3, [r2, #0]
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cc8:	4613      	mov	r3, r2
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	4413      	add	r3, r2
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	4a10      	ldr	r2, [pc, #64]	@ (8006d14 <xTaskPriorityInherit+0xe4>)
 8006cd2:	441a      	add	r2, r3
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	3304      	adds	r3, #4
 8006cd8:	4619      	mov	r1, r3
 8006cda:	4610      	mov	r0, r2
 8006cdc:	f7fe fe46 	bl	800596c <vListInsertEnd>
 8006ce0:	e004      	b.n	8006cec <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8006d10 <xTaskPriorityInherit+0xe0>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006cec:	2301      	movs	r3, #1
 8006cee:	60fb      	str	r3, [r7, #12]
 8006cf0:	e008      	b.n	8006d04 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006cf6:	4b06      	ldr	r3, [pc, #24]	@ (8006d10 <xTaskPriorityInherit+0xe0>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d201      	bcs.n	8006d04 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006d00:	2301      	movs	r3, #1
 8006d02:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006d04:	68fb      	ldr	r3, [r7, #12]
	}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3710      	adds	r7, #16
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	20000794 	.word	0x20000794
 8006d14:	20000798 	.word	0x20000798
 8006d18:	2000089c 	.word	0x2000089c

08006d1c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b088      	sub	sp, #32
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d079      	beq.n	8006e28 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d10b      	bne.n	8006d54 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d40:	f383 8811 	msr	BASEPRI, r3
 8006d44:	f3bf 8f6f 	isb	sy
 8006d48:	f3bf 8f4f 	dsb	sy
 8006d4c:	60fb      	str	r3, [r7, #12]
}
 8006d4e:	bf00      	nop
 8006d50:	bf00      	nop
 8006d52:	e7fd      	b.n	8006d50 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006d54:	69bb      	ldr	r3, [r7, #24]
 8006d56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d58:	683a      	ldr	r2, [r7, #0]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d902      	bls.n	8006d64 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	61fb      	str	r3, [r7, #28]
 8006d62:	e002      	b.n	8006d6a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d68:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006d6a:	69bb      	ldr	r3, [r7, #24]
 8006d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d6e:	69fa      	ldr	r2, [r7, #28]
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d059      	beq.n	8006e28 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d78:	697a      	ldr	r2, [r7, #20]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d154      	bne.n	8006e28 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006d7e:	4b2c      	ldr	r3, [pc, #176]	@ (8006e30 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	69ba      	ldr	r2, [r7, #24]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d10b      	bne.n	8006da0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8006d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d8c:	f383 8811 	msr	BASEPRI, r3
 8006d90:	f3bf 8f6f 	isb	sy
 8006d94:	f3bf 8f4f 	dsb	sy
 8006d98:	60bb      	str	r3, [r7, #8]
}
 8006d9a:	bf00      	nop
 8006d9c:	bf00      	nop
 8006d9e:	e7fd      	b.n	8006d9c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006da4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	69fa      	ldr	r2, [r7, #28]
 8006daa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	699b      	ldr	r3, [r3, #24]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	db04      	blt.n	8006dbe <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	f1c3 0207 	rsb	r2, r3, #7
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	6959      	ldr	r1, [r3, #20]
 8006dc2:	693a      	ldr	r2, [r7, #16]
 8006dc4:	4613      	mov	r3, r2
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	4413      	add	r3, r2
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	4a19      	ldr	r2, [pc, #100]	@ (8006e34 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006dce:	4413      	add	r3, r2
 8006dd0:	4299      	cmp	r1, r3
 8006dd2:	d129      	bne.n	8006e28 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006dd4:	69bb      	ldr	r3, [r7, #24]
 8006dd6:	3304      	adds	r3, #4
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f7fe fe24 	bl	8005a26 <uxListRemove>
 8006dde:	4603      	mov	r3, r0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d10a      	bne.n	8006dfa <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006de4:	69bb      	ldr	r3, [r7, #24]
 8006de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006de8:	2201      	movs	r2, #1
 8006dea:	fa02 f303 	lsl.w	r3, r2, r3
 8006dee:	43da      	mvns	r2, r3
 8006df0:	4b11      	ldr	r3, [pc, #68]	@ (8006e38 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4013      	ands	r3, r2
 8006df6:	4a10      	ldr	r2, [pc, #64]	@ (8006e38 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006df8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dfe:	2201      	movs	r2, #1
 8006e00:	409a      	lsls	r2, r3
 8006e02:	4b0d      	ldr	r3, [pc, #52]	@ (8006e38 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	4a0b      	ldr	r2, [pc, #44]	@ (8006e38 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006e0a:	6013      	str	r3, [r2, #0]
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e10:	4613      	mov	r3, r2
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	4413      	add	r3, r2
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	4a06      	ldr	r2, [pc, #24]	@ (8006e34 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006e1a:	441a      	add	r2, r3
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	3304      	adds	r3, #4
 8006e20:	4619      	mov	r1, r3
 8006e22:	4610      	mov	r0, r2
 8006e24:	f7fe fda2 	bl	800596c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e28:	bf00      	nop
 8006e2a:	3720      	adds	r7, #32
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	20000794 	.word	0x20000794
 8006e34:	20000798 	.word	0x20000798
 8006e38:	2000089c 	.word	0x2000089c

08006e3c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006e3c:	b480      	push	{r7}
 8006e3e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006e40:	4b07      	ldr	r3, [pc, #28]	@ (8006e60 <pvTaskIncrementMutexHeldCount+0x24>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d004      	beq.n	8006e52 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006e48:	4b05      	ldr	r3, [pc, #20]	@ (8006e60 <pvTaskIncrementMutexHeldCount+0x24>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006e4e:	3201      	adds	r2, #1
 8006e50:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8006e52:	4b03      	ldr	r3, [pc, #12]	@ (8006e60 <pvTaskIncrementMutexHeldCount+0x24>)
 8006e54:	681b      	ldr	r3, [r3, #0]
	}
 8006e56:	4618      	mov	r0, r3
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr
 8006e60:	20000794 	.word	0x20000794

08006e64 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006e6e:	4b29      	ldr	r3, [pc, #164]	@ (8006f14 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e74:	4b28      	ldr	r3, [pc, #160]	@ (8006f18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	3304      	adds	r3, #4
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f7fe fdd3 	bl	8005a26 <uxListRemove>
 8006e80:	4603      	mov	r3, r0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d10b      	bne.n	8006e9e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006e86:	4b24      	ldr	r3, [pc, #144]	@ (8006f18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e92:	43da      	mvns	r2, r3
 8006e94:	4b21      	ldr	r3, [pc, #132]	@ (8006f1c <prvAddCurrentTaskToDelayedList+0xb8>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4013      	ands	r3, r2
 8006e9a:	4a20      	ldr	r2, [pc, #128]	@ (8006f1c <prvAddCurrentTaskToDelayedList+0xb8>)
 8006e9c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006ea4:	d10a      	bne.n	8006ebc <prvAddCurrentTaskToDelayedList+0x58>
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d007      	beq.n	8006ebc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006eac:	4b1a      	ldr	r3, [pc, #104]	@ (8006f18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	3304      	adds	r3, #4
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	481a      	ldr	r0, [pc, #104]	@ (8006f20 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006eb6:	f7fe fd59 	bl	800596c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006eba:	e026      	b.n	8006f0a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006ec4:	4b14      	ldr	r3, [pc, #80]	@ (8006f18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	68ba      	ldr	r2, [r7, #8]
 8006eca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006ecc:	68ba      	ldr	r2, [r7, #8]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d209      	bcs.n	8006ee8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ed4:	4b13      	ldr	r3, [pc, #76]	@ (8006f24 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	4b0f      	ldr	r3, [pc, #60]	@ (8006f18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	3304      	adds	r3, #4
 8006ede:	4619      	mov	r1, r3
 8006ee0:	4610      	mov	r0, r2
 8006ee2:	f7fe fd67 	bl	80059b4 <vListInsert>
}
 8006ee6:	e010      	b.n	8006f0a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8006f28 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	4b0a      	ldr	r3, [pc, #40]	@ (8006f18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	3304      	adds	r3, #4
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	4610      	mov	r0, r2
 8006ef6:	f7fe fd5d 	bl	80059b4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006efa:	4b0c      	ldr	r3, [pc, #48]	@ (8006f2c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68ba      	ldr	r2, [r7, #8]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d202      	bcs.n	8006f0a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006f04:	4a09      	ldr	r2, [pc, #36]	@ (8006f2c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	6013      	str	r3, [r2, #0]
}
 8006f0a:	bf00      	nop
 8006f0c:	3710      	adds	r7, #16
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	20000898 	.word	0x20000898
 8006f18:	20000794 	.word	0x20000794
 8006f1c:	2000089c 	.word	0x2000089c
 8006f20:	20000880 	.word	0x20000880
 8006f24:	20000850 	.word	0x20000850
 8006f28:	2000084c 	.word	0x2000084c
 8006f2c:	200008b4 	.word	0x200008b4

08006f30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006f30:	b480      	push	{r7}
 8006f32:	b085      	sub	sp, #20
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	3b04      	subs	r3, #4
 8006f40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006f48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	3b04      	subs	r3, #4
 8006f4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	f023 0201 	bic.w	r2, r3, #1
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	3b04      	subs	r3, #4
 8006f5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006f60:	4a0c      	ldr	r2, [pc, #48]	@ (8006f94 <pxPortInitialiseStack+0x64>)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	3b14      	subs	r3, #20
 8006f6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	3b04      	subs	r3, #4
 8006f76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f06f 0202 	mvn.w	r2, #2
 8006f7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	3b20      	subs	r3, #32
 8006f84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006f86:	68fb      	ldr	r3, [r7, #12]
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3714      	adds	r7, #20
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr
 8006f94:	08006f99 	.word	0x08006f99

08006f98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b085      	sub	sp, #20
 8006f9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006fa2:	4b13      	ldr	r3, [pc, #76]	@ (8006ff0 <prvTaskExitError+0x58>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006faa:	d00b      	beq.n	8006fc4 <prvTaskExitError+0x2c>
	__asm volatile
 8006fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fb0:	f383 8811 	msr	BASEPRI, r3
 8006fb4:	f3bf 8f6f 	isb	sy
 8006fb8:	f3bf 8f4f 	dsb	sy
 8006fbc:	60fb      	str	r3, [r7, #12]
}
 8006fbe:	bf00      	nop
 8006fc0:	bf00      	nop
 8006fc2:	e7fd      	b.n	8006fc0 <prvTaskExitError+0x28>
	__asm volatile
 8006fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fc8:	f383 8811 	msr	BASEPRI, r3
 8006fcc:	f3bf 8f6f 	isb	sy
 8006fd0:	f3bf 8f4f 	dsb	sy
 8006fd4:	60bb      	str	r3, [r7, #8]
}
 8006fd6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006fd8:	bf00      	nop
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d0fc      	beq.n	8006fda <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006fe0:	bf00      	nop
 8006fe2:	bf00      	nop
 8006fe4:	3714      	adds	r7, #20
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr
 8006fee:	bf00      	nop
 8006ff0:	20000014 	.word	0x20000014
	...

08007000 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007000:	4b07      	ldr	r3, [pc, #28]	@ (8007020 <pxCurrentTCBConst2>)
 8007002:	6819      	ldr	r1, [r3, #0]
 8007004:	6808      	ldr	r0, [r1, #0]
 8007006:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800700a:	f380 8809 	msr	PSP, r0
 800700e:	f3bf 8f6f 	isb	sy
 8007012:	f04f 0000 	mov.w	r0, #0
 8007016:	f380 8811 	msr	BASEPRI, r0
 800701a:	4770      	bx	lr
 800701c:	f3af 8000 	nop.w

08007020 <pxCurrentTCBConst2>:
 8007020:	20000794 	.word	0x20000794
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007024:	bf00      	nop
 8007026:	bf00      	nop

08007028 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007028:	4808      	ldr	r0, [pc, #32]	@ (800704c <prvPortStartFirstTask+0x24>)
 800702a:	6800      	ldr	r0, [r0, #0]
 800702c:	6800      	ldr	r0, [r0, #0]
 800702e:	f380 8808 	msr	MSP, r0
 8007032:	f04f 0000 	mov.w	r0, #0
 8007036:	f380 8814 	msr	CONTROL, r0
 800703a:	b662      	cpsie	i
 800703c:	b661      	cpsie	f
 800703e:	f3bf 8f4f 	dsb	sy
 8007042:	f3bf 8f6f 	isb	sy
 8007046:	df00      	svc	0
 8007048:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800704a:	bf00      	nop
 800704c:	e000ed08 	.word	0xe000ed08

08007050 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b086      	sub	sp, #24
 8007054:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007056:	4b47      	ldr	r3, [pc, #284]	@ (8007174 <xPortStartScheduler+0x124>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a47      	ldr	r2, [pc, #284]	@ (8007178 <xPortStartScheduler+0x128>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d10b      	bne.n	8007078 <xPortStartScheduler+0x28>
	__asm volatile
 8007060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007064:	f383 8811 	msr	BASEPRI, r3
 8007068:	f3bf 8f6f 	isb	sy
 800706c:	f3bf 8f4f 	dsb	sy
 8007070:	613b      	str	r3, [r7, #16]
}
 8007072:	bf00      	nop
 8007074:	bf00      	nop
 8007076:	e7fd      	b.n	8007074 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007078:	4b3e      	ldr	r3, [pc, #248]	@ (8007174 <xPortStartScheduler+0x124>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a3f      	ldr	r2, [pc, #252]	@ (800717c <xPortStartScheduler+0x12c>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d10b      	bne.n	800709a <xPortStartScheduler+0x4a>
	__asm volatile
 8007082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007086:	f383 8811 	msr	BASEPRI, r3
 800708a:	f3bf 8f6f 	isb	sy
 800708e:	f3bf 8f4f 	dsb	sy
 8007092:	60fb      	str	r3, [r7, #12]
}
 8007094:	bf00      	nop
 8007096:	bf00      	nop
 8007098:	e7fd      	b.n	8007096 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800709a:	4b39      	ldr	r3, [pc, #228]	@ (8007180 <xPortStartScheduler+0x130>)
 800709c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	22ff      	movs	r2, #255	@ 0xff
 80070aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80070b4:	78fb      	ldrb	r3, [r7, #3]
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80070bc:	b2da      	uxtb	r2, r3
 80070be:	4b31      	ldr	r3, [pc, #196]	@ (8007184 <xPortStartScheduler+0x134>)
 80070c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80070c2:	4b31      	ldr	r3, [pc, #196]	@ (8007188 <xPortStartScheduler+0x138>)
 80070c4:	2207      	movs	r2, #7
 80070c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80070c8:	e009      	b.n	80070de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80070ca:	4b2f      	ldr	r3, [pc, #188]	@ (8007188 <xPortStartScheduler+0x138>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	3b01      	subs	r3, #1
 80070d0:	4a2d      	ldr	r2, [pc, #180]	@ (8007188 <xPortStartScheduler+0x138>)
 80070d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80070d4:	78fb      	ldrb	r3, [r7, #3]
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	005b      	lsls	r3, r3, #1
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80070de:	78fb      	ldrb	r3, [r7, #3]
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070e6:	2b80      	cmp	r3, #128	@ 0x80
 80070e8:	d0ef      	beq.n	80070ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80070ea:	4b27      	ldr	r3, [pc, #156]	@ (8007188 <xPortStartScheduler+0x138>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f1c3 0307 	rsb	r3, r3, #7
 80070f2:	2b04      	cmp	r3, #4
 80070f4:	d00b      	beq.n	800710e <xPortStartScheduler+0xbe>
	__asm volatile
 80070f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070fa:	f383 8811 	msr	BASEPRI, r3
 80070fe:	f3bf 8f6f 	isb	sy
 8007102:	f3bf 8f4f 	dsb	sy
 8007106:	60bb      	str	r3, [r7, #8]
}
 8007108:	bf00      	nop
 800710a:	bf00      	nop
 800710c:	e7fd      	b.n	800710a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800710e:	4b1e      	ldr	r3, [pc, #120]	@ (8007188 <xPortStartScheduler+0x138>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	021b      	lsls	r3, r3, #8
 8007114:	4a1c      	ldr	r2, [pc, #112]	@ (8007188 <xPortStartScheduler+0x138>)
 8007116:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007118:	4b1b      	ldr	r3, [pc, #108]	@ (8007188 <xPortStartScheduler+0x138>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007120:	4a19      	ldr	r2, [pc, #100]	@ (8007188 <xPortStartScheduler+0x138>)
 8007122:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	b2da      	uxtb	r2, r3
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800712c:	4b17      	ldr	r3, [pc, #92]	@ (800718c <xPortStartScheduler+0x13c>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a16      	ldr	r2, [pc, #88]	@ (800718c <xPortStartScheduler+0x13c>)
 8007132:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007136:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007138:	4b14      	ldr	r3, [pc, #80]	@ (800718c <xPortStartScheduler+0x13c>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a13      	ldr	r2, [pc, #76]	@ (800718c <xPortStartScheduler+0x13c>)
 800713e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007142:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007144:	f000 f8da 	bl	80072fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007148:	4b11      	ldr	r3, [pc, #68]	@ (8007190 <xPortStartScheduler+0x140>)
 800714a:	2200      	movs	r2, #0
 800714c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800714e:	f000 f8f9 	bl	8007344 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007152:	4b10      	ldr	r3, [pc, #64]	@ (8007194 <xPortStartScheduler+0x144>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a0f      	ldr	r2, [pc, #60]	@ (8007194 <xPortStartScheduler+0x144>)
 8007158:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800715c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800715e:	f7ff ff63 	bl	8007028 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007162:	f7ff fb05 	bl	8006770 <vTaskSwitchContext>
	prvTaskExitError();
 8007166:	f7ff ff17 	bl	8006f98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800716a:	2300      	movs	r3, #0
}
 800716c:	4618      	mov	r0, r3
 800716e:	3718      	adds	r7, #24
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}
 8007174:	e000ed00 	.word	0xe000ed00
 8007178:	410fc271 	.word	0x410fc271
 800717c:	410fc270 	.word	0x410fc270
 8007180:	e000e400 	.word	0xe000e400
 8007184:	200008c0 	.word	0x200008c0
 8007188:	200008c4 	.word	0x200008c4
 800718c:	e000ed20 	.word	0xe000ed20
 8007190:	20000014 	.word	0x20000014
 8007194:	e000ef34 	.word	0xe000ef34

08007198 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
	__asm volatile
 800719e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071a2:	f383 8811 	msr	BASEPRI, r3
 80071a6:	f3bf 8f6f 	isb	sy
 80071aa:	f3bf 8f4f 	dsb	sy
 80071ae:	607b      	str	r3, [r7, #4]
}
 80071b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80071b2:	4b10      	ldr	r3, [pc, #64]	@ (80071f4 <vPortEnterCritical+0x5c>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	3301      	adds	r3, #1
 80071b8:	4a0e      	ldr	r2, [pc, #56]	@ (80071f4 <vPortEnterCritical+0x5c>)
 80071ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80071bc:	4b0d      	ldr	r3, [pc, #52]	@ (80071f4 <vPortEnterCritical+0x5c>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d110      	bne.n	80071e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80071c4:	4b0c      	ldr	r3, [pc, #48]	@ (80071f8 <vPortEnterCritical+0x60>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00b      	beq.n	80071e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80071ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071d2:	f383 8811 	msr	BASEPRI, r3
 80071d6:	f3bf 8f6f 	isb	sy
 80071da:	f3bf 8f4f 	dsb	sy
 80071de:	603b      	str	r3, [r7, #0]
}
 80071e0:	bf00      	nop
 80071e2:	bf00      	nop
 80071e4:	e7fd      	b.n	80071e2 <vPortEnterCritical+0x4a>
	}
}
 80071e6:	bf00      	nop
 80071e8:	370c      	adds	r7, #12
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	20000014 	.word	0x20000014
 80071f8:	e000ed04 	.word	0xe000ed04

080071fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007202:	4b12      	ldr	r3, [pc, #72]	@ (800724c <vPortExitCritical+0x50>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d10b      	bne.n	8007222 <vPortExitCritical+0x26>
	__asm volatile
 800720a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800720e:	f383 8811 	msr	BASEPRI, r3
 8007212:	f3bf 8f6f 	isb	sy
 8007216:	f3bf 8f4f 	dsb	sy
 800721a:	607b      	str	r3, [r7, #4]
}
 800721c:	bf00      	nop
 800721e:	bf00      	nop
 8007220:	e7fd      	b.n	800721e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007222:	4b0a      	ldr	r3, [pc, #40]	@ (800724c <vPortExitCritical+0x50>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	3b01      	subs	r3, #1
 8007228:	4a08      	ldr	r2, [pc, #32]	@ (800724c <vPortExitCritical+0x50>)
 800722a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800722c:	4b07      	ldr	r3, [pc, #28]	@ (800724c <vPortExitCritical+0x50>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d105      	bne.n	8007240 <vPortExitCritical+0x44>
 8007234:	2300      	movs	r3, #0
 8007236:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	f383 8811 	msr	BASEPRI, r3
}
 800723e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007240:	bf00      	nop
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr
 800724c:	20000014 	.word	0x20000014

08007250 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007250:	f3ef 8009 	mrs	r0, PSP
 8007254:	f3bf 8f6f 	isb	sy
 8007258:	4b15      	ldr	r3, [pc, #84]	@ (80072b0 <pxCurrentTCBConst>)
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	f01e 0f10 	tst.w	lr, #16
 8007260:	bf08      	it	eq
 8007262:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007266:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800726a:	6010      	str	r0, [r2, #0]
 800726c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007270:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007274:	f380 8811 	msr	BASEPRI, r0
 8007278:	f3bf 8f4f 	dsb	sy
 800727c:	f3bf 8f6f 	isb	sy
 8007280:	f7ff fa76 	bl	8006770 <vTaskSwitchContext>
 8007284:	f04f 0000 	mov.w	r0, #0
 8007288:	f380 8811 	msr	BASEPRI, r0
 800728c:	bc09      	pop	{r0, r3}
 800728e:	6819      	ldr	r1, [r3, #0]
 8007290:	6808      	ldr	r0, [r1, #0]
 8007292:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007296:	f01e 0f10 	tst.w	lr, #16
 800729a:	bf08      	it	eq
 800729c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80072a0:	f380 8809 	msr	PSP, r0
 80072a4:	f3bf 8f6f 	isb	sy
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop
 80072ac:	f3af 8000 	nop.w

080072b0 <pxCurrentTCBConst>:
 80072b0:	20000794 	.word	0x20000794
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80072b4:	bf00      	nop
 80072b6:	bf00      	nop

080072b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
	__asm volatile
 80072be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072c2:	f383 8811 	msr	BASEPRI, r3
 80072c6:	f3bf 8f6f 	isb	sy
 80072ca:	f3bf 8f4f 	dsb	sy
 80072ce:	607b      	str	r3, [r7, #4]
}
 80072d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80072d2:	f7ff f993 	bl	80065fc <xTaskIncrementTick>
 80072d6:	4603      	mov	r3, r0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d003      	beq.n	80072e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80072dc:	4b06      	ldr	r3, [pc, #24]	@ (80072f8 <xPortSysTickHandler+0x40>)
 80072de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072e2:	601a      	str	r2, [r3, #0]
 80072e4:	2300      	movs	r3, #0
 80072e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	f383 8811 	msr	BASEPRI, r3
}
 80072ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80072f0:	bf00      	nop
 80072f2:	3708      	adds	r7, #8
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	e000ed04 	.word	0xe000ed04

080072fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80072fc:	b480      	push	{r7}
 80072fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007300:	4b0b      	ldr	r3, [pc, #44]	@ (8007330 <vPortSetupTimerInterrupt+0x34>)
 8007302:	2200      	movs	r2, #0
 8007304:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007306:	4b0b      	ldr	r3, [pc, #44]	@ (8007334 <vPortSetupTimerInterrupt+0x38>)
 8007308:	2200      	movs	r2, #0
 800730a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800730c:	4b0a      	ldr	r3, [pc, #40]	@ (8007338 <vPortSetupTimerInterrupt+0x3c>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a0a      	ldr	r2, [pc, #40]	@ (800733c <vPortSetupTimerInterrupt+0x40>)
 8007312:	fba2 2303 	umull	r2, r3, r2, r3
 8007316:	099b      	lsrs	r3, r3, #6
 8007318:	4a09      	ldr	r2, [pc, #36]	@ (8007340 <vPortSetupTimerInterrupt+0x44>)
 800731a:	3b01      	subs	r3, #1
 800731c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800731e:	4b04      	ldr	r3, [pc, #16]	@ (8007330 <vPortSetupTimerInterrupt+0x34>)
 8007320:	2207      	movs	r2, #7
 8007322:	601a      	str	r2, [r3, #0]
}
 8007324:	bf00      	nop
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	e000e010 	.word	0xe000e010
 8007334:	e000e018 	.word	0xe000e018
 8007338:	20000000 	.word	0x20000000
 800733c:	10624dd3 	.word	0x10624dd3
 8007340:	e000e014 	.word	0xe000e014

08007344 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007344:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007354 <vPortEnableVFP+0x10>
 8007348:	6801      	ldr	r1, [r0, #0]
 800734a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800734e:	6001      	str	r1, [r0, #0]
 8007350:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007352:	bf00      	nop
 8007354:	e000ed88 	.word	0xe000ed88

08007358 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007358:	b480      	push	{r7}
 800735a:	b085      	sub	sp, #20
 800735c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800735e:	f3ef 8305 	mrs	r3, IPSR
 8007362:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2b0f      	cmp	r3, #15
 8007368:	d915      	bls.n	8007396 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800736a:	4a18      	ldr	r2, [pc, #96]	@ (80073cc <vPortValidateInterruptPriority+0x74>)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	4413      	add	r3, r2
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007374:	4b16      	ldr	r3, [pc, #88]	@ (80073d0 <vPortValidateInterruptPriority+0x78>)
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	7afa      	ldrb	r2, [r7, #11]
 800737a:	429a      	cmp	r2, r3
 800737c:	d20b      	bcs.n	8007396 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800737e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007382:	f383 8811 	msr	BASEPRI, r3
 8007386:	f3bf 8f6f 	isb	sy
 800738a:	f3bf 8f4f 	dsb	sy
 800738e:	607b      	str	r3, [r7, #4]
}
 8007390:	bf00      	nop
 8007392:	bf00      	nop
 8007394:	e7fd      	b.n	8007392 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007396:	4b0f      	ldr	r3, [pc, #60]	@ (80073d4 <vPortValidateInterruptPriority+0x7c>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800739e:	4b0e      	ldr	r3, [pc, #56]	@ (80073d8 <vPortValidateInterruptPriority+0x80>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d90b      	bls.n	80073be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80073a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073aa:	f383 8811 	msr	BASEPRI, r3
 80073ae:	f3bf 8f6f 	isb	sy
 80073b2:	f3bf 8f4f 	dsb	sy
 80073b6:	603b      	str	r3, [r7, #0]
}
 80073b8:	bf00      	nop
 80073ba:	bf00      	nop
 80073bc:	e7fd      	b.n	80073ba <vPortValidateInterruptPriority+0x62>
	}
 80073be:	bf00      	nop
 80073c0:	3714      	adds	r7, #20
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr
 80073ca:	bf00      	nop
 80073cc:	e000e3f0 	.word	0xe000e3f0
 80073d0:	200008c0 	.word	0x200008c0
 80073d4:	e000ed0c 	.word	0xe000ed0c
 80073d8:	200008c4 	.word	0x200008c4

080073dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b08a      	sub	sp, #40	@ 0x28
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80073e4:	2300      	movs	r3, #0
 80073e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80073e8:	f7ff f85c 	bl	80064a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80073ec:	4b5c      	ldr	r3, [pc, #368]	@ (8007560 <pvPortMalloc+0x184>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d101      	bne.n	80073f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80073f4:	f000 f924 	bl	8007640 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80073f8:	4b5a      	ldr	r3, [pc, #360]	@ (8007564 <pvPortMalloc+0x188>)
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	4013      	ands	r3, r2
 8007400:	2b00      	cmp	r3, #0
 8007402:	f040 8095 	bne.w	8007530 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d01e      	beq.n	800744a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800740c:	2208      	movs	r2, #8
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	4413      	add	r3, r2
 8007412:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f003 0307 	and.w	r3, r3, #7
 800741a:	2b00      	cmp	r3, #0
 800741c:	d015      	beq.n	800744a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f023 0307 	bic.w	r3, r3, #7
 8007424:	3308      	adds	r3, #8
 8007426:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f003 0307 	and.w	r3, r3, #7
 800742e:	2b00      	cmp	r3, #0
 8007430:	d00b      	beq.n	800744a <pvPortMalloc+0x6e>
	__asm volatile
 8007432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007436:	f383 8811 	msr	BASEPRI, r3
 800743a:	f3bf 8f6f 	isb	sy
 800743e:	f3bf 8f4f 	dsb	sy
 8007442:	617b      	str	r3, [r7, #20]
}
 8007444:	bf00      	nop
 8007446:	bf00      	nop
 8007448:	e7fd      	b.n	8007446 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d06f      	beq.n	8007530 <pvPortMalloc+0x154>
 8007450:	4b45      	ldr	r3, [pc, #276]	@ (8007568 <pvPortMalloc+0x18c>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	429a      	cmp	r2, r3
 8007458:	d86a      	bhi.n	8007530 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800745a:	4b44      	ldr	r3, [pc, #272]	@ (800756c <pvPortMalloc+0x190>)
 800745c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800745e:	4b43      	ldr	r3, [pc, #268]	@ (800756c <pvPortMalloc+0x190>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007464:	e004      	b.n	8007470 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007468:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800746a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	429a      	cmp	r2, r3
 8007478:	d903      	bls.n	8007482 <pvPortMalloc+0xa6>
 800747a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d1f1      	bne.n	8007466 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007482:	4b37      	ldr	r3, [pc, #220]	@ (8007560 <pvPortMalloc+0x184>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007488:	429a      	cmp	r2, r3
 800748a:	d051      	beq.n	8007530 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800748c:	6a3b      	ldr	r3, [r7, #32]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	2208      	movs	r2, #8
 8007492:	4413      	add	r3, r2
 8007494:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	6a3b      	ldr	r3, [r7, #32]
 800749c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800749e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a0:	685a      	ldr	r2, [r3, #4]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	1ad2      	subs	r2, r2, r3
 80074a6:	2308      	movs	r3, #8
 80074a8:	005b      	lsls	r3, r3, #1
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d920      	bls.n	80074f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80074ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	4413      	add	r3, r2
 80074b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	f003 0307 	and.w	r3, r3, #7
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d00b      	beq.n	80074d8 <pvPortMalloc+0xfc>
	__asm volatile
 80074c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074c4:	f383 8811 	msr	BASEPRI, r3
 80074c8:	f3bf 8f6f 	isb	sy
 80074cc:	f3bf 8f4f 	dsb	sy
 80074d0:	613b      	str	r3, [r7, #16]
}
 80074d2:	bf00      	nop
 80074d4:	bf00      	nop
 80074d6:	e7fd      	b.n	80074d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80074d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074da:	685a      	ldr	r2, [r3, #4]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	1ad2      	subs	r2, r2, r3
 80074e0:	69bb      	ldr	r3, [r7, #24]
 80074e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80074e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80074ea:	69b8      	ldr	r0, [r7, #24]
 80074ec:	f000 f90a 	bl	8007704 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80074f0:	4b1d      	ldr	r3, [pc, #116]	@ (8007568 <pvPortMalloc+0x18c>)
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	1ad3      	subs	r3, r2, r3
 80074fa:	4a1b      	ldr	r2, [pc, #108]	@ (8007568 <pvPortMalloc+0x18c>)
 80074fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80074fe:	4b1a      	ldr	r3, [pc, #104]	@ (8007568 <pvPortMalloc+0x18c>)
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	4b1b      	ldr	r3, [pc, #108]	@ (8007570 <pvPortMalloc+0x194>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	429a      	cmp	r2, r3
 8007508:	d203      	bcs.n	8007512 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800750a:	4b17      	ldr	r3, [pc, #92]	@ (8007568 <pvPortMalloc+0x18c>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a18      	ldr	r2, [pc, #96]	@ (8007570 <pvPortMalloc+0x194>)
 8007510:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007514:	685a      	ldr	r2, [r3, #4]
 8007516:	4b13      	ldr	r3, [pc, #76]	@ (8007564 <pvPortMalloc+0x188>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	431a      	orrs	r2, r3
 800751c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800751e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007522:	2200      	movs	r2, #0
 8007524:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007526:	4b13      	ldr	r3, [pc, #76]	@ (8007574 <pvPortMalloc+0x198>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	3301      	adds	r3, #1
 800752c:	4a11      	ldr	r2, [pc, #68]	@ (8007574 <pvPortMalloc+0x198>)
 800752e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007530:	f7fe ffc6 	bl	80064c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007534:	69fb      	ldr	r3, [r7, #28]
 8007536:	f003 0307 	and.w	r3, r3, #7
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00b      	beq.n	8007556 <pvPortMalloc+0x17a>
	__asm volatile
 800753e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007542:	f383 8811 	msr	BASEPRI, r3
 8007546:	f3bf 8f6f 	isb	sy
 800754a:	f3bf 8f4f 	dsb	sy
 800754e:	60fb      	str	r3, [r7, #12]
}
 8007550:	bf00      	nop
 8007552:	bf00      	nop
 8007554:	e7fd      	b.n	8007552 <pvPortMalloc+0x176>
	return pvReturn;
 8007556:	69fb      	ldr	r3, [r7, #28]
}
 8007558:	4618      	mov	r0, r3
 800755a:	3728      	adds	r7, #40	@ 0x28
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}
 8007560:	200056f0 	.word	0x200056f0
 8007564:	20005704 	.word	0x20005704
 8007568:	200056f4 	.word	0x200056f4
 800756c:	200056e8 	.word	0x200056e8
 8007570:	200056f8 	.word	0x200056f8
 8007574:	200056fc 	.word	0x200056fc

08007578 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b086      	sub	sp, #24
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d04f      	beq.n	800762a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800758a:	2308      	movs	r3, #8
 800758c:	425b      	negs	r3, r3
 800758e:	697a      	ldr	r2, [r7, #20]
 8007590:	4413      	add	r3, r2
 8007592:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	685a      	ldr	r2, [r3, #4]
 800759c:	4b25      	ldr	r3, [pc, #148]	@ (8007634 <vPortFree+0xbc>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4013      	ands	r3, r2
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d10b      	bne.n	80075be <vPortFree+0x46>
	__asm volatile
 80075a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075aa:	f383 8811 	msr	BASEPRI, r3
 80075ae:	f3bf 8f6f 	isb	sy
 80075b2:	f3bf 8f4f 	dsb	sy
 80075b6:	60fb      	str	r3, [r7, #12]
}
 80075b8:	bf00      	nop
 80075ba:	bf00      	nop
 80075bc:	e7fd      	b.n	80075ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00b      	beq.n	80075de <vPortFree+0x66>
	__asm volatile
 80075c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ca:	f383 8811 	msr	BASEPRI, r3
 80075ce:	f3bf 8f6f 	isb	sy
 80075d2:	f3bf 8f4f 	dsb	sy
 80075d6:	60bb      	str	r3, [r7, #8]
}
 80075d8:	bf00      	nop
 80075da:	bf00      	nop
 80075dc:	e7fd      	b.n	80075da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	685a      	ldr	r2, [r3, #4]
 80075e2:	4b14      	ldr	r3, [pc, #80]	@ (8007634 <vPortFree+0xbc>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4013      	ands	r3, r2
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d01e      	beq.n	800762a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d11a      	bne.n	800762a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	685a      	ldr	r2, [r3, #4]
 80075f8:	4b0e      	ldr	r3, [pc, #56]	@ (8007634 <vPortFree+0xbc>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	43db      	mvns	r3, r3
 80075fe:	401a      	ands	r2, r3
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007604:	f7fe ff4e 	bl	80064a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	685a      	ldr	r2, [r3, #4]
 800760c:	4b0a      	ldr	r3, [pc, #40]	@ (8007638 <vPortFree+0xc0>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4413      	add	r3, r2
 8007612:	4a09      	ldr	r2, [pc, #36]	@ (8007638 <vPortFree+0xc0>)
 8007614:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007616:	6938      	ldr	r0, [r7, #16]
 8007618:	f000 f874 	bl	8007704 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800761c:	4b07      	ldr	r3, [pc, #28]	@ (800763c <vPortFree+0xc4>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	3301      	adds	r3, #1
 8007622:	4a06      	ldr	r2, [pc, #24]	@ (800763c <vPortFree+0xc4>)
 8007624:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007626:	f7fe ff4b 	bl	80064c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800762a:	bf00      	nop
 800762c:	3718      	adds	r7, #24
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	20005704 	.word	0x20005704
 8007638:	200056f4 	.word	0x200056f4
 800763c:	20005700 	.word	0x20005700

08007640 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007640:	b480      	push	{r7}
 8007642:	b085      	sub	sp, #20
 8007644:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007646:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800764a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800764c:	4b27      	ldr	r3, [pc, #156]	@ (80076ec <prvHeapInit+0xac>)
 800764e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f003 0307 	and.w	r3, r3, #7
 8007656:	2b00      	cmp	r3, #0
 8007658:	d00c      	beq.n	8007674 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	3307      	adds	r3, #7
 800765e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f023 0307 	bic.w	r3, r3, #7
 8007666:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007668:	68ba      	ldr	r2, [r7, #8]
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	1ad3      	subs	r3, r2, r3
 800766e:	4a1f      	ldr	r2, [pc, #124]	@ (80076ec <prvHeapInit+0xac>)
 8007670:	4413      	add	r3, r2
 8007672:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007678:	4a1d      	ldr	r2, [pc, #116]	@ (80076f0 <prvHeapInit+0xb0>)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800767e:	4b1c      	ldr	r3, [pc, #112]	@ (80076f0 <prvHeapInit+0xb0>)
 8007680:	2200      	movs	r2, #0
 8007682:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	68ba      	ldr	r2, [r7, #8]
 8007688:	4413      	add	r3, r2
 800768a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800768c:	2208      	movs	r2, #8
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	1a9b      	subs	r3, r3, r2
 8007692:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f023 0307 	bic.w	r3, r3, #7
 800769a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	4a15      	ldr	r2, [pc, #84]	@ (80076f4 <prvHeapInit+0xb4>)
 80076a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80076a2:	4b14      	ldr	r3, [pc, #80]	@ (80076f4 <prvHeapInit+0xb4>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	2200      	movs	r2, #0
 80076a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80076aa:	4b12      	ldr	r3, [pc, #72]	@ (80076f4 <prvHeapInit+0xb4>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2200      	movs	r2, #0
 80076b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	68fa      	ldr	r2, [r7, #12]
 80076ba:	1ad2      	subs	r2, r2, r3
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80076c0:	4b0c      	ldr	r3, [pc, #48]	@ (80076f4 <prvHeapInit+0xb4>)
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	4a0a      	ldr	r2, [pc, #40]	@ (80076f8 <prvHeapInit+0xb8>)
 80076ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	4a09      	ldr	r2, [pc, #36]	@ (80076fc <prvHeapInit+0xbc>)
 80076d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80076d8:	4b09      	ldr	r3, [pc, #36]	@ (8007700 <prvHeapInit+0xc0>)
 80076da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80076de:	601a      	str	r2, [r3, #0]
}
 80076e0:	bf00      	nop
 80076e2:	3714      	adds	r7, #20
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr
 80076ec:	200008c8 	.word	0x200008c8
 80076f0:	200056e8 	.word	0x200056e8
 80076f4:	200056f0 	.word	0x200056f0
 80076f8:	200056f8 	.word	0x200056f8
 80076fc:	200056f4 	.word	0x200056f4
 8007700:	20005704 	.word	0x20005704

08007704 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007704:	b480      	push	{r7}
 8007706:	b085      	sub	sp, #20
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800770c:	4b28      	ldr	r3, [pc, #160]	@ (80077b0 <prvInsertBlockIntoFreeList+0xac>)
 800770e:	60fb      	str	r3, [r7, #12]
 8007710:	e002      	b.n	8007718 <prvInsertBlockIntoFreeList+0x14>
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	60fb      	str	r3, [r7, #12]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	429a      	cmp	r2, r3
 8007720:	d8f7      	bhi.n	8007712 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	68ba      	ldr	r2, [r7, #8]
 800772c:	4413      	add	r3, r2
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	429a      	cmp	r2, r3
 8007732:	d108      	bne.n	8007746 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	685a      	ldr	r2, [r3, #4]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	441a      	add	r2, r3
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	68ba      	ldr	r2, [r7, #8]
 8007750:	441a      	add	r2, r3
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	429a      	cmp	r2, r3
 8007758:	d118      	bne.n	800778c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	4b15      	ldr	r3, [pc, #84]	@ (80077b4 <prvInsertBlockIntoFreeList+0xb0>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	429a      	cmp	r2, r3
 8007764:	d00d      	beq.n	8007782 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	685a      	ldr	r2, [r3, #4]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	441a      	add	r2, r3
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	601a      	str	r2, [r3, #0]
 8007780:	e008      	b.n	8007794 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007782:	4b0c      	ldr	r3, [pc, #48]	@ (80077b4 <prvInsertBlockIntoFreeList+0xb0>)
 8007784:	681a      	ldr	r2, [r3, #0]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	601a      	str	r2, [r3, #0]
 800778a:	e003      	b.n	8007794 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007794:	68fa      	ldr	r2, [r7, #12]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	429a      	cmp	r2, r3
 800779a:	d002      	beq.n	80077a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077a2:	bf00      	nop
 80077a4:	3714      	adds	r7, #20
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop
 80077b0:	200056e8 	.word	0x200056e8
 80077b4:	200056f0 	.word	0x200056f0

080077b8 <atoi>:
 80077b8:	220a      	movs	r2, #10
 80077ba:	2100      	movs	r1, #0
 80077bc:	f000 b87a 	b.w	80078b4 <strtol>

080077c0 <_strtol_l.constprop.0>:
 80077c0:	2b24      	cmp	r3, #36	@ 0x24
 80077c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077c6:	4686      	mov	lr, r0
 80077c8:	4690      	mov	r8, r2
 80077ca:	d801      	bhi.n	80077d0 <_strtol_l.constprop.0+0x10>
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d106      	bne.n	80077de <_strtol_l.constprop.0+0x1e>
 80077d0:	f000 fb06 	bl	8007de0 <__errno>
 80077d4:	2316      	movs	r3, #22
 80077d6:	6003      	str	r3, [r0, #0]
 80077d8:	2000      	movs	r0, #0
 80077da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077de:	4834      	ldr	r0, [pc, #208]	@ (80078b0 <_strtol_l.constprop.0+0xf0>)
 80077e0:	460d      	mov	r5, r1
 80077e2:	462a      	mov	r2, r5
 80077e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80077e8:	5d06      	ldrb	r6, [r0, r4]
 80077ea:	f016 0608 	ands.w	r6, r6, #8
 80077ee:	d1f8      	bne.n	80077e2 <_strtol_l.constprop.0+0x22>
 80077f0:	2c2d      	cmp	r4, #45	@ 0x2d
 80077f2:	d12d      	bne.n	8007850 <_strtol_l.constprop.0+0x90>
 80077f4:	782c      	ldrb	r4, [r5, #0]
 80077f6:	2601      	movs	r6, #1
 80077f8:	1c95      	adds	r5, r2, #2
 80077fa:	f033 0210 	bics.w	r2, r3, #16
 80077fe:	d109      	bne.n	8007814 <_strtol_l.constprop.0+0x54>
 8007800:	2c30      	cmp	r4, #48	@ 0x30
 8007802:	d12a      	bne.n	800785a <_strtol_l.constprop.0+0x9a>
 8007804:	782a      	ldrb	r2, [r5, #0]
 8007806:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800780a:	2a58      	cmp	r2, #88	@ 0x58
 800780c:	d125      	bne.n	800785a <_strtol_l.constprop.0+0x9a>
 800780e:	786c      	ldrb	r4, [r5, #1]
 8007810:	2310      	movs	r3, #16
 8007812:	3502      	adds	r5, #2
 8007814:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007818:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800781c:	2200      	movs	r2, #0
 800781e:	fbbc f9f3 	udiv	r9, ip, r3
 8007822:	4610      	mov	r0, r2
 8007824:	fb03 ca19 	mls	sl, r3, r9, ip
 8007828:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800782c:	2f09      	cmp	r7, #9
 800782e:	d81b      	bhi.n	8007868 <_strtol_l.constprop.0+0xa8>
 8007830:	463c      	mov	r4, r7
 8007832:	42a3      	cmp	r3, r4
 8007834:	dd27      	ble.n	8007886 <_strtol_l.constprop.0+0xc6>
 8007836:	1c57      	adds	r7, r2, #1
 8007838:	d007      	beq.n	800784a <_strtol_l.constprop.0+0x8a>
 800783a:	4581      	cmp	r9, r0
 800783c:	d320      	bcc.n	8007880 <_strtol_l.constprop.0+0xc0>
 800783e:	d101      	bne.n	8007844 <_strtol_l.constprop.0+0x84>
 8007840:	45a2      	cmp	sl, r4
 8007842:	db1d      	blt.n	8007880 <_strtol_l.constprop.0+0xc0>
 8007844:	fb00 4003 	mla	r0, r0, r3, r4
 8007848:	2201      	movs	r2, #1
 800784a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800784e:	e7eb      	b.n	8007828 <_strtol_l.constprop.0+0x68>
 8007850:	2c2b      	cmp	r4, #43	@ 0x2b
 8007852:	bf04      	itt	eq
 8007854:	782c      	ldrbeq	r4, [r5, #0]
 8007856:	1c95      	addeq	r5, r2, #2
 8007858:	e7cf      	b.n	80077fa <_strtol_l.constprop.0+0x3a>
 800785a:	2b00      	cmp	r3, #0
 800785c:	d1da      	bne.n	8007814 <_strtol_l.constprop.0+0x54>
 800785e:	2c30      	cmp	r4, #48	@ 0x30
 8007860:	bf0c      	ite	eq
 8007862:	2308      	moveq	r3, #8
 8007864:	230a      	movne	r3, #10
 8007866:	e7d5      	b.n	8007814 <_strtol_l.constprop.0+0x54>
 8007868:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800786c:	2f19      	cmp	r7, #25
 800786e:	d801      	bhi.n	8007874 <_strtol_l.constprop.0+0xb4>
 8007870:	3c37      	subs	r4, #55	@ 0x37
 8007872:	e7de      	b.n	8007832 <_strtol_l.constprop.0+0x72>
 8007874:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007878:	2f19      	cmp	r7, #25
 800787a:	d804      	bhi.n	8007886 <_strtol_l.constprop.0+0xc6>
 800787c:	3c57      	subs	r4, #87	@ 0x57
 800787e:	e7d8      	b.n	8007832 <_strtol_l.constprop.0+0x72>
 8007880:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007884:	e7e1      	b.n	800784a <_strtol_l.constprop.0+0x8a>
 8007886:	1c53      	adds	r3, r2, #1
 8007888:	d108      	bne.n	800789c <_strtol_l.constprop.0+0xdc>
 800788a:	2322      	movs	r3, #34	@ 0x22
 800788c:	f8ce 3000 	str.w	r3, [lr]
 8007890:	4660      	mov	r0, ip
 8007892:	f1b8 0f00 	cmp.w	r8, #0
 8007896:	d0a0      	beq.n	80077da <_strtol_l.constprop.0+0x1a>
 8007898:	1e69      	subs	r1, r5, #1
 800789a:	e006      	b.n	80078aa <_strtol_l.constprop.0+0xea>
 800789c:	b106      	cbz	r6, 80078a0 <_strtol_l.constprop.0+0xe0>
 800789e:	4240      	negs	r0, r0
 80078a0:	f1b8 0f00 	cmp.w	r8, #0
 80078a4:	d099      	beq.n	80077da <_strtol_l.constprop.0+0x1a>
 80078a6:	2a00      	cmp	r2, #0
 80078a8:	d1f6      	bne.n	8007898 <_strtol_l.constprop.0+0xd8>
 80078aa:	f8c8 1000 	str.w	r1, [r8]
 80078ae:	e794      	b.n	80077da <_strtol_l.constprop.0+0x1a>
 80078b0:	08008ead 	.word	0x08008ead

080078b4 <strtol>:
 80078b4:	4613      	mov	r3, r2
 80078b6:	460a      	mov	r2, r1
 80078b8:	4601      	mov	r1, r0
 80078ba:	4802      	ldr	r0, [pc, #8]	@ (80078c4 <strtol+0x10>)
 80078bc:	6800      	ldr	r0, [r0, #0]
 80078be:	f7ff bf7f 	b.w	80077c0 <_strtol_l.constprop.0>
 80078c2:	bf00      	nop
 80078c4:	20000024 	.word	0x20000024

080078c8 <std>:
 80078c8:	2300      	movs	r3, #0
 80078ca:	b510      	push	{r4, lr}
 80078cc:	4604      	mov	r4, r0
 80078ce:	e9c0 3300 	strd	r3, r3, [r0]
 80078d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80078d6:	6083      	str	r3, [r0, #8]
 80078d8:	8181      	strh	r1, [r0, #12]
 80078da:	6643      	str	r3, [r0, #100]	@ 0x64
 80078dc:	81c2      	strh	r2, [r0, #14]
 80078de:	6183      	str	r3, [r0, #24]
 80078e0:	4619      	mov	r1, r3
 80078e2:	2208      	movs	r2, #8
 80078e4:	305c      	adds	r0, #92	@ 0x5c
 80078e6:	f000 fa2d 	bl	8007d44 <memset>
 80078ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007920 <std+0x58>)
 80078ec:	6263      	str	r3, [r4, #36]	@ 0x24
 80078ee:	4b0d      	ldr	r3, [pc, #52]	@ (8007924 <std+0x5c>)
 80078f0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80078f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007928 <std+0x60>)
 80078f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80078f6:	4b0d      	ldr	r3, [pc, #52]	@ (800792c <std+0x64>)
 80078f8:	6323      	str	r3, [r4, #48]	@ 0x30
 80078fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007930 <std+0x68>)
 80078fc:	6224      	str	r4, [r4, #32]
 80078fe:	429c      	cmp	r4, r3
 8007900:	d006      	beq.n	8007910 <std+0x48>
 8007902:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007906:	4294      	cmp	r4, r2
 8007908:	d002      	beq.n	8007910 <std+0x48>
 800790a:	33d0      	adds	r3, #208	@ 0xd0
 800790c:	429c      	cmp	r4, r3
 800790e:	d105      	bne.n	800791c <std+0x54>
 8007910:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007918:	f000 ba8c 	b.w	8007e34 <__retarget_lock_init_recursive>
 800791c:	bd10      	pop	{r4, pc}
 800791e:	bf00      	nop
 8007920:	08007b95 	.word	0x08007b95
 8007924:	08007bb7 	.word	0x08007bb7
 8007928:	08007bef 	.word	0x08007bef
 800792c:	08007c13 	.word	0x08007c13
 8007930:	20005708 	.word	0x20005708

08007934 <stdio_exit_handler>:
 8007934:	4a02      	ldr	r2, [pc, #8]	@ (8007940 <stdio_exit_handler+0xc>)
 8007936:	4903      	ldr	r1, [pc, #12]	@ (8007944 <stdio_exit_handler+0x10>)
 8007938:	4803      	ldr	r0, [pc, #12]	@ (8007948 <stdio_exit_handler+0x14>)
 800793a:	f000 b869 	b.w	8007a10 <_fwalk_sglue>
 800793e:	bf00      	nop
 8007940:	20000018 	.word	0x20000018
 8007944:	080089a1 	.word	0x080089a1
 8007948:	20000028 	.word	0x20000028

0800794c <cleanup_stdio>:
 800794c:	6841      	ldr	r1, [r0, #4]
 800794e:	4b0c      	ldr	r3, [pc, #48]	@ (8007980 <cleanup_stdio+0x34>)
 8007950:	4299      	cmp	r1, r3
 8007952:	b510      	push	{r4, lr}
 8007954:	4604      	mov	r4, r0
 8007956:	d001      	beq.n	800795c <cleanup_stdio+0x10>
 8007958:	f001 f822 	bl	80089a0 <_fflush_r>
 800795c:	68a1      	ldr	r1, [r4, #8]
 800795e:	4b09      	ldr	r3, [pc, #36]	@ (8007984 <cleanup_stdio+0x38>)
 8007960:	4299      	cmp	r1, r3
 8007962:	d002      	beq.n	800796a <cleanup_stdio+0x1e>
 8007964:	4620      	mov	r0, r4
 8007966:	f001 f81b 	bl	80089a0 <_fflush_r>
 800796a:	68e1      	ldr	r1, [r4, #12]
 800796c:	4b06      	ldr	r3, [pc, #24]	@ (8007988 <cleanup_stdio+0x3c>)
 800796e:	4299      	cmp	r1, r3
 8007970:	d004      	beq.n	800797c <cleanup_stdio+0x30>
 8007972:	4620      	mov	r0, r4
 8007974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007978:	f001 b812 	b.w	80089a0 <_fflush_r>
 800797c:	bd10      	pop	{r4, pc}
 800797e:	bf00      	nop
 8007980:	20005708 	.word	0x20005708
 8007984:	20005770 	.word	0x20005770
 8007988:	200057d8 	.word	0x200057d8

0800798c <global_stdio_init.part.0>:
 800798c:	b510      	push	{r4, lr}
 800798e:	4b0b      	ldr	r3, [pc, #44]	@ (80079bc <global_stdio_init.part.0+0x30>)
 8007990:	4c0b      	ldr	r4, [pc, #44]	@ (80079c0 <global_stdio_init.part.0+0x34>)
 8007992:	4a0c      	ldr	r2, [pc, #48]	@ (80079c4 <global_stdio_init.part.0+0x38>)
 8007994:	601a      	str	r2, [r3, #0]
 8007996:	4620      	mov	r0, r4
 8007998:	2200      	movs	r2, #0
 800799a:	2104      	movs	r1, #4
 800799c:	f7ff ff94 	bl	80078c8 <std>
 80079a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80079a4:	2201      	movs	r2, #1
 80079a6:	2109      	movs	r1, #9
 80079a8:	f7ff ff8e 	bl	80078c8 <std>
 80079ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80079b0:	2202      	movs	r2, #2
 80079b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079b6:	2112      	movs	r1, #18
 80079b8:	f7ff bf86 	b.w	80078c8 <std>
 80079bc:	20005840 	.word	0x20005840
 80079c0:	20005708 	.word	0x20005708
 80079c4:	08007935 	.word	0x08007935

080079c8 <__sfp_lock_acquire>:
 80079c8:	4801      	ldr	r0, [pc, #4]	@ (80079d0 <__sfp_lock_acquire+0x8>)
 80079ca:	f000 ba34 	b.w	8007e36 <__retarget_lock_acquire_recursive>
 80079ce:	bf00      	nop
 80079d0:	20005849 	.word	0x20005849

080079d4 <__sfp_lock_release>:
 80079d4:	4801      	ldr	r0, [pc, #4]	@ (80079dc <__sfp_lock_release+0x8>)
 80079d6:	f000 ba2f 	b.w	8007e38 <__retarget_lock_release_recursive>
 80079da:	bf00      	nop
 80079dc:	20005849 	.word	0x20005849

080079e0 <__sinit>:
 80079e0:	b510      	push	{r4, lr}
 80079e2:	4604      	mov	r4, r0
 80079e4:	f7ff fff0 	bl	80079c8 <__sfp_lock_acquire>
 80079e8:	6a23      	ldr	r3, [r4, #32]
 80079ea:	b11b      	cbz	r3, 80079f4 <__sinit+0x14>
 80079ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079f0:	f7ff bff0 	b.w	80079d4 <__sfp_lock_release>
 80079f4:	4b04      	ldr	r3, [pc, #16]	@ (8007a08 <__sinit+0x28>)
 80079f6:	6223      	str	r3, [r4, #32]
 80079f8:	4b04      	ldr	r3, [pc, #16]	@ (8007a0c <__sinit+0x2c>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d1f5      	bne.n	80079ec <__sinit+0xc>
 8007a00:	f7ff ffc4 	bl	800798c <global_stdio_init.part.0>
 8007a04:	e7f2      	b.n	80079ec <__sinit+0xc>
 8007a06:	bf00      	nop
 8007a08:	0800794d 	.word	0x0800794d
 8007a0c:	20005840 	.word	0x20005840

08007a10 <_fwalk_sglue>:
 8007a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a14:	4607      	mov	r7, r0
 8007a16:	4688      	mov	r8, r1
 8007a18:	4614      	mov	r4, r2
 8007a1a:	2600      	movs	r6, #0
 8007a1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a20:	f1b9 0901 	subs.w	r9, r9, #1
 8007a24:	d505      	bpl.n	8007a32 <_fwalk_sglue+0x22>
 8007a26:	6824      	ldr	r4, [r4, #0]
 8007a28:	2c00      	cmp	r4, #0
 8007a2a:	d1f7      	bne.n	8007a1c <_fwalk_sglue+0xc>
 8007a2c:	4630      	mov	r0, r6
 8007a2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a32:	89ab      	ldrh	r3, [r5, #12]
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d907      	bls.n	8007a48 <_fwalk_sglue+0x38>
 8007a38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	d003      	beq.n	8007a48 <_fwalk_sglue+0x38>
 8007a40:	4629      	mov	r1, r5
 8007a42:	4638      	mov	r0, r7
 8007a44:	47c0      	blx	r8
 8007a46:	4306      	orrs	r6, r0
 8007a48:	3568      	adds	r5, #104	@ 0x68
 8007a4a:	e7e9      	b.n	8007a20 <_fwalk_sglue+0x10>

08007a4c <iprintf>:
 8007a4c:	b40f      	push	{r0, r1, r2, r3}
 8007a4e:	b507      	push	{r0, r1, r2, lr}
 8007a50:	4906      	ldr	r1, [pc, #24]	@ (8007a6c <iprintf+0x20>)
 8007a52:	ab04      	add	r3, sp, #16
 8007a54:	6808      	ldr	r0, [r1, #0]
 8007a56:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a5a:	6881      	ldr	r1, [r0, #8]
 8007a5c:	9301      	str	r3, [sp, #4]
 8007a5e:	f000 fc75 	bl	800834c <_vfiprintf_r>
 8007a62:	b003      	add	sp, #12
 8007a64:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a68:	b004      	add	sp, #16
 8007a6a:	4770      	bx	lr
 8007a6c:	20000024 	.word	0x20000024

08007a70 <_puts_r>:
 8007a70:	6a03      	ldr	r3, [r0, #32]
 8007a72:	b570      	push	{r4, r5, r6, lr}
 8007a74:	6884      	ldr	r4, [r0, #8]
 8007a76:	4605      	mov	r5, r0
 8007a78:	460e      	mov	r6, r1
 8007a7a:	b90b      	cbnz	r3, 8007a80 <_puts_r+0x10>
 8007a7c:	f7ff ffb0 	bl	80079e0 <__sinit>
 8007a80:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a82:	07db      	lsls	r3, r3, #31
 8007a84:	d405      	bmi.n	8007a92 <_puts_r+0x22>
 8007a86:	89a3      	ldrh	r3, [r4, #12]
 8007a88:	0598      	lsls	r0, r3, #22
 8007a8a:	d402      	bmi.n	8007a92 <_puts_r+0x22>
 8007a8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a8e:	f000 f9d2 	bl	8007e36 <__retarget_lock_acquire_recursive>
 8007a92:	89a3      	ldrh	r3, [r4, #12]
 8007a94:	0719      	lsls	r1, r3, #28
 8007a96:	d502      	bpl.n	8007a9e <_puts_r+0x2e>
 8007a98:	6923      	ldr	r3, [r4, #16]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d135      	bne.n	8007b0a <_puts_r+0x9a>
 8007a9e:	4621      	mov	r1, r4
 8007aa0:	4628      	mov	r0, r5
 8007aa2:	f000 f8f9 	bl	8007c98 <__swsetup_r>
 8007aa6:	b380      	cbz	r0, 8007b0a <_puts_r+0x9a>
 8007aa8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8007aac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007aae:	07da      	lsls	r2, r3, #31
 8007ab0:	d405      	bmi.n	8007abe <_puts_r+0x4e>
 8007ab2:	89a3      	ldrh	r3, [r4, #12]
 8007ab4:	059b      	lsls	r3, r3, #22
 8007ab6:	d402      	bmi.n	8007abe <_puts_r+0x4e>
 8007ab8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007aba:	f000 f9bd 	bl	8007e38 <__retarget_lock_release_recursive>
 8007abe:	4628      	mov	r0, r5
 8007ac0:	bd70      	pop	{r4, r5, r6, pc}
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	da04      	bge.n	8007ad0 <_puts_r+0x60>
 8007ac6:	69a2      	ldr	r2, [r4, #24]
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	dc17      	bgt.n	8007afc <_puts_r+0x8c>
 8007acc:	290a      	cmp	r1, #10
 8007ace:	d015      	beq.n	8007afc <_puts_r+0x8c>
 8007ad0:	6823      	ldr	r3, [r4, #0]
 8007ad2:	1c5a      	adds	r2, r3, #1
 8007ad4:	6022      	str	r2, [r4, #0]
 8007ad6:	7019      	strb	r1, [r3, #0]
 8007ad8:	68a3      	ldr	r3, [r4, #8]
 8007ada:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007ade:	3b01      	subs	r3, #1
 8007ae0:	60a3      	str	r3, [r4, #8]
 8007ae2:	2900      	cmp	r1, #0
 8007ae4:	d1ed      	bne.n	8007ac2 <_puts_r+0x52>
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	da11      	bge.n	8007b0e <_puts_r+0x9e>
 8007aea:	4622      	mov	r2, r4
 8007aec:	210a      	movs	r1, #10
 8007aee:	4628      	mov	r0, r5
 8007af0:	f000 f893 	bl	8007c1a <__swbuf_r>
 8007af4:	3001      	adds	r0, #1
 8007af6:	d0d7      	beq.n	8007aa8 <_puts_r+0x38>
 8007af8:	250a      	movs	r5, #10
 8007afa:	e7d7      	b.n	8007aac <_puts_r+0x3c>
 8007afc:	4622      	mov	r2, r4
 8007afe:	4628      	mov	r0, r5
 8007b00:	f000 f88b 	bl	8007c1a <__swbuf_r>
 8007b04:	3001      	adds	r0, #1
 8007b06:	d1e7      	bne.n	8007ad8 <_puts_r+0x68>
 8007b08:	e7ce      	b.n	8007aa8 <_puts_r+0x38>
 8007b0a:	3e01      	subs	r6, #1
 8007b0c:	e7e4      	b.n	8007ad8 <_puts_r+0x68>
 8007b0e:	6823      	ldr	r3, [r4, #0]
 8007b10:	1c5a      	adds	r2, r3, #1
 8007b12:	6022      	str	r2, [r4, #0]
 8007b14:	220a      	movs	r2, #10
 8007b16:	701a      	strb	r2, [r3, #0]
 8007b18:	e7ee      	b.n	8007af8 <_puts_r+0x88>
	...

08007b1c <puts>:
 8007b1c:	4b02      	ldr	r3, [pc, #8]	@ (8007b28 <puts+0xc>)
 8007b1e:	4601      	mov	r1, r0
 8007b20:	6818      	ldr	r0, [r3, #0]
 8007b22:	f7ff bfa5 	b.w	8007a70 <_puts_r>
 8007b26:	bf00      	nop
 8007b28:	20000024 	.word	0x20000024

08007b2c <sniprintf>:
 8007b2c:	b40c      	push	{r2, r3}
 8007b2e:	b530      	push	{r4, r5, lr}
 8007b30:	4b17      	ldr	r3, [pc, #92]	@ (8007b90 <sniprintf+0x64>)
 8007b32:	1e0c      	subs	r4, r1, #0
 8007b34:	681d      	ldr	r5, [r3, #0]
 8007b36:	b09d      	sub	sp, #116	@ 0x74
 8007b38:	da08      	bge.n	8007b4c <sniprintf+0x20>
 8007b3a:	238b      	movs	r3, #139	@ 0x8b
 8007b3c:	602b      	str	r3, [r5, #0]
 8007b3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007b42:	b01d      	add	sp, #116	@ 0x74
 8007b44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b48:	b002      	add	sp, #8
 8007b4a:	4770      	bx	lr
 8007b4c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007b50:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007b54:	bf14      	ite	ne
 8007b56:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8007b5a:	4623      	moveq	r3, r4
 8007b5c:	9304      	str	r3, [sp, #16]
 8007b5e:	9307      	str	r3, [sp, #28]
 8007b60:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007b64:	9002      	str	r0, [sp, #8]
 8007b66:	9006      	str	r0, [sp, #24]
 8007b68:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007b6c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007b6e:	ab21      	add	r3, sp, #132	@ 0x84
 8007b70:	a902      	add	r1, sp, #8
 8007b72:	4628      	mov	r0, r5
 8007b74:	9301      	str	r3, [sp, #4]
 8007b76:	f000 fac3 	bl	8008100 <_svfiprintf_r>
 8007b7a:	1c43      	adds	r3, r0, #1
 8007b7c:	bfbc      	itt	lt
 8007b7e:	238b      	movlt	r3, #139	@ 0x8b
 8007b80:	602b      	strlt	r3, [r5, #0]
 8007b82:	2c00      	cmp	r4, #0
 8007b84:	d0dd      	beq.n	8007b42 <sniprintf+0x16>
 8007b86:	9b02      	ldr	r3, [sp, #8]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	701a      	strb	r2, [r3, #0]
 8007b8c:	e7d9      	b.n	8007b42 <sniprintf+0x16>
 8007b8e:	bf00      	nop
 8007b90:	20000024 	.word	0x20000024

08007b94 <__sread>:
 8007b94:	b510      	push	{r4, lr}
 8007b96:	460c      	mov	r4, r1
 8007b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b9c:	f000 f8fc 	bl	8007d98 <_read_r>
 8007ba0:	2800      	cmp	r0, #0
 8007ba2:	bfab      	itete	ge
 8007ba4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007ba6:	89a3      	ldrhlt	r3, [r4, #12]
 8007ba8:	181b      	addge	r3, r3, r0
 8007baa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007bae:	bfac      	ite	ge
 8007bb0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007bb2:	81a3      	strhlt	r3, [r4, #12]
 8007bb4:	bd10      	pop	{r4, pc}

08007bb6 <__swrite>:
 8007bb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bba:	461f      	mov	r7, r3
 8007bbc:	898b      	ldrh	r3, [r1, #12]
 8007bbe:	05db      	lsls	r3, r3, #23
 8007bc0:	4605      	mov	r5, r0
 8007bc2:	460c      	mov	r4, r1
 8007bc4:	4616      	mov	r6, r2
 8007bc6:	d505      	bpl.n	8007bd4 <__swrite+0x1e>
 8007bc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bcc:	2302      	movs	r3, #2
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f000 f8d0 	bl	8007d74 <_lseek_r>
 8007bd4:	89a3      	ldrh	r3, [r4, #12]
 8007bd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bda:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007bde:	81a3      	strh	r3, [r4, #12]
 8007be0:	4632      	mov	r2, r6
 8007be2:	463b      	mov	r3, r7
 8007be4:	4628      	mov	r0, r5
 8007be6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bea:	f000 b8e7 	b.w	8007dbc <_write_r>

08007bee <__sseek>:
 8007bee:	b510      	push	{r4, lr}
 8007bf0:	460c      	mov	r4, r1
 8007bf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bf6:	f000 f8bd 	bl	8007d74 <_lseek_r>
 8007bfa:	1c43      	adds	r3, r0, #1
 8007bfc:	89a3      	ldrh	r3, [r4, #12]
 8007bfe:	bf15      	itete	ne
 8007c00:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007c02:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007c06:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007c0a:	81a3      	strheq	r3, [r4, #12]
 8007c0c:	bf18      	it	ne
 8007c0e:	81a3      	strhne	r3, [r4, #12]
 8007c10:	bd10      	pop	{r4, pc}

08007c12 <__sclose>:
 8007c12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c16:	f000 b89d 	b.w	8007d54 <_close_r>

08007c1a <__swbuf_r>:
 8007c1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c1c:	460e      	mov	r6, r1
 8007c1e:	4614      	mov	r4, r2
 8007c20:	4605      	mov	r5, r0
 8007c22:	b118      	cbz	r0, 8007c2c <__swbuf_r+0x12>
 8007c24:	6a03      	ldr	r3, [r0, #32]
 8007c26:	b90b      	cbnz	r3, 8007c2c <__swbuf_r+0x12>
 8007c28:	f7ff feda 	bl	80079e0 <__sinit>
 8007c2c:	69a3      	ldr	r3, [r4, #24]
 8007c2e:	60a3      	str	r3, [r4, #8]
 8007c30:	89a3      	ldrh	r3, [r4, #12]
 8007c32:	071a      	lsls	r2, r3, #28
 8007c34:	d501      	bpl.n	8007c3a <__swbuf_r+0x20>
 8007c36:	6923      	ldr	r3, [r4, #16]
 8007c38:	b943      	cbnz	r3, 8007c4c <__swbuf_r+0x32>
 8007c3a:	4621      	mov	r1, r4
 8007c3c:	4628      	mov	r0, r5
 8007c3e:	f000 f82b 	bl	8007c98 <__swsetup_r>
 8007c42:	b118      	cbz	r0, 8007c4c <__swbuf_r+0x32>
 8007c44:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007c48:	4638      	mov	r0, r7
 8007c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c4c:	6823      	ldr	r3, [r4, #0]
 8007c4e:	6922      	ldr	r2, [r4, #16]
 8007c50:	1a98      	subs	r0, r3, r2
 8007c52:	6963      	ldr	r3, [r4, #20]
 8007c54:	b2f6      	uxtb	r6, r6
 8007c56:	4283      	cmp	r3, r0
 8007c58:	4637      	mov	r7, r6
 8007c5a:	dc05      	bgt.n	8007c68 <__swbuf_r+0x4e>
 8007c5c:	4621      	mov	r1, r4
 8007c5e:	4628      	mov	r0, r5
 8007c60:	f000 fe9e 	bl	80089a0 <_fflush_r>
 8007c64:	2800      	cmp	r0, #0
 8007c66:	d1ed      	bne.n	8007c44 <__swbuf_r+0x2a>
 8007c68:	68a3      	ldr	r3, [r4, #8]
 8007c6a:	3b01      	subs	r3, #1
 8007c6c:	60a3      	str	r3, [r4, #8]
 8007c6e:	6823      	ldr	r3, [r4, #0]
 8007c70:	1c5a      	adds	r2, r3, #1
 8007c72:	6022      	str	r2, [r4, #0]
 8007c74:	701e      	strb	r6, [r3, #0]
 8007c76:	6962      	ldr	r2, [r4, #20]
 8007c78:	1c43      	adds	r3, r0, #1
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d004      	beq.n	8007c88 <__swbuf_r+0x6e>
 8007c7e:	89a3      	ldrh	r3, [r4, #12]
 8007c80:	07db      	lsls	r3, r3, #31
 8007c82:	d5e1      	bpl.n	8007c48 <__swbuf_r+0x2e>
 8007c84:	2e0a      	cmp	r6, #10
 8007c86:	d1df      	bne.n	8007c48 <__swbuf_r+0x2e>
 8007c88:	4621      	mov	r1, r4
 8007c8a:	4628      	mov	r0, r5
 8007c8c:	f000 fe88 	bl	80089a0 <_fflush_r>
 8007c90:	2800      	cmp	r0, #0
 8007c92:	d0d9      	beq.n	8007c48 <__swbuf_r+0x2e>
 8007c94:	e7d6      	b.n	8007c44 <__swbuf_r+0x2a>
	...

08007c98 <__swsetup_r>:
 8007c98:	b538      	push	{r3, r4, r5, lr}
 8007c9a:	4b29      	ldr	r3, [pc, #164]	@ (8007d40 <__swsetup_r+0xa8>)
 8007c9c:	4605      	mov	r5, r0
 8007c9e:	6818      	ldr	r0, [r3, #0]
 8007ca0:	460c      	mov	r4, r1
 8007ca2:	b118      	cbz	r0, 8007cac <__swsetup_r+0x14>
 8007ca4:	6a03      	ldr	r3, [r0, #32]
 8007ca6:	b90b      	cbnz	r3, 8007cac <__swsetup_r+0x14>
 8007ca8:	f7ff fe9a 	bl	80079e0 <__sinit>
 8007cac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cb0:	0719      	lsls	r1, r3, #28
 8007cb2:	d422      	bmi.n	8007cfa <__swsetup_r+0x62>
 8007cb4:	06da      	lsls	r2, r3, #27
 8007cb6:	d407      	bmi.n	8007cc8 <__swsetup_r+0x30>
 8007cb8:	2209      	movs	r2, #9
 8007cba:	602a      	str	r2, [r5, #0]
 8007cbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cc0:	81a3      	strh	r3, [r4, #12]
 8007cc2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007cc6:	e033      	b.n	8007d30 <__swsetup_r+0x98>
 8007cc8:	0758      	lsls	r0, r3, #29
 8007cca:	d512      	bpl.n	8007cf2 <__swsetup_r+0x5a>
 8007ccc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007cce:	b141      	cbz	r1, 8007ce2 <__swsetup_r+0x4a>
 8007cd0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007cd4:	4299      	cmp	r1, r3
 8007cd6:	d002      	beq.n	8007cde <__swsetup_r+0x46>
 8007cd8:	4628      	mov	r0, r5
 8007cda:	f000 f8bd 	bl	8007e58 <_free_r>
 8007cde:	2300      	movs	r3, #0
 8007ce0:	6363      	str	r3, [r4, #52]	@ 0x34
 8007ce2:	89a3      	ldrh	r3, [r4, #12]
 8007ce4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007ce8:	81a3      	strh	r3, [r4, #12]
 8007cea:	2300      	movs	r3, #0
 8007cec:	6063      	str	r3, [r4, #4]
 8007cee:	6923      	ldr	r3, [r4, #16]
 8007cf0:	6023      	str	r3, [r4, #0]
 8007cf2:	89a3      	ldrh	r3, [r4, #12]
 8007cf4:	f043 0308 	orr.w	r3, r3, #8
 8007cf8:	81a3      	strh	r3, [r4, #12]
 8007cfa:	6923      	ldr	r3, [r4, #16]
 8007cfc:	b94b      	cbnz	r3, 8007d12 <__swsetup_r+0x7a>
 8007cfe:	89a3      	ldrh	r3, [r4, #12]
 8007d00:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007d04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d08:	d003      	beq.n	8007d12 <__swsetup_r+0x7a>
 8007d0a:	4621      	mov	r1, r4
 8007d0c:	4628      	mov	r0, r5
 8007d0e:	f000 fe95 	bl	8008a3c <__smakebuf_r>
 8007d12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d16:	f013 0201 	ands.w	r2, r3, #1
 8007d1a:	d00a      	beq.n	8007d32 <__swsetup_r+0x9a>
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	60a2      	str	r2, [r4, #8]
 8007d20:	6962      	ldr	r2, [r4, #20]
 8007d22:	4252      	negs	r2, r2
 8007d24:	61a2      	str	r2, [r4, #24]
 8007d26:	6922      	ldr	r2, [r4, #16]
 8007d28:	b942      	cbnz	r2, 8007d3c <__swsetup_r+0xa4>
 8007d2a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007d2e:	d1c5      	bne.n	8007cbc <__swsetup_r+0x24>
 8007d30:	bd38      	pop	{r3, r4, r5, pc}
 8007d32:	0799      	lsls	r1, r3, #30
 8007d34:	bf58      	it	pl
 8007d36:	6962      	ldrpl	r2, [r4, #20]
 8007d38:	60a2      	str	r2, [r4, #8]
 8007d3a:	e7f4      	b.n	8007d26 <__swsetup_r+0x8e>
 8007d3c:	2000      	movs	r0, #0
 8007d3e:	e7f7      	b.n	8007d30 <__swsetup_r+0x98>
 8007d40:	20000024 	.word	0x20000024

08007d44 <memset>:
 8007d44:	4402      	add	r2, r0
 8007d46:	4603      	mov	r3, r0
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d100      	bne.n	8007d4e <memset+0xa>
 8007d4c:	4770      	bx	lr
 8007d4e:	f803 1b01 	strb.w	r1, [r3], #1
 8007d52:	e7f9      	b.n	8007d48 <memset+0x4>

08007d54 <_close_r>:
 8007d54:	b538      	push	{r3, r4, r5, lr}
 8007d56:	4d06      	ldr	r5, [pc, #24]	@ (8007d70 <_close_r+0x1c>)
 8007d58:	2300      	movs	r3, #0
 8007d5a:	4604      	mov	r4, r0
 8007d5c:	4608      	mov	r0, r1
 8007d5e:	602b      	str	r3, [r5, #0]
 8007d60:	f7f9 f8b5 	bl	8000ece <_close>
 8007d64:	1c43      	adds	r3, r0, #1
 8007d66:	d102      	bne.n	8007d6e <_close_r+0x1a>
 8007d68:	682b      	ldr	r3, [r5, #0]
 8007d6a:	b103      	cbz	r3, 8007d6e <_close_r+0x1a>
 8007d6c:	6023      	str	r3, [r4, #0]
 8007d6e:	bd38      	pop	{r3, r4, r5, pc}
 8007d70:	20005844 	.word	0x20005844

08007d74 <_lseek_r>:
 8007d74:	b538      	push	{r3, r4, r5, lr}
 8007d76:	4d07      	ldr	r5, [pc, #28]	@ (8007d94 <_lseek_r+0x20>)
 8007d78:	4604      	mov	r4, r0
 8007d7a:	4608      	mov	r0, r1
 8007d7c:	4611      	mov	r1, r2
 8007d7e:	2200      	movs	r2, #0
 8007d80:	602a      	str	r2, [r5, #0]
 8007d82:	461a      	mov	r2, r3
 8007d84:	f7f9 f8ca 	bl	8000f1c <_lseek>
 8007d88:	1c43      	adds	r3, r0, #1
 8007d8a:	d102      	bne.n	8007d92 <_lseek_r+0x1e>
 8007d8c:	682b      	ldr	r3, [r5, #0]
 8007d8e:	b103      	cbz	r3, 8007d92 <_lseek_r+0x1e>
 8007d90:	6023      	str	r3, [r4, #0]
 8007d92:	bd38      	pop	{r3, r4, r5, pc}
 8007d94:	20005844 	.word	0x20005844

08007d98 <_read_r>:
 8007d98:	b538      	push	{r3, r4, r5, lr}
 8007d9a:	4d07      	ldr	r5, [pc, #28]	@ (8007db8 <_read_r+0x20>)
 8007d9c:	4604      	mov	r4, r0
 8007d9e:	4608      	mov	r0, r1
 8007da0:	4611      	mov	r1, r2
 8007da2:	2200      	movs	r2, #0
 8007da4:	602a      	str	r2, [r5, #0]
 8007da6:	461a      	mov	r2, r3
 8007da8:	f7f9 f858 	bl	8000e5c <_read>
 8007dac:	1c43      	adds	r3, r0, #1
 8007dae:	d102      	bne.n	8007db6 <_read_r+0x1e>
 8007db0:	682b      	ldr	r3, [r5, #0]
 8007db2:	b103      	cbz	r3, 8007db6 <_read_r+0x1e>
 8007db4:	6023      	str	r3, [r4, #0]
 8007db6:	bd38      	pop	{r3, r4, r5, pc}
 8007db8:	20005844 	.word	0x20005844

08007dbc <_write_r>:
 8007dbc:	b538      	push	{r3, r4, r5, lr}
 8007dbe:	4d07      	ldr	r5, [pc, #28]	@ (8007ddc <_write_r+0x20>)
 8007dc0:	4604      	mov	r4, r0
 8007dc2:	4608      	mov	r0, r1
 8007dc4:	4611      	mov	r1, r2
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	602a      	str	r2, [r5, #0]
 8007dca:	461a      	mov	r2, r3
 8007dcc:	f7f9 f863 	bl	8000e96 <_write>
 8007dd0:	1c43      	adds	r3, r0, #1
 8007dd2:	d102      	bne.n	8007dda <_write_r+0x1e>
 8007dd4:	682b      	ldr	r3, [r5, #0]
 8007dd6:	b103      	cbz	r3, 8007dda <_write_r+0x1e>
 8007dd8:	6023      	str	r3, [r4, #0]
 8007dda:	bd38      	pop	{r3, r4, r5, pc}
 8007ddc:	20005844 	.word	0x20005844

08007de0 <__errno>:
 8007de0:	4b01      	ldr	r3, [pc, #4]	@ (8007de8 <__errno+0x8>)
 8007de2:	6818      	ldr	r0, [r3, #0]
 8007de4:	4770      	bx	lr
 8007de6:	bf00      	nop
 8007de8:	20000024 	.word	0x20000024

08007dec <__libc_init_array>:
 8007dec:	b570      	push	{r4, r5, r6, lr}
 8007dee:	4d0d      	ldr	r5, [pc, #52]	@ (8007e24 <__libc_init_array+0x38>)
 8007df0:	4c0d      	ldr	r4, [pc, #52]	@ (8007e28 <__libc_init_array+0x3c>)
 8007df2:	1b64      	subs	r4, r4, r5
 8007df4:	10a4      	asrs	r4, r4, #2
 8007df6:	2600      	movs	r6, #0
 8007df8:	42a6      	cmp	r6, r4
 8007dfa:	d109      	bne.n	8007e10 <__libc_init_array+0x24>
 8007dfc:	4d0b      	ldr	r5, [pc, #44]	@ (8007e2c <__libc_init_array+0x40>)
 8007dfe:	4c0c      	ldr	r4, [pc, #48]	@ (8007e30 <__libc_init_array+0x44>)
 8007e00:	f000 feda 	bl	8008bb8 <_init>
 8007e04:	1b64      	subs	r4, r4, r5
 8007e06:	10a4      	asrs	r4, r4, #2
 8007e08:	2600      	movs	r6, #0
 8007e0a:	42a6      	cmp	r6, r4
 8007e0c:	d105      	bne.n	8007e1a <__libc_init_array+0x2e>
 8007e0e:	bd70      	pop	{r4, r5, r6, pc}
 8007e10:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e14:	4798      	blx	r3
 8007e16:	3601      	adds	r6, #1
 8007e18:	e7ee      	b.n	8007df8 <__libc_init_array+0xc>
 8007e1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e1e:	4798      	blx	r3
 8007e20:	3601      	adds	r6, #1
 8007e22:	e7f2      	b.n	8007e0a <__libc_init_array+0x1e>
 8007e24:	08008fe8 	.word	0x08008fe8
 8007e28:	08008fe8 	.word	0x08008fe8
 8007e2c:	08008fe8 	.word	0x08008fe8
 8007e30:	08008fec 	.word	0x08008fec

08007e34 <__retarget_lock_init_recursive>:
 8007e34:	4770      	bx	lr

08007e36 <__retarget_lock_acquire_recursive>:
 8007e36:	4770      	bx	lr

08007e38 <__retarget_lock_release_recursive>:
 8007e38:	4770      	bx	lr

08007e3a <memcpy>:
 8007e3a:	440a      	add	r2, r1
 8007e3c:	4291      	cmp	r1, r2
 8007e3e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007e42:	d100      	bne.n	8007e46 <memcpy+0xc>
 8007e44:	4770      	bx	lr
 8007e46:	b510      	push	{r4, lr}
 8007e48:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e50:	4291      	cmp	r1, r2
 8007e52:	d1f9      	bne.n	8007e48 <memcpy+0xe>
 8007e54:	bd10      	pop	{r4, pc}
	...

08007e58 <_free_r>:
 8007e58:	b538      	push	{r3, r4, r5, lr}
 8007e5a:	4605      	mov	r5, r0
 8007e5c:	2900      	cmp	r1, #0
 8007e5e:	d041      	beq.n	8007ee4 <_free_r+0x8c>
 8007e60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e64:	1f0c      	subs	r4, r1, #4
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	bfb8      	it	lt
 8007e6a:	18e4      	addlt	r4, r4, r3
 8007e6c:	f000 f8e0 	bl	8008030 <__malloc_lock>
 8007e70:	4a1d      	ldr	r2, [pc, #116]	@ (8007ee8 <_free_r+0x90>)
 8007e72:	6813      	ldr	r3, [r2, #0]
 8007e74:	b933      	cbnz	r3, 8007e84 <_free_r+0x2c>
 8007e76:	6063      	str	r3, [r4, #4]
 8007e78:	6014      	str	r4, [r2, #0]
 8007e7a:	4628      	mov	r0, r5
 8007e7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e80:	f000 b8dc 	b.w	800803c <__malloc_unlock>
 8007e84:	42a3      	cmp	r3, r4
 8007e86:	d908      	bls.n	8007e9a <_free_r+0x42>
 8007e88:	6820      	ldr	r0, [r4, #0]
 8007e8a:	1821      	adds	r1, r4, r0
 8007e8c:	428b      	cmp	r3, r1
 8007e8e:	bf01      	itttt	eq
 8007e90:	6819      	ldreq	r1, [r3, #0]
 8007e92:	685b      	ldreq	r3, [r3, #4]
 8007e94:	1809      	addeq	r1, r1, r0
 8007e96:	6021      	streq	r1, [r4, #0]
 8007e98:	e7ed      	b.n	8007e76 <_free_r+0x1e>
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	b10b      	cbz	r3, 8007ea4 <_free_r+0x4c>
 8007ea0:	42a3      	cmp	r3, r4
 8007ea2:	d9fa      	bls.n	8007e9a <_free_r+0x42>
 8007ea4:	6811      	ldr	r1, [r2, #0]
 8007ea6:	1850      	adds	r0, r2, r1
 8007ea8:	42a0      	cmp	r0, r4
 8007eaa:	d10b      	bne.n	8007ec4 <_free_r+0x6c>
 8007eac:	6820      	ldr	r0, [r4, #0]
 8007eae:	4401      	add	r1, r0
 8007eb0:	1850      	adds	r0, r2, r1
 8007eb2:	4283      	cmp	r3, r0
 8007eb4:	6011      	str	r1, [r2, #0]
 8007eb6:	d1e0      	bne.n	8007e7a <_free_r+0x22>
 8007eb8:	6818      	ldr	r0, [r3, #0]
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	6053      	str	r3, [r2, #4]
 8007ebe:	4408      	add	r0, r1
 8007ec0:	6010      	str	r0, [r2, #0]
 8007ec2:	e7da      	b.n	8007e7a <_free_r+0x22>
 8007ec4:	d902      	bls.n	8007ecc <_free_r+0x74>
 8007ec6:	230c      	movs	r3, #12
 8007ec8:	602b      	str	r3, [r5, #0]
 8007eca:	e7d6      	b.n	8007e7a <_free_r+0x22>
 8007ecc:	6820      	ldr	r0, [r4, #0]
 8007ece:	1821      	adds	r1, r4, r0
 8007ed0:	428b      	cmp	r3, r1
 8007ed2:	bf04      	itt	eq
 8007ed4:	6819      	ldreq	r1, [r3, #0]
 8007ed6:	685b      	ldreq	r3, [r3, #4]
 8007ed8:	6063      	str	r3, [r4, #4]
 8007eda:	bf04      	itt	eq
 8007edc:	1809      	addeq	r1, r1, r0
 8007ede:	6021      	streq	r1, [r4, #0]
 8007ee0:	6054      	str	r4, [r2, #4]
 8007ee2:	e7ca      	b.n	8007e7a <_free_r+0x22>
 8007ee4:	bd38      	pop	{r3, r4, r5, pc}
 8007ee6:	bf00      	nop
 8007ee8:	20005850 	.word	0x20005850

08007eec <sbrk_aligned>:
 8007eec:	b570      	push	{r4, r5, r6, lr}
 8007eee:	4e0f      	ldr	r6, [pc, #60]	@ (8007f2c <sbrk_aligned+0x40>)
 8007ef0:	460c      	mov	r4, r1
 8007ef2:	6831      	ldr	r1, [r6, #0]
 8007ef4:	4605      	mov	r5, r0
 8007ef6:	b911      	cbnz	r1, 8007efe <sbrk_aligned+0x12>
 8007ef8:	f000 fe18 	bl	8008b2c <_sbrk_r>
 8007efc:	6030      	str	r0, [r6, #0]
 8007efe:	4621      	mov	r1, r4
 8007f00:	4628      	mov	r0, r5
 8007f02:	f000 fe13 	bl	8008b2c <_sbrk_r>
 8007f06:	1c43      	adds	r3, r0, #1
 8007f08:	d103      	bne.n	8007f12 <sbrk_aligned+0x26>
 8007f0a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007f0e:	4620      	mov	r0, r4
 8007f10:	bd70      	pop	{r4, r5, r6, pc}
 8007f12:	1cc4      	adds	r4, r0, #3
 8007f14:	f024 0403 	bic.w	r4, r4, #3
 8007f18:	42a0      	cmp	r0, r4
 8007f1a:	d0f8      	beq.n	8007f0e <sbrk_aligned+0x22>
 8007f1c:	1a21      	subs	r1, r4, r0
 8007f1e:	4628      	mov	r0, r5
 8007f20:	f000 fe04 	bl	8008b2c <_sbrk_r>
 8007f24:	3001      	adds	r0, #1
 8007f26:	d1f2      	bne.n	8007f0e <sbrk_aligned+0x22>
 8007f28:	e7ef      	b.n	8007f0a <sbrk_aligned+0x1e>
 8007f2a:	bf00      	nop
 8007f2c:	2000584c 	.word	0x2000584c

08007f30 <_malloc_r>:
 8007f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f34:	1ccd      	adds	r5, r1, #3
 8007f36:	f025 0503 	bic.w	r5, r5, #3
 8007f3a:	3508      	adds	r5, #8
 8007f3c:	2d0c      	cmp	r5, #12
 8007f3e:	bf38      	it	cc
 8007f40:	250c      	movcc	r5, #12
 8007f42:	2d00      	cmp	r5, #0
 8007f44:	4606      	mov	r6, r0
 8007f46:	db01      	blt.n	8007f4c <_malloc_r+0x1c>
 8007f48:	42a9      	cmp	r1, r5
 8007f4a:	d904      	bls.n	8007f56 <_malloc_r+0x26>
 8007f4c:	230c      	movs	r3, #12
 8007f4e:	6033      	str	r3, [r6, #0]
 8007f50:	2000      	movs	r0, #0
 8007f52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800802c <_malloc_r+0xfc>
 8007f5a:	f000 f869 	bl	8008030 <__malloc_lock>
 8007f5e:	f8d8 3000 	ldr.w	r3, [r8]
 8007f62:	461c      	mov	r4, r3
 8007f64:	bb44      	cbnz	r4, 8007fb8 <_malloc_r+0x88>
 8007f66:	4629      	mov	r1, r5
 8007f68:	4630      	mov	r0, r6
 8007f6a:	f7ff ffbf 	bl	8007eec <sbrk_aligned>
 8007f6e:	1c43      	adds	r3, r0, #1
 8007f70:	4604      	mov	r4, r0
 8007f72:	d158      	bne.n	8008026 <_malloc_r+0xf6>
 8007f74:	f8d8 4000 	ldr.w	r4, [r8]
 8007f78:	4627      	mov	r7, r4
 8007f7a:	2f00      	cmp	r7, #0
 8007f7c:	d143      	bne.n	8008006 <_malloc_r+0xd6>
 8007f7e:	2c00      	cmp	r4, #0
 8007f80:	d04b      	beq.n	800801a <_malloc_r+0xea>
 8007f82:	6823      	ldr	r3, [r4, #0]
 8007f84:	4639      	mov	r1, r7
 8007f86:	4630      	mov	r0, r6
 8007f88:	eb04 0903 	add.w	r9, r4, r3
 8007f8c:	f000 fdce 	bl	8008b2c <_sbrk_r>
 8007f90:	4581      	cmp	r9, r0
 8007f92:	d142      	bne.n	800801a <_malloc_r+0xea>
 8007f94:	6821      	ldr	r1, [r4, #0]
 8007f96:	1a6d      	subs	r5, r5, r1
 8007f98:	4629      	mov	r1, r5
 8007f9a:	4630      	mov	r0, r6
 8007f9c:	f7ff ffa6 	bl	8007eec <sbrk_aligned>
 8007fa0:	3001      	adds	r0, #1
 8007fa2:	d03a      	beq.n	800801a <_malloc_r+0xea>
 8007fa4:	6823      	ldr	r3, [r4, #0]
 8007fa6:	442b      	add	r3, r5
 8007fa8:	6023      	str	r3, [r4, #0]
 8007faa:	f8d8 3000 	ldr.w	r3, [r8]
 8007fae:	685a      	ldr	r2, [r3, #4]
 8007fb0:	bb62      	cbnz	r2, 800800c <_malloc_r+0xdc>
 8007fb2:	f8c8 7000 	str.w	r7, [r8]
 8007fb6:	e00f      	b.n	8007fd8 <_malloc_r+0xa8>
 8007fb8:	6822      	ldr	r2, [r4, #0]
 8007fba:	1b52      	subs	r2, r2, r5
 8007fbc:	d420      	bmi.n	8008000 <_malloc_r+0xd0>
 8007fbe:	2a0b      	cmp	r2, #11
 8007fc0:	d917      	bls.n	8007ff2 <_malloc_r+0xc2>
 8007fc2:	1961      	adds	r1, r4, r5
 8007fc4:	42a3      	cmp	r3, r4
 8007fc6:	6025      	str	r5, [r4, #0]
 8007fc8:	bf18      	it	ne
 8007fca:	6059      	strne	r1, [r3, #4]
 8007fcc:	6863      	ldr	r3, [r4, #4]
 8007fce:	bf08      	it	eq
 8007fd0:	f8c8 1000 	streq.w	r1, [r8]
 8007fd4:	5162      	str	r2, [r4, r5]
 8007fd6:	604b      	str	r3, [r1, #4]
 8007fd8:	4630      	mov	r0, r6
 8007fda:	f000 f82f 	bl	800803c <__malloc_unlock>
 8007fde:	f104 000b 	add.w	r0, r4, #11
 8007fe2:	1d23      	adds	r3, r4, #4
 8007fe4:	f020 0007 	bic.w	r0, r0, #7
 8007fe8:	1ac2      	subs	r2, r0, r3
 8007fea:	bf1c      	itt	ne
 8007fec:	1a1b      	subne	r3, r3, r0
 8007fee:	50a3      	strne	r3, [r4, r2]
 8007ff0:	e7af      	b.n	8007f52 <_malloc_r+0x22>
 8007ff2:	6862      	ldr	r2, [r4, #4]
 8007ff4:	42a3      	cmp	r3, r4
 8007ff6:	bf0c      	ite	eq
 8007ff8:	f8c8 2000 	streq.w	r2, [r8]
 8007ffc:	605a      	strne	r2, [r3, #4]
 8007ffe:	e7eb      	b.n	8007fd8 <_malloc_r+0xa8>
 8008000:	4623      	mov	r3, r4
 8008002:	6864      	ldr	r4, [r4, #4]
 8008004:	e7ae      	b.n	8007f64 <_malloc_r+0x34>
 8008006:	463c      	mov	r4, r7
 8008008:	687f      	ldr	r7, [r7, #4]
 800800a:	e7b6      	b.n	8007f7a <_malloc_r+0x4a>
 800800c:	461a      	mov	r2, r3
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	42a3      	cmp	r3, r4
 8008012:	d1fb      	bne.n	800800c <_malloc_r+0xdc>
 8008014:	2300      	movs	r3, #0
 8008016:	6053      	str	r3, [r2, #4]
 8008018:	e7de      	b.n	8007fd8 <_malloc_r+0xa8>
 800801a:	230c      	movs	r3, #12
 800801c:	6033      	str	r3, [r6, #0]
 800801e:	4630      	mov	r0, r6
 8008020:	f000 f80c 	bl	800803c <__malloc_unlock>
 8008024:	e794      	b.n	8007f50 <_malloc_r+0x20>
 8008026:	6005      	str	r5, [r0, #0]
 8008028:	e7d6      	b.n	8007fd8 <_malloc_r+0xa8>
 800802a:	bf00      	nop
 800802c:	20005850 	.word	0x20005850

08008030 <__malloc_lock>:
 8008030:	4801      	ldr	r0, [pc, #4]	@ (8008038 <__malloc_lock+0x8>)
 8008032:	f7ff bf00 	b.w	8007e36 <__retarget_lock_acquire_recursive>
 8008036:	bf00      	nop
 8008038:	20005848 	.word	0x20005848

0800803c <__malloc_unlock>:
 800803c:	4801      	ldr	r0, [pc, #4]	@ (8008044 <__malloc_unlock+0x8>)
 800803e:	f7ff befb 	b.w	8007e38 <__retarget_lock_release_recursive>
 8008042:	bf00      	nop
 8008044:	20005848 	.word	0x20005848

08008048 <__ssputs_r>:
 8008048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800804c:	688e      	ldr	r6, [r1, #8]
 800804e:	461f      	mov	r7, r3
 8008050:	42be      	cmp	r6, r7
 8008052:	680b      	ldr	r3, [r1, #0]
 8008054:	4682      	mov	sl, r0
 8008056:	460c      	mov	r4, r1
 8008058:	4690      	mov	r8, r2
 800805a:	d82d      	bhi.n	80080b8 <__ssputs_r+0x70>
 800805c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008060:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008064:	d026      	beq.n	80080b4 <__ssputs_r+0x6c>
 8008066:	6965      	ldr	r5, [r4, #20]
 8008068:	6909      	ldr	r1, [r1, #16]
 800806a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800806e:	eba3 0901 	sub.w	r9, r3, r1
 8008072:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008076:	1c7b      	adds	r3, r7, #1
 8008078:	444b      	add	r3, r9
 800807a:	106d      	asrs	r5, r5, #1
 800807c:	429d      	cmp	r5, r3
 800807e:	bf38      	it	cc
 8008080:	461d      	movcc	r5, r3
 8008082:	0553      	lsls	r3, r2, #21
 8008084:	d527      	bpl.n	80080d6 <__ssputs_r+0x8e>
 8008086:	4629      	mov	r1, r5
 8008088:	f7ff ff52 	bl	8007f30 <_malloc_r>
 800808c:	4606      	mov	r6, r0
 800808e:	b360      	cbz	r0, 80080ea <__ssputs_r+0xa2>
 8008090:	6921      	ldr	r1, [r4, #16]
 8008092:	464a      	mov	r2, r9
 8008094:	f7ff fed1 	bl	8007e3a <memcpy>
 8008098:	89a3      	ldrh	r3, [r4, #12]
 800809a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800809e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080a2:	81a3      	strh	r3, [r4, #12]
 80080a4:	6126      	str	r6, [r4, #16]
 80080a6:	6165      	str	r5, [r4, #20]
 80080a8:	444e      	add	r6, r9
 80080aa:	eba5 0509 	sub.w	r5, r5, r9
 80080ae:	6026      	str	r6, [r4, #0]
 80080b0:	60a5      	str	r5, [r4, #8]
 80080b2:	463e      	mov	r6, r7
 80080b4:	42be      	cmp	r6, r7
 80080b6:	d900      	bls.n	80080ba <__ssputs_r+0x72>
 80080b8:	463e      	mov	r6, r7
 80080ba:	6820      	ldr	r0, [r4, #0]
 80080bc:	4632      	mov	r2, r6
 80080be:	4641      	mov	r1, r8
 80080c0:	f000 fcf8 	bl	8008ab4 <memmove>
 80080c4:	68a3      	ldr	r3, [r4, #8]
 80080c6:	1b9b      	subs	r3, r3, r6
 80080c8:	60a3      	str	r3, [r4, #8]
 80080ca:	6823      	ldr	r3, [r4, #0]
 80080cc:	4433      	add	r3, r6
 80080ce:	6023      	str	r3, [r4, #0]
 80080d0:	2000      	movs	r0, #0
 80080d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080d6:	462a      	mov	r2, r5
 80080d8:	f000 fd38 	bl	8008b4c <_realloc_r>
 80080dc:	4606      	mov	r6, r0
 80080de:	2800      	cmp	r0, #0
 80080e0:	d1e0      	bne.n	80080a4 <__ssputs_r+0x5c>
 80080e2:	6921      	ldr	r1, [r4, #16]
 80080e4:	4650      	mov	r0, sl
 80080e6:	f7ff feb7 	bl	8007e58 <_free_r>
 80080ea:	230c      	movs	r3, #12
 80080ec:	f8ca 3000 	str.w	r3, [sl]
 80080f0:	89a3      	ldrh	r3, [r4, #12]
 80080f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080f6:	81a3      	strh	r3, [r4, #12]
 80080f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80080fc:	e7e9      	b.n	80080d2 <__ssputs_r+0x8a>
	...

08008100 <_svfiprintf_r>:
 8008100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008104:	4698      	mov	r8, r3
 8008106:	898b      	ldrh	r3, [r1, #12]
 8008108:	061b      	lsls	r3, r3, #24
 800810a:	b09d      	sub	sp, #116	@ 0x74
 800810c:	4607      	mov	r7, r0
 800810e:	460d      	mov	r5, r1
 8008110:	4614      	mov	r4, r2
 8008112:	d510      	bpl.n	8008136 <_svfiprintf_r+0x36>
 8008114:	690b      	ldr	r3, [r1, #16]
 8008116:	b973      	cbnz	r3, 8008136 <_svfiprintf_r+0x36>
 8008118:	2140      	movs	r1, #64	@ 0x40
 800811a:	f7ff ff09 	bl	8007f30 <_malloc_r>
 800811e:	6028      	str	r0, [r5, #0]
 8008120:	6128      	str	r0, [r5, #16]
 8008122:	b930      	cbnz	r0, 8008132 <_svfiprintf_r+0x32>
 8008124:	230c      	movs	r3, #12
 8008126:	603b      	str	r3, [r7, #0]
 8008128:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800812c:	b01d      	add	sp, #116	@ 0x74
 800812e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008132:	2340      	movs	r3, #64	@ 0x40
 8008134:	616b      	str	r3, [r5, #20]
 8008136:	2300      	movs	r3, #0
 8008138:	9309      	str	r3, [sp, #36]	@ 0x24
 800813a:	2320      	movs	r3, #32
 800813c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008140:	f8cd 800c 	str.w	r8, [sp, #12]
 8008144:	2330      	movs	r3, #48	@ 0x30
 8008146:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80082e4 <_svfiprintf_r+0x1e4>
 800814a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800814e:	f04f 0901 	mov.w	r9, #1
 8008152:	4623      	mov	r3, r4
 8008154:	469a      	mov	sl, r3
 8008156:	f813 2b01 	ldrb.w	r2, [r3], #1
 800815a:	b10a      	cbz	r2, 8008160 <_svfiprintf_r+0x60>
 800815c:	2a25      	cmp	r2, #37	@ 0x25
 800815e:	d1f9      	bne.n	8008154 <_svfiprintf_r+0x54>
 8008160:	ebba 0b04 	subs.w	fp, sl, r4
 8008164:	d00b      	beq.n	800817e <_svfiprintf_r+0x7e>
 8008166:	465b      	mov	r3, fp
 8008168:	4622      	mov	r2, r4
 800816a:	4629      	mov	r1, r5
 800816c:	4638      	mov	r0, r7
 800816e:	f7ff ff6b 	bl	8008048 <__ssputs_r>
 8008172:	3001      	adds	r0, #1
 8008174:	f000 80a7 	beq.w	80082c6 <_svfiprintf_r+0x1c6>
 8008178:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800817a:	445a      	add	r2, fp
 800817c:	9209      	str	r2, [sp, #36]	@ 0x24
 800817e:	f89a 3000 	ldrb.w	r3, [sl]
 8008182:	2b00      	cmp	r3, #0
 8008184:	f000 809f 	beq.w	80082c6 <_svfiprintf_r+0x1c6>
 8008188:	2300      	movs	r3, #0
 800818a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800818e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008192:	f10a 0a01 	add.w	sl, sl, #1
 8008196:	9304      	str	r3, [sp, #16]
 8008198:	9307      	str	r3, [sp, #28]
 800819a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800819e:	931a      	str	r3, [sp, #104]	@ 0x68
 80081a0:	4654      	mov	r4, sl
 80081a2:	2205      	movs	r2, #5
 80081a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081a8:	484e      	ldr	r0, [pc, #312]	@ (80082e4 <_svfiprintf_r+0x1e4>)
 80081aa:	f7f8 f811 	bl	80001d0 <memchr>
 80081ae:	9a04      	ldr	r2, [sp, #16]
 80081b0:	b9d8      	cbnz	r0, 80081ea <_svfiprintf_r+0xea>
 80081b2:	06d0      	lsls	r0, r2, #27
 80081b4:	bf44      	itt	mi
 80081b6:	2320      	movmi	r3, #32
 80081b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081bc:	0711      	lsls	r1, r2, #28
 80081be:	bf44      	itt	mi
 80081c0:	232b      	movmi	r3, #43	@ 0x2b
 80081c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081c6:	f89a 3000 	ldrb.w	r3, [sl]
 80081ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80081cc:	d015      	beq.n	80081fa <_svfiprintf_r+0xfa>
 80081ce:	9a07      	ldr	r2, [sp, #28]
 80081d0:	4654      	mov	r4, sl
 80081d2:	2000      	movs	r0, #0
 80081d4:	f04f 0c0a 	mov.w	ip, #10
 80081d8:	4621      	mov	r1, r4
 80081da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081de:	3b30      	subs	r3, #48	@ 0x30
 80081e0:	2b09      	cmp	r3, #9
 80081e2:	d94b      	bls.n	800827c <_svfiprintf_r+0x17c>
 80081e4:	b1b0      	cbz	r0, 8008214 <_svfiprintf_r+0x114>
 80081e6:	9207      	str	r2, [sp, #28]
 80081e8:	e014      	b.n	8008214 <_svfiprintf_r+0x114>
 80081ea:	eba0 0308 	sub.w	r3, r0, r8
 80081ee:	fa09 f303 	lsl.w	r3, r9, r3
 80081f2:	4313      	orrs	r3, r2
 80081f4:	9304      	str	r3, [sp, #16]
 80081f6:	46a2      	mov	sl, r4
 80081f8:	e7d2      	b.n	80081a0 <_svfiprintf_r+0xa0>
 80081fa:	9b03      	ldr	r3, [sp, #12]
 80081fc:	1d19      	adds	r1, r3, #4
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	9103      	str	r1, [sp, #12]
 8008202:	2b00      	cmp	r3, #0
 8008204:	bfbb      	ittet	lt
 8008206:	425b      	neglt	r3, r3
 8008208:	f042 0202 	orrlt.w	r2, r2, #2
 800820c:	9307      	strge	r3, [sp, #28]
 800820e:	9307      	strlt	r3, [sp, #28]
 8008210:	bfb8      	it	lt
 8008212:	9204      	strlt	r2, [sp, #16]
 8008214:	7823      	ldrb	r3, [r4, #0]
 8008216:	2b2e      	cmp	r3, #46	@ 0x2e
 8008218:	d10a      	bne.n	8008230 <_svfiprintf_r+0x130>
 800821a:	7863      	ldrb	r3, [r4, #1]
 800821c:	2b2a      	cmp	r3, #42	@ 0x2a
 800821e:	d132      	bne.n	8008286 <_svfiprintf_r+0x186>
 8008220:	9b03      	ldr	r3, [sp, #12]
 8008222:	1d1a      	adds	r2, r3, #4
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	9203      	str	r2, [sp, #12]
 8008228:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800822c:	3402      	adds	r4, #2
 800822e:	9305      	str	r3, [sp, #20]
 8008230:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80082f4 <_svfiprintf_r+0x1f4>
 8008234:	7821      	ldrb	r1, [r4, #0]
 8008236:	2203      	movs	r2, #3
 8008238:	4650      	mov	r0, sl
 800823a:	f7f7 ffc9 	bl	80001d0 <memchr>
 800823e:	b138      	cbz	r0, 8008250 <_svfiprintf_r+0x150>
 8008240:	9b04      	ldr	r3, [sp, #16]
 8008242:	eba0 000a 	sub.w	r0, r0, sl
 8008246:	2240      	movs	r2, #64	@ 0x40
 8008248:	4082      	lsls	r2, r0
 800824a:	4313      	orrs	r3, r2
 800824c:	3401      	adds	r4, #1
 800824e:	9304      	str	r3, [sp, #16]
 8008250:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008254:	4824      	ldr	r0, [pc, #144]	@ (80082e8 <_svfiprintf_r+0x1e8>)
 8008256:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800825a:	2206      	movs	r2, #6
 800825c:	f7f7 ffb8 	bl	80001d0 <memchr>
 8008260:	2800      	cmp	r0, #0
 8008262:	d036      	beq.n	80082d2 <_svfiprintf_r+0x1d2>
 8008264:	4b21      	ldr	r3, [pc, #132]	@ (80082ec <_svfiprintf_r+0x1ec>)
 8008266:	bb1b      	cbnz	r3, 80082b0 <_svfiprintf_r+0x1b0>
 8008268:	9b03      	ldr	r3, [sp, #12]
 800826a:	3307      	adds	r3, #7
 800826c:	f023 0307 	bic.w	r3, r3, #7
 8008270:	3308      	adds	r3, #8
 8008272:	9303      	str	r3, [sp, #12]
 8008274:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008276:	4433      	add	r3, r6
 8008278:	9309      	str	r3, [sp, #36]	@ 0x24
 800827a:	e76a      	b.n	8008152 <_svfiprintf_r+0x52>
 800827c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008280:	460c      	mov	r4, r1
 8008282:	2001      	movs	r0, #1
 8008284:	e7a8      	b.n	80081d8 <_svfiprintf_r+0xd8>
 8008286:	2300      	movs	r3, #0
 8008288:	3401      	adds	r4, #1
 800828a:	9305      	str	r3, [sp, #20]
 800828c:	4619      	mov	r1, r3
 800828e:	f04f 0c0a 	mov.w	ip, #10
 8008292:	4620      	mov	r0, r4
 8008294:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008298:	3a30      	subs	r2, #48	@ 0x30
 800829a:	2a09      	cmp	r2, #9
 800829c:	d903      	bls.n	80082a6 <_svfiprintf_r+0x1a6>
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d0c6      	beq.n	8008230 <_svfiprintf_r+0x130>
 80082a2:	9105      	str	r1, [sp, #20]
 80082a4:	e7c4      	b.n	8008230 <_svfiprintf_r+0x130>
 80082a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80082aa:	4604      	mov	r4, r0
 80082ac:	2301      	movs	r3, #1
 80082ae:	e7f0      	b.n	8008292 <_svfiprintf_r+0x192>
 80082b0:	ab03      	add	r3, sp, #12
 80082b2:	9300      	str	r3, [sp, #0]
 80082b4:	462a      	mov	r2, r5
 80082b6:	4b0e      	ldr	r3, [pc, #56]	@ (80082f0 <_svfiprintf_r+0x1f0>)
 80082b8:	a904      	add	r1, sp, #16
 80082ba:	4638      	mov	r0, r7
 80082bc:	f3af 8000 	nop.w
 80082c0:	1c42      	adds	r2, r0, #1
 80082c2:	4606      	mov	r6, r0
 80082c4:	d1d6      	bne.n	8008274 <_svfiprintf_r+0x174>
 80082c6:	89ab      	ldrh	r3, [r5, #12]
 80082c8:	065b      	lsls	r3, r3, #25
 80082ca:	f53f af2d 	bmi.w	8008128 <_svfiprintf_r+0x28>
 80082ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80082d0:	e72c      	b.n	800812c <_svfiprintf_r+0x2c>
 80082d2:	ab03      	add	r3, sp, #12
 80082d4:	9300      	str	r3, [sp, #0]
 80082d6:	462a      	mov	r2, r5
 80082d8:	4b05      	ldr	r3, [pc, #20]	@ (80082f0 <_svfiprintf_r+0x1f0>)
 80082da:	a904      	add	r1, sp, #16
 80082dc:	4638      	mov	r0, r7
 80082de:	f000 f9bb 	bl	8008658 <_printf_i>
 80082e2:	e7ed      	b.n	80082c0 <_svfiprintf_r+0x1c0>
 80082e4:	08008fad 	.word	0x08008fad
 80082e8:	08008fb7 	.word	0x08008fb7
 80082ec:	00000000 	.word	0x00000000
 80082f0:	08008049 	.word	0x08008049
 80082f4:	08008fb3 	.word	0x08008fb3

080082f8 <__sfputc_r>:
 80082f8:	6893      	ldr	r3, [r2, #8]
 80082fa:	3b01      	subs	r3, #1
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	b410      	push	{r4}
 8008300:	6093      	str	r3, [r2, #8]
 8008302:	da08      	bge.n	8008316 <__sfputc_r+0x1e>
 8008304:	6994      	ldr	r4, [r2, #24]
 8008306:	42a3      	cmp	r3, r4
 8008308:	db01      	blt.n	800830e <__sfputc_r+0x16>
 800830a:	290a      	cmp	r1, #10
 800830c:	d103      	bne.n	8008316 <__sfputc_r+0x1e>
 800830e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008312:	f7ff bc82 	b.w	8007c1a <__swbuf_r>
 8008316:	6813      	ldr	r3, [r2, #0]
 8008318:	1c58      	adds	r0, r3, #1
 800831a:	6010      	str	r0, [r2, #0]
 800831c:	7019      	strb	r1, [r3, #0]
 800831e:	4608      	mov	r0, r1
 8008320:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008324:	4770      	bx	lr

08008326 <__sfputs_r>:
 8008326:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008328:	4606      	mov	r6, r0
 800832a:	460f      	mov	r7, r1
 800832c:	4614      	mov	r4, r2
 800832e:	18d5      	adds	r5, r2, r3
 8008330:	42ac      	cmp	r4, r5
 8008332:	d101      	bne.n	8008338 <__sfputs_r+0x12>
 8008334:	2000      	movs	r0, #0
 8008336:	e007      	b.n	8008348 <__sfputs_r+0x22>
 8008338:	f814 1b01 	ldrb.w	r1, [r4], #1
 800833c:	463a      	mov	r2, r7
 800833e:	4630      	mov	r0, r6
 8008340:	f7ff ffda 	bl	80082f8 <__sfputc_r>
 8008344:	1c43      	adds	r3, r0, #1
 8008346:	d1f3      	bne.n	8008330 <__sfputs_r+0xa>
 8008348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800834c <_vfiprintf_r>:
 800834c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008350:	460d      	mov	r5, r1
 8008352:	b09d      	sub	sp, #116	@ 0x74
 8008354:	4614      	mov	r4, r2
 8008356:	4698      	mov	r8, r3
 8008358:	4606      	mov	r6, r0
 800835a:	b118      	cbz	r0, 8008364 <_vfiprintf_r+0x18>
 800835c:	6a03      	ldr	r3, [r0, #32]
 800835e:	b90b      	cbnz	r3, 8008364 <_vfiprintf_r+0x18>
 8008360:	f7ff fb3e 	bl	80079e0 <__sinit>
 8008364:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008366:	07d9      	lsls	r1, r3, #31
 8008368:	d405      	bmi.n	8008376 <_vfiprintf_r+0x2a>
 800836a:	89ab      	ldrh	r3, [r5, #12]
 800836c:	059a      	lsls	r2, r3, #22
 800836e:	d402      	bmi.n	8008376 <_vfiprintf_r+0x2a>
 8008370:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008372:	f7ff fd60 	bl	8007e36 <__retarget_lock_acquire_recursive>
 8008376:	89ab      	ldrh	r3, [r5, #12]
 8008378:	071b      	lsls	r3, r3, #28
 800837a:	d501      	bpl.n	8008380 <_vfiprintf_r+0x34>
 800837c:	692b      	ldr	r3, [r5, #16]
 800837e:	b99b      	cbnz	r3, 80083a8 <_vfiprintf_r+0x5c>
 8008380:	4629      	mov	r1, r5
 8008382:	4630      	mov	r0, r6
 8008384:	f7ff fc88 	bl	8007c98 <__swsetup_r>
 8008388:	b170      	cbz	r0, 80083a8 <_vfiprintf_r+0x5c>
 800838a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800838c:	07dc      	lsls	r4, r3, #31
 800838e:	d504      	bpl.n	800839a <_vfiprintf_r+0x4e>
 8008390:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008394:	b01d      	add	sp, #116	@ 0x74
 8008396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800839a:	89ab      	ldrh	r3, [r5, #12]
 800839c:	0598      	lsls	r0, r3, #22
 800839e:	d4f7      	bmi.n	8008390 <_vfiprintf_r+0x44>
 80083a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083a2:	f7ff fd49 	bl	8007e38 <__retarget_lock_release_recursive>
 80083a6:	e7f3      	b.n	8008390 <_vfiprintf_r+0x44>
 80083a8:	2300      	movs	r3, #0
 80083aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80083ac:	2320      	movs	r3, #32
 80083ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80083b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80083b6:	2330      	movs	r3, #48	@ 0x30
 80083b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008568 <_vfiprintf_r+0x21c>
 80083bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80083c0:	f04f 0901 	mov.w	r9, #1
 80083c4:	4623      	mov	r3, r4
 80083c6:	469a      	mov	sl, r3
 80083c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083cc:	b10a      	cbz	r2, 80083d2 <_vfiprintf_r+0x86>
 80083ce:	2a25      	cmp	r2, #37	@ 0x25
 80083d0:	d1f9      	bne.n	80083c6 <_vfiprintf_r+0x7a>
 80083d2:	ebba 0b04 	subs.w	fp, sl, r4
 80083d6:	d00b      	beq.n	80083f0 <_vfiprintf_r+0xa4>
 80083d8:	465b      	mov	r3, fp
 80083da:	4622      	mov	r2, r4
 80083dc:	4629      	mov	r1, r5
 80083de:	4630      	mov	r0, r6
 80083e0:	f7ff ffa1 	bl	8008326 <__sfputs_r>
 80083e4:	3001      	adds	r0, #1
 80083e6:	f000 80a7 	beq.w	8008538 <_vfiprintf_r+0x1ec>
 80083ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083ec:	445a      	add	r2, fp
 80083ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80083f0:	f89a 3000 	ldrb.w	r3, [sl]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	f000 809f 	beq.w	8008538 <_vfiprintf_r+0x1ec>
 80083fa:	2300      	movs	r3, #0
 80083fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008400:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008404:	f10a 0a01 	add.w	sl, sl, #1
 8008408:	9304      	str	r3, [sp, #16]
 800840a:	9307      	str	r3, [sp, #28]
 800840c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008410:	931a      	str	r3, [sp, #104]	@ 0x68
 8008412:	4654      	mov	r4, sl
 8008414:	2205      	movs	r2, #5
 8008416:	f814 1b01 	ldrb.w	r1, [r4], #1
 800841a:	4853      	ldr	r0, [pc, #332]	@ (8008568 <_vfiprintf_r+0x21c>)
 800841c:	f7f7 fed8 	bl	80001d0 <memchr>
 8008420:	9a04      	ldr	r2, [sp, #16]
 8008422:	b9d8      	cbnz	r0, 800845c <_vfiprintf_r+0x110>
 8008424:	06d1      	lsls	r1, r2, #27
 8008426:	bf44      	itt	mi
 8008428:	2320      	movmi	r3, #32
 800842a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800842e:	0713      	lsls	r3, r2, #28
 8008430:	bf44      	itt	mi
 8008432:	232b      	movmi	r3, #43	@ 0x2b
 8008434:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008438:	f89a 3000 	ldrb.w	r3, [sl]
 800843c:	2b2a      	cmp	r3, #42	@ 0x2a
 800843e:	d015      	beq.n	800846c <_vfiprintf_r+0x120>
 8008440:	9a07      	ldr	r2, [sp, #28]
 8008442:	4654      	mov	r4, sl
 8008444:	2000      	movs	r0, #0
 8008446:	f04f 0c0a 	mov.w	ip, #10
 800844a:	4621      	mov	r1, r4
 800844c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008450:	3b30      	subs	r3, #48	@ 0x30
 8008452:	2b09      	cmp	r3, #9
 8008454:	d94b      	bls.n	80084ee <_vfiprintf_r+0x1a2>
 8008456:	b1b0      	cbz	r0, 8008486 <_vfiprintf_r+0x13a>
 8008458:	9207      	str	r2, [sp, #28]
 800845a:	e014      	b.n	8008486 <_vfiprintf_r+0x13a>
 800845c:	eba0 0308 	sub.w	r3, r0, r8
 8008460:	fa09 f303 	lsl.w	r3, r9, r3
 8008464:	4313      	orrs	r3, r2
 8008466:	9304      	str	r3, [sp, #16]
 8008468:	46a2      	mov	sl, r4
 800846a:	e7d2      	b.n	8008412 <_vfiprintf_r+0xc6>
 800846c:	9b03      	ldr	r3, [sp, #12]
 800846e:	1d19      	adds	r1, r3, #4
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	9103      	str	r1, [sp, #12]
 8008474:	2b00      	cmp	r3, #0
 8008476:	bfbb      	ittet	lt
 8008478:	425b      	neglt	r3, r3
 800847a:	f042 0202 	orrlt.w	r2, r2, #2
 800847e:	9307      	strge	r3, [sp, #28]
 8008480:	9307      	strlt	r3, [sp, #28]
 8008482:	bfb8      	it	lt
 8008484:	9204      	strlt	r2, [sp, #16]
 8008486:	7823      	ldrb	r3, [r4, #0]
 8008488:	2b2e      	cmp	r3, #46	@ 0x2e
 800848a:	d10a      	bne.n	80084a2 <_vfiprintf_r+0x156>
 800848c:	7863      	ldrb	r3, [r4, #1]
 800848e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008490:	d132      	bne.n	80084f8 <_vfiprintf_r+0x1ac>
 8008492:	9b03      	ldr	r3, [sp, #12]
 8008494:	1d1a      	adds	r2, r3, #4
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	9203      	str	r2, [sp, #12]
 800849a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800849e:	3402      	adds	r4, #2
 80084a0:	9305      	str	r3, [sp, #20]
 80084a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008578 <_vfiprintf_r+0x22c>
 80084a6:	7821      	ldrb	r1, [r4, #0]
 80084a8:	2203      	movs	r2, #3
 80084aa:	4650      	mov	r0, sl
 80084ac:	f7f7 fe90 	bl	80001d0 <memchr>
 80084b0:	b138      	cbz	r0, 80084c2 <_vfiprintf_r+0x176>
 80084b2:	9b04      	ldr	r3, [sp, #16]
 80084b4:	eba0 000a 	sub.w	r0, r0, sl
 80084b8:	2240      	movs	r2, #64	@ 0x40
 80084ba:	4082      	lsls	r2, r0
 80084bc:	4313      	orrs	r3, r2
 80084be:	3401      	adds	r4, #1
 80084c0:	9304      	str	r3, [sp, #16]
 80084c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084c6:	4829      	ldr	r0, [pc, #164]	@ (800856c <_vfiprintf_r+0x220>)
 80084c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80084cc:	2206      	movs	r2, #6
 80084ce:	f7f7 fe7f 	bl	80001d0 <memchr>
 80084d2:	2800      	cmp	r0, #0
 80084d4:	d03f      	beq.n	8008556 <_vfiprintf_r+0x20a>
 80084d6:	4b26      	ldr	r3, [pc, #152]	@ (8008570 <_vfiprintf_r+0x224>)
 80084d8:	bb1b      	cbnz	r3, 8008522 <_vfiprintf_r+0x1d6>
 80084da:	9b03      	ldr	r3, [sp, #12]
 80084dc:	3307      	adds	r3, #7
 80084de:	f023 0307 	bic.w	r3, r3, #7
 80084e2:	3308      	adds	r3, #8
 80084e4:	9303      	str	r3, [sp, #12]
 80084e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084e8:	443b      	add	r3, r7
 80084ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80084ec:	e76a      	b.n	80083c4 <_vfiprintf_r+0x78>
 80084ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80084f2:	460c      	mov	r4, r1
 80084f4:	2001      	movs	r0, #1
 80084f6:	e7a8      	b.n	800844a <_vfiprintf_r+0xfe>
 80084f8:	2300      	movs	r3, #0
 80084fa:	3401      	adds	r4, #1
 80084fc:	9305      	str	r3, [sp, #20]
 80084fe:	4619      	mov	r1, r3
 8008500:	f04f 0c0a 	mov.w	ip, #10
 8008504:	4620      	mov	r0, r4
 8008506:	f810 2b01 	ldrb.w	r2, [r0], #1
 800850a:	3a30      	subs	r2, #48	@ 0x30
 800850c:	2a09      	cmp	r2, #9
 800850e:	d903      	bls.n	8008518 <_vfiprintf_r+0x1cc>
 8008510:	2b00      	cmp	r3, #0
 8008512:	d0c6      	beq.n	80084a2 <_vfiprintf_r+0x156>
 8008514:	9105      	str	r1, [sp, #20]
 8008516:	e7c4      	b.n	80084a2 <_vfiprintf_r+0x156>
 8008518:	fb0c 2101 	mla	r1, ip, r1, r2
 800851c:	4604      	mov	r4, r0
 800851e:	2301      	movs	r3, #1
 8008520:	e7f0      	b.n	8008504 <_vfiprintf_r+0x1b8>
 8008522:	ab03      	add	r3, sp, #12
 8008524:	9300      	str	r3, [sp, #0]
 8008526:	462a      	mov	r2, r5
 8008528:	4b12      	ldr	r3, [pc, #72]	@ (8008574 <_vfiprintf_r+0x228>)
 800852a:	a904      	add	r1, sp, #16
 800852c:	4630      	mov	r0, r6
 800852e:	f3af 8000 	nop.w
 8008532:	4607      	mov	r7, r0
 8008534:	1c78      	adds	r0, r7, #1
 8008536:	d1d6      	bne.n	80084e6 <_vfiprintf_r+0x19a>
 8008538:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800853a:	07d9      	lsls	r1, r3, #31
 800853c:	d405      	bmi.n	800854a <_vfiprintf_r+0x1fe>
 800853e:	89ab      	ldrh	r3, [r5, #12]
 8008540:	059a      	lsls	r2, r3, #22
 8008542:	d402      	bmi.n	800854a <_vfiprintf_r+0x1fe>
 8008544:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008546:	f7ff fc77 	bl	8007e38 <__retarget_lock_release_recursive>
 800854a:	89ab      	ldrh	r3, [r5, #12]
 800854c:	065b      	lsls	r3, r3, #25
 800854e:	f53f af1f 	bmi.w	8008390 <_vfiprintf_r+0x44>
 8008552:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008554:	e71e      	b.n	8008394 <_vfiprintf_r+0x48>
 8008556:	ab03      	add	r3, sp, #12
 8008558:	9300      	str	r3, [sp, #0]
 800855a:	462a      	mov	r2, r5
 800855c:	4b05      	ldr	r3, [pc, #20]	@ (8008574 <_vfiprintf_r+0x228>)
 800855e:	a904      	add	r1, sp, #16
 8008560:	4630      	mov	r0, r6
 8008562:	f000 f879 	bl	8008658 <_printf_i>
 8008566:	e7e4      	b.n	8008532 <_vfiprintf_r+0x1e6>
 8008568:	08008fad 	.word	0x08008fad
 800856c:	08008fb7 	.word	0x08008fb7
 8008570:	00000000 	.word	0x00000000
 8008574:	08008327 	.word	0x08008327
 8008578:	08008fb3 	.word	0x08008fb3

0800857c <_printf_common>:
 800857c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008580:	4616      	mov	r6, r2
 8008582:	4698      	mov	r8, r3
 8008584:	688a      	ldr	r2, [r1, #8]
 8008586:	690b      	ldr	r3, [r1, #16]
 8008588:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800858c:	4293      	cmp	r3, r2
 800858e:	bfb8      	it	lt
 8008590:	4613      	movlt	r3, r2
 8008592:	6033      	str	r3, [r6, #0]
 8008594:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008598:	4607      	mov	r7, r0
 800859a:	460c      	mov	r4, r1
 800859c:	b10a      	cbz	r2, 80085a2 <_printf_common+0x26>
 800859e:	3301      	adds	r3, #1
 80085a0:	6033      	str	r3, [r6, #0]
 80085a2:	6823      	ldr	r3, [r4, #0]
 80085a4:	0699      	lsls	r1, r3, #26
 80085a6:	bf42      	ittt	mi
 80085a8:	6833      	ldrmi	r3, [r6, #0]
 80085aa:	3302      	addmi	r3, #2
 80085ac:	6033      	strmi	r3, [r6, #0]
 80085ae:	6825      	ldr	r5, [r4, #0]
 80085b0:	f015 0506 	ands.w	r5, r5, #6
 80085b4:	d106      	bne.n	80085c4 <_printf_common+0x48>
 80085b6:	f104 0a19 	add.w	sl, r4, #25
 80085ba:	68e3      	ldr	r3, [r4, #12]
 80085bc:	6832      	ldr	r2, [r6, #0]
 80085be:	1a9b      	subs	r3, r3, r2
 80085c0:	42ab      	cmp	r3, r5
 80085c2:	dc26      	bgt.n	8008612 <_printf_common+0x96>
 80085c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80085c8:	6822      	ldr	r2, [r4, #0]
 80085ca:	3b00      	subs	r3, #0
 80085cc:	bf18      	it	ne
 80085ce:	2301      	movne	r3, #1
 80085d0:	0692      	lsls	r2, r2, #26
 80085d2:	d42b      	bmi.n	800862c <_printf_common+0xb0>
 80085d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80085d8:	4641      	mov	r1, r8
 80085da:	4638      	mov	r0, r7
 80085dc:	47c8      	blx	r9
 80085de:	3001      	adds	r0, #1
 80085e0:	d01e      	beq.n	8008620 <_printf_common+0xa4>
 80085e2:	6823      	ldr	r3, [r4, #0]
 80085e4:	6922      	ldr	r2, [r4, #16]
 80085e6:	f003 0306 	and.w	r3, r3, #6
 80085ea:	2b04      	cmp	r3, #4
 80085ec:	bf02      	ittt	eq
 80085ee:	68e5      	ldreq	r5, [r4, #12]
 80085f0:	6833      	ldreq	r3, [r6, #0]
 80085f2:	1aed      	subeq	r5, r5, r3
 80085f4:	68a3      	ldr	r3, [r4, #8]
 80085f6:	bf0c      	ite	eq
 80085f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085fc:	2500      	movne	r5, #0
 80085fe:	4293      	cmp	r3, r2
 8008600:	bfc4      	itt	gt
 8008602:	1a9b      	subgt	r3, r3, r2
 8008604:	18ed      	addgt	r5, r5, r3
 8008606:	2600      	movs	r6, #0
 8008608:	341a      	adds	r4, #26
 800860a:	42b5      	cmp	r5, r6
 800860c:	d11a      	bne.n	8008644 <_printf_common+0xc8>
 800860e:	2000      	movs	r0, #0
 8008610:	e008      	b.n	8008624 <_printf_common+0xa8>
 8008612:	2301      	movs	r3, #1
 8008614:	4652      	mov	r2, sl
 8008616:	4641      	mov	r1, r8
 8008618:	4638      	mov	r0, r7
 800861a:	47c8      	blx	r9
 800861c:	3001      	adds	r0, #1
 800861e:	d103      	bne.n	8008628 <_printf_common+0xac>
 8008620:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008628:	3501      	adds	r5, #1
 800862a:	e7c6      	b.n	80085ba <_printf_common+0x3e>
 800862c:	18e1      	adds	r1, r4, r3
 800862e:	1c5a      	adds	r2, r3, #1
 8008630:	2030      	movs	r0, #48	@ 0x30
 8008632:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008636:	4422      	add	r2, r4
 8008638:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800863c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008640:	3302      	adds	r3, #2
 8008642:	e7c7      	b.n	80085d4 <_printf_common+0x58>
 8008644:	2301      	movs	r3, #1
 8008646:	4622      	mov	r2, r4
 8008648:	4641      	mov	r1, r8
 800864a:	4638      	mov	r0, r7
 800864c:	47c8      	blx	r9
 800864e:	3001      	adds	r0, #1
 8008650:	d0e6      	beq.n	8008620 <_printf_common+0xa4>
 8008652:	3601      	adds	r6, #1
 8008654:	e7d9      	b.n	800860a <_printf_common+0x8e>
	...

08008658 <_printf_i>:
 8008658:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800865c:	7e0f      	ldrb	r7, [r1, #24]
 800865e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008660:	2f78      	cmp	r7, #120	@ 0x78
 8008662:	4691      	mov	r9, r2
 8008664:	4680      	mov	r8, r0
 8008666:	460c      	mov	r4, r1
 8008668:	469a      	mov	sl, r3
 800866a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800866e:	d807      	bhi.n	8008680 <_printf_i+0x28>
 8008670:	2f62      	cmp	r7, #98	@ 0x62
 8008672:	d80a      	bhi.n	800868a <_printf_i+0x32>
 8008674:	2f00      	cmp	r7, #0
 8008676:	f000 80d2 	beq.w	800881e <_printf_i+0x1c6>
 800867a:	2f58      	cmp	r7, #88	@ 0x58
 800867c:	f000 80b9 	beq.w	80087f2 <_printf_i+0x19a>
 8008680:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008684:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008688:	e03a      	b.n	8008700 <_printf_i+0xa8>
 800868a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800868e:	2b15      	cmp	r3, #21
 8008690:	d8f6      	bhi.n	8008680 <_printf_i+0x28>
 8008692:	a101      	add	r1, pc, #4	@ (adr r1, 8008698 <_printf_i+0x40>)
 8008694:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008698:	080086f1 	.word	0x080086f1
 800869c:	08008705 	.word	0x08008705
 80086a0:	08008681 	.word	0x08008681
 80086a4:	08008681 	.word	0x08008681
 80086a8:	08008681 	.word	0x08008681
 80086ac:	08008681 	.word	0x08008681
 80086b0:	08008705 	.word	0x08008705
 80086b4:	08008681 	.word	0x08008681
 80086b8:	08008681 	.word	0x08008681
 80086bc:	08008681 	.word	0x08008681
 80086c0:	08008681 	.word	0x08008681
 80086c4:	08008805 	.word	0x08008805
 80086c8:	0800872f 	.word	0x0800872f
 80086cc:	080087bf 	.word	0x080087bf
 80086d0:	08008681 	.word	0x08008681
 80086d4:	08008681 	.word	0x08008681
 80086d8:	08008827 	.word	0x08008827
 80086dc:	08008681 	.word	0x08008681
 80086e0:	0800872f 	.word	0x0800872f
 80086e4:	08008681 	.word	0x08008681
 80086e8:	08008681 	.word	0x08008681
 80086ec:	080087c7 	.word	0x080087c7
 80086f0:	6833      	ldr	r3, [r6, #0]
 80086f2:	1d1a      	adds	r2, r3, #4
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	6032      	str	r2, [r6, #0]
 80086f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80086fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008700:	2301      	movs	r3, #1
 8008702:	e09d      	b.n	8008840 <_printf_i+0x1e8>
 8008704:	6833      	ldr	r3, [r6, #0]
 8008706:	6820      	ldr	r0, [r4, #0]
 8008708:	1d19      	adds	r1, r3, #4
 800870a:	6031      	str	r1, [r6, #0]
 800870c:	0606      	lsls	r6, r0, #24
 800870e:	d501      	bpl.n	8008714 <_printf_i+0xbc>
 8008710:	681d      	ldr	r5, [r3, #0]
 8008712:	e003      	b.n	800871c <_printf_i+0xc4>
 8008714:	0645      	lsls	r5, r0, #25
 8008716:	d5fb      	bpl.n	8008710 <_printf_i+0xb8>
 8008718:	f9b3 5000 	ldrsh.w	r5, [r3]
 800871c:	2d00      	cmp	r5, #0
 800871e:	da03      	bge.n	8008728 <_printf_i+0xd0>
 8008720:	232d      	movs	r3, #45	@ 0x2d
 8008722:	426d      	negs	r5, r5
 8008724:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008728:	4859      	ldr	r0, [pc, #356]	@ (8008890 <_printf_i+0x238>)
 800872a:	230a      	movs	r3, #10
 800872c:	e011      	b.n	8008752 <_printf_i+0xfa>
 800872e:	6821      	ldr	r1, [r4, #0]
 8008730:	6833      	ldr	r3, [r6, #0]
 8008732:	0608      	lsls	r0, r1, #24
 8008734:	f853 5b04 	ldr.w	r5, [r3], #4
 8008738:	d402      	bmi.n	8008740 <_printf_i+0xe8>
 800873a:	0649      	lsls	r1, r1, #25
 800873c:	bf48      	it	mi
 800873e:	b2ad      	uxthmi	r5, r5
 8008740:	2f6f      	cmp	r7, #111	@ 0x6f
 8008742:	4853      	ldr	r0, [pc, #332]	@ (8008890 <_printf_i+0x238>)
 8008744:	6033      	str	r3, [r6, #0]
 8008746:	bf14      	ite	ne
 8008748:	230a      	movne	r3, #10
 800874a:	2308      	moveq	r3, #8
 800874c:	2100      	movs	r1, #0
 800874e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008752:	6866      	ldr	r6, [r4, #4]
 8008754:	60a6      	str	r6, [r4, #8]
 8008756:	2e00      	cmp	r6, #0
 8008758:	bfa2      	ittt	ge
 800875a:	6821      	ldrge	r1, [r4, #0]
 800875c:	f021 0104 	bicge.w	r1, r1, #4
 8008760:	6021      	strge	r1, [r4, #0]
 8008762:	b90d      	cbnz	r5, 8008768 <_printf_i+0x110>
 8008764:	2e00      	cmp	r6, #0
 8008766:	d04b      	beq.n	8008800 <_printf_i+0x1a8>
 8008768:	4616      	mov	r6, r2
 800876a:	fbb5 f1f3 	udiv	r1, r5, r3
 800876e:	fb03 5711 	mls	r7, r3, r1, r5
 8008772:	5dc7      	ldrb	r7, [r0, r7]
 8008774:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008778:	462f      	mov	r7, r5
 800877a:	42bb      	cmp	r3, r7
 800877c:	460d      	mov	r5, r1
 800877e:	d9f4      	bls.n	800876a <_printf_i+0x112>
 8008780:	2b08      	cmp	r3, #8
 8008782:	d10b      	bne.n	800879c <_printf_i+0x144>
 8008784:	6823      	ldr	r3, [r4, #0]
 8008786:	07df      	lsls	r7, r3, #31
 8008788:	d508      	bpl.n	800879c <_printf_i+0x144>
 800878a:	6923      	ldr	r3, [r4, #16]
 800878c:	6861      	ldr	r1, [r4, #4]
 800878e:	4299      	cmp	r1, r3
 8008790:	bfde      	ittt	le
 8008792:	2330      	movle	r3, #48	@ 0x30
 8008794:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008798:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800879c:	1b92      	subs	r2, r2, r6
 800879e:	6122      	str	r2, [r4, #16]
 80087a0:	f8cd a000 	str.w	sl, [sp]
 80087a4:	464b      	mov	r3, r9
 80087a6:	aa03      	add	r2, sp, #12
 80087a8:	4621      	mov	r1, r4
 80087aa:	4640      	mov	r0, r8
 80087ac:	f7ff fee6 	bl	800857c <_printf_common>
 80087b0:	3001      	adds	r0, #1
 80087b2:	d14a      	bne.n	800884a <_printf_i+0x1f2>
 80087b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80087b8:	b004      	add	sp, #16
 80087ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087be:	6823      	ldr	r3, [r4, #0]
 80087c0:	f043 0320 	orr.w	r3, r3, #32
 80087c4:	6023      	str	r3, [r4, #0]
 80087c6:	4833      	ldr	r0, [pc, #204]	@ (8008894 <_printf_i+0x23c>)
 80087c8:	2778      	movs	r7, #120	@ 0x78
 80087ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80087ce:	6823      	ldr	r3, [r4, #0]
 80087d0:	6831      	ldr	r1, [r6, #0]
 80087d2:	061f      	lsls	r7, r3, #24
 80087d4:	f851 5b04 	ldr.w	r5, [r1], #4
 80087d8:	d402      	bmi.n	80087e0 <_printf_i+0x188>
 80087da:	065f      	lsls	r7, r3, #25
 80087dc:	bf48      	it	mi
 80087de:	b2ad      	uxthmi	r5, r5
 80087e0:	6031      	str	r1, [r6, #0]
 80087e2:	07d9      	lsls	r1, r3, #31
 80087e4:	bf44      	itt	mi
 80087e6:	f043 0320 	orrmi.w	r3, r3, #32
 80087ea:	6023      	strmi	r3, [r4, #0]
 80087ec:	b11d      	cbz	r5, 80087f6 <_printf_i+0x19e>
 80087ee:	2310      	movs	r3, #16
 80087f0:	e7ac      	b.n	800874c <_printf_i+0xf4>
 80087f2:	4827      	ldr	r0, [pc, #156]	@ (8008890 <_printf_i+0x238>)
 80087f4:	e7e9      	b.n	80087ca <_printf_i+0x172>
 80087f6:	6823      	ldr	r3, [r4, #0]
 80087f8:	f023 0320 	bic.w	r3, r3, #32
 80087fc:	6023      	str	r3, [r4, #0]
 80087fe:	e7f6      	b.n	80087ee <_printf_i+0x196>
 8008800:	4616      	mov	r6, r2
 8008802:	e7bd      	b.n	8008780 <_printf_i+0x128>
 8008804:	6833      	ldr	r3, [r6, #0]
 8008806:	6825      	ldr	r5, [r4, #0]
 8008808:	6961      	ldr	r1, [r4, #20]
 800880a:	1d18      	adds	r0, r3, #4
 800880c:	6030      	str	r0, [r6, #0]
 800880e:	062e      	lsls	r6, r5, #24
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	d501      	bpl.n	8008818 <_printf_i+0x1c0>
 8008814:	6019      	str	r1, [r3, #0]
 8008816:	e002      	b.n	800881e <_printf_i+0x1c6>
 8008818:	0668      	lsls	r0, r5, #25
 800881a:	d5fb      	bpl.n	8008814 <_printf_i+0x1bc>
 800881c:	8019      	strh	r1, [r3, #0]
 800881e:	2300      	movs	r3, #0
 8008820:	6123      	str	r3, [r4, #16]
 8008822:	4616      	mov	r6, r2
 8008824:	e7bc      	b.n	80087a0 <_printf_i+0x148>
 8008826:	6833      	ldr	r3, [r6, #0]
 8008828:	1d1a      	adds	r2, r3, #4
 800882a:	6032      	str	r2, [r6, #0]
 800882c:	681e      	ldr	r6, [r3, #0]
 800882e:	6862      	ldr	r2, [r4, #4]
 8008830:	2100      	movs	r1, #0
 8008832:	4630      	mov	r0, r6
 8008834:	f7f7 fccc 	bl	80001d0 <memchr>
 8008838:	b108      	cbz	r0, 800883e <_printf_i+0x1e6>
 800883a:	1b80      	subs	r0, r0, r6
 800883c:	6060      	str	r0, [r4, #4]
 800883e:	6863      	ldr	r3, [r4, #4]
 8008840:	6123      	str	r3, [r4, #16]
 8008842:	2300      	movs	r3, #0
 8008844:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008848:	e7aa      	b.n	80087a0 <_printf_i+0x148>
 800884a:	6923      	ldr	r3, [r4, #16]
 800884c:	4632      	mov	r2, r6
 800884e:	4649      	mov	r1, r9
 8008850:	4640      	mov	r0, r8
 8008852:	47d0      	blx	sl
 8008854:	3001      	adds	r0, #1
 8008856:	d0ad      	beq.n	80087b4 <_printf_i+0x15c>
 8008858:	6823      	ldr	r3, [r4, #0]
 800885a:	079b      	lsls	r3, r3, #30
 800885c:	d413      	bmi.n	8008886 <_printf_i+0x22e>
 800885e:	68e0      	ldr	r0, [r4, #12]
 8008860:	9b03      	ldr	r3, [sp, #12]
 8008862:	4298      	cmp	r0, r3
 8008864:	bfb8      	it	lt
 8008866:	4618      	movlt	r0, r3
 8008868:	e7a6      	b.n	80087b8 <_printf_i+0x160>
 800886a:	2301      	movs	r3, #1
 800886c:	4632      	mov	r2, r6
 800886e:	4649      	mov	r1, r9
 8008870:	4640      	mov	r0, r8
 8008872:	47d0      	blx	sl
 8008874:	3001      	adds	r0, #1
 8008876:	d09d      	beq.n	80087b4 <_printf_i+0x15c>
 8008878:	3501      	adds	r5, #1
 800887a:	68e3      	ldr	r3, [r4, #12]
 800887c:	9903      	ldr	r1, [sp, #12]
 800887e:	1a5b      	subs	r3, r3, r1
 8008880:	42ab      	cmp	r3, r5
 8008882:	dcf2      	bgt.n	800886a <_printf_i+0x212>
 8008884:	e7eb      	b.n	800885e <_printf_i+0x206>
 8008886:	2500      	movs	r5, #0
 8008888:	f104 0619 	add.w	r6, r4, #25
 800888c:	e7f5      	b.n	800887a <_printf_i+0x222>
 800888e:	bf00      	nop
 8008890:	08008fbe 	.word	0x08008fbe
 8008894:	08008fcf 	.word	0x08008fcf

08008898 <__sflush_r>:
 8008898:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800889c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088a0:	0716      	lsls	r6, r2, #28
 80088a2:	4605      	mov	r5, r0
 80088a4:	460c      	mov	r4, r1
 80088a6:	d454      	bmi.n	8008952 <__sflush_r+0xba>
 80088a8:	684b      	ldr	r3, [r1, #4]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	dc02      	bgt.n	80088b4 <__sflush_r+0x1c>
 80088ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	dd48      	ble.n	8008946 <__sflush_r+0xae>
 80088b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80088b6:	2e00      	cmp	r6, #0
 80088b8:	d045      	beq.n	8008946 <__sflush_r+0xae>
 80088ba:	2300      	movs	r3, #0
 80088bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80088c0:	682f      	ldr	r7, [r5, #0]
 80088c2:	6a21      	ldr	r1, [r4, #32]
 80088c4:	602b      	str	r3, [r5, #0]
 80088c6:	d030      	beq.n	800892a <__sflush_r+0x92>
 80088c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80088ca:	89a3      	ldrh	r3, [r4, #12]
 80088cc:	0759      	lsls	r1, r3, #29
 80088ce:	d505      	bpl.n	80088dc <__sflush_r+0x44>
 80088d0:	6863      	ldr	r3, [r4, #4]
 80088d2:	1ad2      	subs	r2, r2, r3
 80088d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80088d6:	b10b      	cbz	r3, 80088dc <__sflush_r+0x44>
 80088d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80088da:	1ad2      	subs	r2, r2, r3
 80088dc:	2300      	movs	r3, #0
 80088de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80088e0:	6a21      	ldr	r1, [r4, #32]
 80088e2:	4628      	mov	r0, r5
 80088e4:	47b0      	blx	r6
 80088e6:	1c43      	adds	r3, r0, #1
 80088e8:	89a3      	ldrh	r3, [r4, #12]
 80088ea:	d106      	bne.n	80088fa <__sflush_r+0x62>
 80088ec:	6829      	ldr	r1, [r5, #0]
 80088ee:	291d      	cmp	r1, #29
 80088f0:	d82b      	bhi.n	800894a <__sflush_r+0xb2>
 80088f2:	4a2a      	ldr	r2, [pc, #168]	@ (800899c <__sflush_r+0x104>)
 80088f4:	410a      	asrs	r2, r1
 80088f6:	07d6      	lsls	r6, r2, #31
 80088f8:	d427      	bmi.n	800894a <__sflush_r+0xb2>
 80088fa:	2200      	movs	r2, #0
 80088fc:	6062      	str	r2, [r4, #4]
 80088fe:	04d9      	lsls	r1, r3, #19
 8008900:	6922      	ldr	r2, [r4, #16]
 8008902:	6022      	str	r2, [r4, #0]
 8008904:	d504      	bpl.n	8008910 <__sflush_r+0x78>
 8008906:	1c42      	adds	r2, r0, #1
 8008908:	d101      	bne.n	800890e <__sflush_r+0x76>
 800890a:	682b      	ldr	r3, [r5, #0]
 800890c:	b903      	cbnz	r3, 8008910 <__sflush_r+0x78>
 800890e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008910:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008912:	602f      	str	r7, [r5, #0]
 8008914:	b1b9      	cbz	r1, 8008946 <__sflush_r+0xae>
 8008916:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800891a:	4299      	cmp	r1, r3
 800891c:	d002      	beq.n	8008924 <__sflush_r+0x8c>
 800891e:	4628      	mov	r0, r5
 8008920:	f7ff fa9a 	bl	8007e58 <_free_r>
 8008924:	2300      	movs	r3, #0
 8008926:	6363      	str	r3, [r4, #52]	@ 0x34
 8008928:	e00d      	b.n	8008946 <__sflush_r+0xae>
 800892a:	2301      	movs	r3, #1
 800892c:	4628      	mov	r0, r5
 800892e:	47b0      	blx	r6
 8008930:	4602      	mov	r2, r0
 8008932:	1c50      	adds	r0, r2, #1
 8008934:	d1c9      	bne.n	80088ca <__sflush_r+0x32>
 8008936:	682b      	ldr	r3, [r5, #0]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d0c6      	beq.n	80088ca <__sflush_r+0x32>
 800893c:	2b1d      	cmp	r3, #29
 800893e:	d001      	beq.n	8008944 <__sflush_r+0xac>
 8008940:	2b16      	cmp	r3, #22
 8008942:	d11e      	bne.n	8008982 <__sflush_r+0xea>
 8008944:	602f      	str	r7, [r5, #0]
 8008946:	2000      	movs	r0, #0
 8008948:	e022      	b.n	8008990 <__sflush_r+0xf8>
 800894a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800894e:	b21b      	sxth	r3, r3
 8008950:	e01b      	b.n	800898a <__sflush_r+0xf2>
 8008952:	690f      	ldr	r7, [r1, #16]
 8008954:	2f00      	cmp	r7, #0
 8008956:	d0f6      	beq.n	8008946 <__sflush_r+0xae>
 8008958:	0793      	lsls	r3, r2, #30
 800895a:	680e      	ldr	r6, [r1, #0]
 800895c:	bf08      	it	eq
 800895e:	694b      	ldreq	r3, [r1, #20]
 8008960:	600f      	str	r7, [r1, #0]
 8008962:	bf18      	it	ne
 8008964:	2300      	movne	r3, #0
 8008966:	eba6 0807 	sub.w	r8, r6, r7
 800896a:	608b      	str	r3, [r1, #8]
 800896c:	f1b8 0f00 	cmp.w	r8, #0
 8008970:	dde9      	ble.n	8008946 <__sflush_r+0xae>
 8008972:	6a21      	ldr	r1, [r4, #32]
 8008974:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008976:	4643      	mov	r3, r8
 8008978:	463a      	mov	r2, r7
 800897a:	4628      	mov	r0, r5
 800897c:	47b0      	blx	r6
 800897e:	2800      	cmp	r0, #0
 8008980:	dc08      	bgt.n	8008994 <__sflush_r+0xfc>
 8008982:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008986:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800898a:	81a3      	strh	r3, [r4, #12]
 800898c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008994:	4407      	add	r7, r0
 8008996:	eba8 0800 	sub.w	r8, r8, r0
 800899a:	e7e7      	b.n	800896c <__sflush_r+0xd4>
 800899c:	dfbffffe 	.word	0xdfbffffe

080089a0 <_fflush_r>:
 80089a0:	b538      	push	{r3, r4, r5, lr}
 80089a2:	690b      	ldr	r3, [r1, #16]
 80089a4:	4605      	mov	r5, r0
 80089a6:	460c      	mov	r4, r1
 80089a8:	b913      	cbnz	r3, 80089b0 <_fflush_r+0x10>
 80089aa:	2500      	movs	r5, #0
 80089ac:	4628      	mov	r0, r5
 80089ae:	bd38      	pop	{r3, r4, r5, pc}
 80089b0:	b118      	cbz	r0, 80089ba <_fflush_r+0x1a>
 80089b2:	6a03      	ldr	r3, [r0, #32]
 80089b4:	b90b      	cbnz	r3, 80089ba <_fflush_r+0x1a>
 80089b6:	f7ff f813 	bl	80079e0 <__sinit>
 80089ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d0f3      	beq.n	80089aa <_fflush_r+0xa>
 80089c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80089c4:	07d0      	lsls	r0, r2, #31
 80089c6:	d404      	bmi.n	80089d2 <_fflush_r+0x32>
 80089c8:	0599      	lsls	r1, r3, #22
 80089ca:	d402      	bmi.n	80089d2 <_fflush_r+0x32>
 80089cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80089ce:	f7ff fa32 	bl	8007e36 <__retarget_lock_acquire_recursive>
 80089d2:	4628      	mov	r0, r5
 80089d4:	4621      	mov	r1, r4
 80089d6:	f7ff ff5f 	bl	8008898 <__sflush_r>
 80089da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80089dc:	07da      	lsls	r2, r3, #31
 80089de:	4605      	mov	r5, r0
 80089e0:	d4e4      	bmi.n	80089ac <_fflush_r+0xc>
 80089e2:	89a3      	ldrh	r3, [r4, #12]
 80089e4:	059b      	lsls	r3, r3, #22
 80089e6:	d4e1      	bmi.n	80089ac <_fflush_r+0xc>
 80089e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80089ea:	f7ff fa25 	bl	8007e38 <__retarget_lock_release_recursive>
 80089ee:	e7dd      	b.n	80089ac <_fflush_r+0xc>

080089f0 <__swhatbuf_r>:
 80089f0:	b570      	push	{r4, r5, r6, lr}
 80089f2:	460c      	mov	r4, r1
 80089f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089f8:	2900      	cmp	r1, #0
 80089fa:	b096      	sub	sp, #88	@ 0x58
 80089fc:	4615      	mov	r5, r2
 80089fe:	461e      	mov	r6, r3
 8008a00:	da0d      	bge.n	8008a1e <__swhatbuf_r+0x2e>
 8008a02:	89a3      	ldrh	r3, [r4, #12]
 8008a04:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008a08:	f04f 0100 	mov.w	r1, #0
 8008a0c:	bf14      	ite	ne
 8008a0e:	2340      	movne	r3, #64	@ 0x40
 8008a10:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008a14:	2000      	movs	r0, #0
 8008a16:	6031      	str	r1, [r6, #0]
 8008a18:	602b      	str	r3, [r5, #0]
 8008a1a:	b016      	add	sp, #88	@ 0x58
 8008a1c:	bd70      	pop	{r4, r5, r6, pc}
 8008a1e:	466a      	mov	r2, sp
 8008a20:	f000 f862 	bl	8008ae8 <_fstat_r>
 8008a24:	2800      	cmp	r0, #0
 8008a26:	dbec      	blt.n	8008a02 <__swhatbuf_r+0x12>
 8008a28:	9901      	ldr	r1, [sp, #4]
 8008a2a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008a2e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008a32:	4259      	negs	r1, r3
 8008a34:	4159      	adcs	r1, r3
 8008a36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a3a:	e7eb      	b.n	8008a14 <__swhatbuf_r+0x24>

08008a3c <__smakebuf_r>:
 8008a3c:	898b      	ldrh	r3, [r1, #12]
 8008a3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a40:	079d      	lsls	r5, r3, #30
 8008a42:	4606      	mov	r6, r0
 8008a44:	460c      	mov	r4, r1
 8008a46:	d507      	bpl.n	8008a58 <__smakebuf_r+0x1c>
 8008a48:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008a4c:	6023      	str	r3, [r4, #0]
 8008a4e:	6123      	str	r3, [r4, #16]
 8008a50:	2301      	movs	r3, #1
 8008a52:	6163      	str	r3, [r4, #20]
 8008a54:	b003      	add	sp, #12
 8008a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a58:	ab01      	add	r3, sp, #4
 8008a5a:	466a      	mov	r2, sp
 8008a5c:	f7ff ffc8 	bl	80089f0 <__swhatbuf_r>
 8008a60:	9f00      	ldr	r7, [sp, #0]
 8008a62:	4605      	mov	r5, r0
 8008a64:	4639      	mov	r1, r7
 8008a66:	4630      	mov	r0, r6
 8008a68:	f7ff fa62 	bl	8007f30 <_malloc_r>
 8008a6c:	b948      	cbnz	r0, 8008a82 <__smakebuf_r+0x46>
 8008a6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a72:	059a      	lsls	r2, r3, #22
 8008a74:	d4ee      	bmi.n	8008a54 <__smakebuf_r+0x18>
 8008a76:	f023 0303 	bic.w	r3, r3, #3
 8008a7a:	f043 0302 	orr.w	r3, r3, #2
 8008a7e:	81a3      	strh	r3, [r4, #12]
 8008a80:	e7e2      	b.n	8008a48 <__smakebuf_r+0xc>
 8008a82:	89a3      	ldrh	r3, [r4, #12]
 8008a84:	6020      	str	r0, [r4, #0]
 8008a86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a8a:	81a3      	strh	r3, [r4, #12]
 8008a8c:	9b01      	ldr	r3, [sp, #4]
 8008a8e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008a92:	b15b      	cbz	r3, 8008aac <__smakebuf_r+0x70>
 8008a94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a98:	4630      	mov	r0, r6
 8008a9a:	f000 f837 	bl	8008b0c <_isatty_r>
 8008a9e:	b128      	cbz	r0, 8008aac <__smakebuf_r+0x70>
 8008aa0:	89a3      	ldrh	r3, [r4, #12]
 8008aa2:	f023 0303 	bic.w	r3, r3, #3
 8008aa6:	f043 0301 	orr.w	r3, r3, #1
 8008aaa:	81a3      	strh	r3, [r4, #12]
 8008aac:	89a3      	ldrh	r3, [r4, #12]
 8008aae:	431d      	orrs	r5, r3
 8008ab0:	81a5      	strh	r5, [r4, #12]
 8008ab2:	e7cf      	b.n	8008a54 <__smakebuf_r+0x18>

08008ab4 <memmove>:
 8008ab4:	4288      	cmp	r0, r1
 8008ab6:	b510      	push	{r4, lr}
 8008ab8:	eb01 0402 	add.w	r4, r1, r2
 8008abc:	d902      	bls.n	8008ac4 <memmove+0x10>
 8008abe:	4284      	cmp	r4, r0
 8008ac0:	4623      	mov	r3, r4
 8008ac2:	d807      	bhi.n	8008ad4 <memmove+0x20>
 8008ac4:	1e43      	subs	r3, r0, #1
 8008ac6:	42a1      	cmp	r1, r4
 8008ac8:	d008      	beq.n	8008adc <memmove+0x28>
 8008aca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ace:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ad2:	e7f8      	b.n	8008ac6 <memmove+0x12>
 8008ad4:	4402      	add	r2, r0
 8008ad6:	4601      	mov	r1, r0
 8008ad8:	428a      	cmp	r2, r1
 8008ada:	d100      	bne.n	8008ade <memmove+0x2a>
 8008adc:	bd10      	pop	{r4, pc}
 8008ade:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ae2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ae6:	e7f7      	b.n	8008ad8 <memmove+0x24>

08008ae8 <_fstat_r>:
 8008ae8:	b538      	push	{r3, r4, r5, lr}
 8008aea:	4d07      	ldr	r5, [pc, #28]	@ (8008b08 <_fstat_r+0x20>)
 8008aec:	2300      	movs	r3, #0
 8008aee:	4604      	mov	r4, r0
 8008af0:	4608      	mov	r0, r1
 8008af2:	4611      	mov	r1, r2
 8008af4:	602b      	str	r3, [r5, #0]
 8008af6:	f7f8 f9f6 	bl	8000ee6 <_fstat>
 8008afa:	1c43      	adds	r3, r0, #1
 8008afc:	d102      	bne.n	8008b04 <_fstat_r+0x1c>
 8008afe:	682b      	ldr	r3, [r5, #0]
 8008b00:	b103      	cbz	r3, 8008b04 <_fstat_r+0x1c>
 8008b02:	6023      	str	r3, [r4, #0]
 8008b04:	bd38      	pop	{r3, r4, r5, pc}
 8008b06:	bf00      	nop
 8008b08:	20005844 	.word	0x20005844

08008b0c <_isatty_r>:
 8008b0c:	b538      	push	{r3, r4, r5, lr}
 8008b0e:	4d06      	ldr	r5, [pc, #24]	@ (8008b28 <_isatty_r+0x1c>)
 8008b10:	2300      	movs	r3, #0
 8008b12:	4604      	mov	r4, r0
 8008b14:	4608      	mov	r0, r1
 8008b16:	602b      	str	r3, [r5, #0]
 8008b18:	f7f8 f9f5 	bl	8000f06 <_isatty>
 8008b1c:	1c43      	adds	r3, r0, #1
 8008b1e:	d102      	bne.n	8008b26 <_isatty_r+0x1a>
 8008b20:	682b      	ldr	r3, [r5, #0]
 8008b22:	b103      	cbz	r3, 8008b26 <_isatty_r+0x1a>
 8008b24:	6023      	str	r3, [r4, #0]
 8008b26:	bd38      	pop	{r3, r4, r5, pc}
 8008b28:	20005844 	.word	0x20005844

08008b2c <_sbrk_r>:
 8008b2c:	b538      	push	{r3, r4, r5, lr}
 8008b2e:	4d06      	ldr	r5, [pc, #24]	@ (8008b48 <_sbrk_r+0x1c>)
 8008b30:	2300      	movs	r3, #0
 8008b32:	4604      	mov	r4, r0
 8008b34:	4608      	mov	r0, r1
 8008b36:	602b      	str	r3, [r5, #0]
 8008b38:	f7f8 f9fe 	bl	8000f38 <_sbrk>
 8008b3c:	1c43      	adds	r3, r0, #1
 8008b3e:	d102      	bne.n	8008b46 <_sbrk_r+0x1a>
 8008b40:	682b      	ldr	r3, [r5, #0]
 8008b42:	b103      	cbz	r3, 8008b46 <_sbrk_r+0x1a>
 8008b44:	6023      	str	r3, [r4, #0]
 8008b46:	bd38      	pop	{r3, r4, r5, pc}
 8008b48:	20005844 	.word	0x20005844

08008b4c <_realloc_r>:
 8008b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b50:	4680      	mov	r8, r0
 8008b52:	4615      	mov	r5, r2
 8008b54:	460c      	mov	r4, r1
 8008b56:	b921      	cbnz	r1, 8008b62 <_realloc_r+0x16>
 8008b58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b5c:	4611      	mov	r1, r2
 8008b5e:	f7ff b9e7 	b.w	8007f30 <_malloc_r>
 8008b62:	b92a      	cbnz	r2, 8008b70 <_realloc_r+0x24>
 8008b64:	f7ff f978 	bl	8007e58 <_free_r>
 8008b68:	2400      	movs	r4, #0
 8008b6a:	4620      	mov	r0, r4
 8008b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b70:	f000 f81a 	bl	8008ba8 <_malloc_usable_size_r>
 8008b74:	4285      	cmp	r5, r0
 8008b76:	4606      	mov	r6, r0
 8008b78:	d802      	bhi.n	8008b80 <_realloc_r+0x34>
 8008b7a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008b7e:	d8f4      	bhi.n	8008b6a <_realloc_r+0x1e>
 8008b80:	4629      	mov	r1, r5
 8008b82:	4640      	mov	r0, r8
 8008b84:	f7ff f9d4 	bl	8007f30 <_malloc_r>
 8008b88:	4607      	mov	r7, r0
 8008b8a:	2800      	cmp	r0, #0
 8008b8c:	d0ec      	beq.n	8008b68 <_realloc_r+0x1c>
 8008b8e:	42b5      	cmp	r5, r6
 8008b90:	462a      	mov	r2, r5
 8008b92:	4621      	mov	r1, r4
 8008b94:	bf28      	it	cs
 8008b96:	4632      	movcs	r2, r6
 8008b98:	f7ff f94f 	bl	8007e3a <memcpy>
 8008b9c:	4621      	mov	r1, r4
 8008b9e:	4640      	mov	r0, r8
 8008ba0:	f7ff f95a 	bl	8007e58 <_free_r>
 8008ba4:	463c      	mov	r4, r7
 8008ba6:	e7e0      	b.n	8008b6a <_realloc_r+0x1e>

08008ba8 <_malloc_usable_size_r>:
 8008ba8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bac:	1f18      	subs	r0, r3, #4
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	bfbc      	itt	lt
 8008bb2:	580b      	ldrlt	r3, [r1, r0]
 8008bb4:	18c0      	addlt	r0, r0, r3
 8008bb6:	4770      	bx	lr

08008bb8 <_init>:
 8008bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bba:	bf00      	nop
 8008bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bbe:	bc08      	pop	{r3}
 8008bc0:	469e      	mov	lr, r3
 8008bc2:	4770      	bx	lr

08008bc4 <_fini>:
 8008bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bc6:	bf00      	nop
 8008bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bca:	bc08      	pop	{r3}
 8008bcc:	469e      	mov	lr, r3
 8008bce:	4770      	bx	lr
